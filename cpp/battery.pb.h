// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: battery.proto
// Protobuf C++ Version: 5.29.3

#ifndef battery_2eproto_2epb_2eh
#define battery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "header.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_battery_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_battery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_battery_2eproto;
namespace kevin {
class Battery;
struct BatteryDefaultTypeInternal;
extern BatteryDefaultTypeInternal _Battery_default_instance_;
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kevin {
enum BatteryStatus : int {
  BATTERY_STATUS_UNKNOWN = 0,
  BATTERY_STATUS_CHARGING = 1,
  BATTERY_STATUS_DISCHARGING = 2,
  BATTERY_STATUS_NOT_CHARGING = 3,
  BATTERY_STATUS_FULL = 4,
  BatteryStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BatteryStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BatteryStatus_IsValid(int value);
extern const uint32_t BatteryStatus_internal_data_[];
constexpr BatteryStatus BatteryStatus_MIN = static_cast<BatteryStatus>(0);
constexpr BatteryStatus BatteryStatus_MAX = static_cast<BatteryStatus>(4);
constexpr int BatteryStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
BatteryStatus_descriptor();
template <typename T>
const std::string& BatteryStatus_Name(T value) {
  static_assert(std::is_same<T, BatteryStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BatteryStatus_Name().");
  return BatteryStatus_Name(static_cast<BatteryStatus>(value));
}
template <>
inline const std::string& BatteryStatus_Name(BatteryStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BatteryStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool BatteryStatus_Parse(absl::string_view name, BatteryStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatteryStatus>(
      BatteryStatus_descriptor(), name, value);
}
enum BatteryHealth : int {
  BATTERY_HEALTH_UNKNOWN = 0,
  BATTERY_HEALTH_GOOD = 1,
  BATTERY_HEALTH_OVERHEAT = 2,
  BATTERY_HEALTH_DEAD = 3,
  BATTERY_HEALTH_OVERVOLTAGE = 4,
  BATTERY_HEALTH_UNSPEC_FAILURE = 5,
  BATTERY_HEALTH_COLD = 6,
  BATTERY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7,
  BATTERY_HEALTH_SAFETY_TIMER_EXPIRE = 8,
  BatteryHealth_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BatteryHealth_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BatteryHealth_IsValid(int value);
extern const uint32_t BatteryHealth_internal_data_[];
constexpr BatteryHealth BatteryHealth_MIN = static_cast<BatteryHealth>(0);
constexpr BatteryHealth BatteryHealth_MAX = static_cast<BatteryHealth>(8);
constexpr int BatteryHealth_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
BatteryHealth_descriptor();
template <typename T>
const std::string& BatteryHealth_Name(T value) {
  static_assert(std::is_same<T, BatteryHealth>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BatteryHealth_Name().");
  return BatteryHealth_Name(static_cast<BatteryHealth>(value));
}
template <>
inline const std::string& BatteryHealth_Name(BatteryHealth value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BatteryHealth_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool BatteryHealth_Parse(absl::string_view name, BatteryHealth* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatteryHealth>(
      BatteryHealth_descriptor(), name, value);
}
enum BatteryTechnology : int {
  BATTERY_TECHNOLOGY_UNKNOWN = 0,
  BATTERY_TECHNOLOGY_NIMH = 1,
  BATTERY_TECHNOLOGY_LION = 2,
  BATTERY_TECHNOLOGY_LIPO = 3,
  BATTERY_TECHNOLOGY_LIFE = 4,
  BATTERY_TECHNOLOGY_NICD = 5,
  BATTERY_TECHNOLOGY_LIMN = 6,
  BATTERY_TECHNOLOGY_TERNARY = 7,
  BATTERY_TECHNOLOGY_VRLA = 8,
  BatteryTechnology_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BatteryTechnology_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BatteryTechnology_IsValid(int value);
extern const uint32_t BatteryTechnology_internal_data_[];
constexpr BatteryTechnology BatteryTechnology_MIN = static_cast<BatteryTechnology>(0);
constexpr BatteryTechnology BatteryTechnology_MAX = static_cast<BatteryTechnology>(8);
constexpr int BatteryTechnology_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
BatteryTechnology_descriptor();
template <typename T>
const std::string& BatteryTechnology_Name(T value) {
  static_assert(std::is_same<T, BatteryTechnology>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BatteryTechnology_Name().");
  return BatteryTechnology_Name(static_cast<BatteryTechnology>(value));
}
template <>
inline const std::string& BatteryTechnology_Name(BatteryTechnology value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BatteryTechnology_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool BatteryTechnology_Parse(absl::string_view name, BatteryTechnology* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatteryTechnology>(
      BatteryTechnology_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Battery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Battery) */ {
 public:
  inline Battery() : Battery(nullptr) {}
  ~Battery() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Battery* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Battery));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Battery(
      ::google::protobuf::internal::ConstantInitialized);

  inline Battery(const Battery& from) : Battery(nullptr, from) {}
  inline Battery(Battery&& from) noexcept
      : Battery(nullptr, std::move(from)) {}
  inline Battery& operator=(const Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Battery& operator=(Battery&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Battery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Battery* internal_default_instance() {
    return reinterpret_cast<const Battery*>(
        &_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Battery& a, Battery& b) { a.Swap(&b); }
  inline void Swap(Battery* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Battery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Battery* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Battery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Battery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Battery& from) { Battery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Battery* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Battery"; }

 protected:
  explicit Battery(::google::protobuf::Arena* arena);
  Battery(::google::protobuf::Arena* arena, const Battery& from);
  Battery(::google::protobuf::Arena* arena, Battery&& from) noexcept
      : Battery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCellVoltageFieldNumber = 13,
    kCellTemperatureFieldNumber = 14,
    kLocationFieldNumber = 15,
    kSerialNumberFieldNumber = 16,
    kHeaderFieldNumber = 1,
    kVoltageFieldNumber = 2,
    kTemperatureFieldNumber = 3,
    kCurrentFieldNumber = 4,
    kChargeFieldNumber = 5,
    kCapacityFieldNumber = 6,
    kDesignCapacityFieldNumber = 7,
    kPercentageFieldNumber = 8,
    kStatusFieldNumber = 9,
    kHealthFieldNumber = 10,
    kTechnologyFieldNumber = 11,
    kPresentFieldNumber = 12,
  };
  // repeated float cell_voltage = 13;
  int cell_voltage_size() const;
  private:
  int _internal_cell_voltage_size() const;

  public:
  void clear_cell_voltage() ;
  float cell_voltage(int index) const;
  void set_cell_voltage(int index, float value);
  void add_cell_voltage(float value);
  const ::google::protobuf::RepeatedField<float>& cell_voltage() const;
  ::google::protobuf::RepeatedField<float>* mutable_cell_voltage();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_cell_voltage() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_cell_voltage();

  public:
  // repeated float cell_temperature = 14;
  int cell_temperature_size() const;
  private:
  int _internal_cell_temperature_size() const;

  public:
  void clear_cell_temperature() ;
  float cell_temperature(int index) const;
  void set_cell_temperature(int index, float value);
  void add_cell_temperature(float value);
  const ::google::protobuf::RepeatedField<float>& cell_temperature() const;
  ::google::protobuf::RepeatedField<float>* mutable_cell_temperature();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_cell_temperature() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_cell_temperature();

  public:
  // string location = 15;
  void clear_location() ;
  const std::string& location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* value);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // string serial_number = 16;
  void clear_serial_number() ;
  const std::string& serial_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_serial_number(Arg_&& arg, Args_... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* value);

  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(
      const std::string& value);
  std::string* _internal_mutable_serial_number();

  public:
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // float voltage = 2;
  void clear_voltage() ;
  float voltage() const;
  void set_voltage(float value);

  private:
  float _internal_voltage() const;
  void _internal_set_voltage(float value);

  public:
  // float temperature = 3;
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // float current = 4;
  void clear_current() ;
  float current() const;
  void set_current(float value);

  private:
  float _internal_current() const;
  void _internal_set_current(float value);

  public:
  // float charge = 5;
  void clear_charge() ;
  float charge() const;
  void set_charge(float value);

  private:
  float _internal_charge() const;
  void _internal_set_charge(float value);

  public:
  // float capacity = 6;
  void clear_capacity() ;
  float capacity() const;
  void set_capacity(float value);

  private:
  float _internal_capacity() const;
  void _internal_set_capacity(float value);

  public:
  // float design_capacity = 7;
  void clear_design_capacity() ;
  float design_capacity() const;
  void set_design_capacity(float value);

  private:
  float _internal_design_capacity() const;
  void _internal_set_design_capacity(float value);

  public:
  // float percentage = 8;
  void clear_percentage() ;
  float percentage() const;
  void set_percentage(float value);

  private:
  float _internal_percentage() const;
  void _internal_set_percentage(float value);

  public:
  // .kevin.BatteryStatus status = 9;
  void clear_status() ;
  ::kevin::BatteryStatus status() const;
  void set_status(::kevin::BatteryStatus value);

  private:
  ::kevin::BatteryStatus _internal_status() const;
  void _internal_set_status(::kevin::BatteryStatus value);

  public:
  // .kevin.BatteryHealth health = 10;
  void clear_health() ;
  ::kevin::BatteryHealth health() const;
  void set_health(::kevin::BatteryHealth value);

  private:
  ::kevin::BatteryHealth _internal_health() const;
  void _internal_set_health(::kevin::BatteryHealth value);

  public:
  // .kevin.BatteryTechnology technology = 11;
  void clear_technology() ;
  ::kevin::BatteryTechnology technology() const;
  void set_technology(::kevin::BatteryTechnology value);

  private:
  ::kevin::BatteryTechnology _internal_technology() const;
  void _internal_set_technology(::kevin::BatteryTechnology value);

  public:
  // bool present = 12;
  void clear_present() ;
  bool present() const;
  void set_present(bool value);

  private:
  bool _internal_present() const;
  void _internal_set_present(bool value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.Battery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Battery& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> cell_voltage_;
    ::google::protobuf::RepeatedField<float> cell_temperature_;
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::google::protobuf::internal::ArenaStringPtr serial_number_;
    ::kevin::Header* header_;
    float voltage_;
    float temperature_;
    float current_;
    float charge_;
    float capacity_;
    float design_capacity_;
    float percentage_;
    int status_;
    int health_;
    int technology_;
    bool present_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Battery

// .kevin.Header header = 1;
inline bool Battery::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& Battery::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& Battery::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Battery.header)
  return _internal_header();
}
inline void Battery::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Battery.header)
}
inline ::kevin::Header* Battery::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* Battery::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Battery.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* Battery::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* Battery::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.Battery.header)
  return _msg;
}
inline void Battery::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Battery.header)
}

// float voltage = 2;
inline void Battery::clear_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voltage_ = 0;
}
inline float Battery::voltage() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.voltage)
  return _internal_voltage();
}
inline void Battery::set_voltage(float value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.voltage)
}
inline float Battery::_internal_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voltage_;
}
inline void Battery::_internal_set_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voltage_ = value;
}

// float temperature = 3;
inline void Battery::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline float Battery::temperature() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.temperature)
  return _internal_temperature();
}
inline void Battery::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.temperature)
}
inline float Battery::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void Battery::_internal_set_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// float current = 4;
inline void Battery::clear_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_ = 0;
}
inline float Battery::current() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.current)
  return _internal_current();
}
inline void Battery::set_current(float value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.current)
}
inline float Battery::_internal_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_;
}
inline void Battery::_internal_set_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_ = value;
}

// float charge = 5;
inline void Battery::clear_charge() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.charge_ = 0;
}
inline float Battery::charge() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.charge)
  return _internal_charge();
}
inline void Battery::set_charge(float value) {
  _internal_set_charge(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.charge)
}
inline float Battery::_internal_charge() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.charge_;
}
inline void Battery::_internal_set_charge(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.charge_ = value;
}

// float capacity = 6;
inline void Battery::clear_capacity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.capacity_ = 0;
}
inline float Battery::capacity() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.capacity)
  return _internal_capacity();
}
inline void Battery::set_capacity(float value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.capacity)
}
inline float Battery::_internal_capacity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.capacity_;
}
inline void Battery::_internal_set_capacity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.capacity_ = value;
}

// float design_capacity = 7;
inline void Battery::clear_design_capacity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.design_capacity_ = 0;
}
inline float Battery::design_capacity() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.design_capacity)
  return _internal_design_capacity();
}
inline void Battery::set_design_capacity(float value) {
  _internal_set_design_capacity(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.design_capacity)
}
inline float Battery::_internal_design_capacity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.design_capacity_;
}
inline void Battery::_internal_set_design_capacity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.design_capacity_ = value;
}

// float percentage = 8;
inline void Battery::clear_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_ = 0;
}
inline float Battery::percentage() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.percentage)
  return _internal_percentage();
}
inline void Battery::set_percentage(float value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.percentage)
}
inline float Battery::_internal_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.percentage_;
}
inline void Battery::_internal_set_percentage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_ = value;
}

// .kevin.BatteryStatus status = 9;
inline void Battery::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::kevin::BatteryStatus Battery::status() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.status)
  return _internal_status();
}
inline void Battery::set_status(::kevin::BatteryStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.status)
}
inline ::kevin::BatteryStatus Battery::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::BatteryStatus>(_impl_.status_);
}
inline void Battery::_internal_set_status(::kevin::BatteryStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// .kevin.BatteryHealth health = 10;
inline void Battery::clear_health() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_ = 0;
}
inline ::kevin::BatteryHealth Battery::health() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.health)
  return _internal_health();
}
inline void Battery::set_health(::kevin::BatteryHealth value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.health)
}
inline ::kevin::BatteryHealth Battery::_internal_health() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::BatteryHealth>(_impl_.health_);
}
inline void Battery::_internal_set_health(::kevin::BatteryHealth value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_ = value;
}

// .kevin.BatteryTechnology technology = 11;
inline void Battery::clear_technology() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.technology_ = 0;
}
inline ::kevin::BatteryTechnology Battery::technology() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.technology)
  return _internal_technology();
}
inline void Battery::set_technology(::kevin::BatteryTechnology value) {
  _internal_set_technology(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.technology)
}
inline ::kevin::BatteryTechnology Battery::_internal_technology() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::BatteryTechnology>(_impl_.technology_);
}
inline void Battery::_internal_set_technology(::kevin::BatteryTechnology value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.technology_ = value;
}

// bool present = 12;
inline void Battery::clear_present() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.present_ = false;
}
inline bool Battery::present() const {
  // @@protoc_insertion_point(field_get:kevin.Battery.present)
  return _internal_present();
}
inline void Battery::set_present(bool value) {
  _internal_set_present(value);
  // @@protoc_insertion_point(field_set:kevin.Battery.present)
}
inline bool Battery::_internal_present() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.present_;
}
inline void Battery::_internal_set_present(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.present_ = value;
}

// repeated float cell_voltage = 13;
inline int Battery::_internal_cell_voltage_size() const {
  return _internal_cell_voltage().size();
}
inline int Battery::cell_voltage_size() const {
  return _internal_cell_voltage_size();
}
inline void Battery::clear_cell_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_voltage_.Clear();
}
inline float Battery::cell_voltage(int index) const {
  // @@protoc_insertion_point(field_get:kevin.Battery.cell_voltage)
  return _internal_cell_voltage().Get(index);
}
inline void Battery::set_cell_voltage(int index, float value) {
  _internal_mutable_cell_voltage()->Set(index, value);
  // @@protoc_insertion_point(field_set:kevin.Battery.cell_voltage)
}
inline void Battery::add_cell_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cell_voltage()->Add(value);
  // @@protoc_insertion_point(field_add:kevin.Battery.cell_voltage)
}
inline const ::google::protobuf::RepeatedField<float>& Battery::cell_voltage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kevin.Battery.cell_voltage)
  return _internal_cell_voltage();
}
inline ::google::protobuf::RepeatedField<float>* Battery::mutable_cell_voltage()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kevin.Battery.cell_voltage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cell_voltage();
}
inline const ::google::protobuf::RepeatedField<float>&
Battery::_internal_cell_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_voltage_;
}
inline ::google::protobuf::RepeatedField<float>* Battery::_internal_mutable_cell_voltage() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cell_voltage_;
}

// repeated float cell_temperature = 14;
inline int Battery::_internal_cell_temperature_size() const {
  return _internal_cell_temperature().size();
}
inline int Battery::cell_temperature_size() const {
  return _internal_cell_temperature_size();
}
inline void Battery::clear_cell_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_temperature_.Clear();
}
inline float Battery::cell_temperature(int index) const {
  // @@protoc_insertion_point(field_get:kevin.Battery.cell_temperature)
  return _internal_cell_temperature().Get(index);
}
inline void Battery::set_cell_temperature(int index, float value) {
  _internal_mutable_cell_temperature()->Set(index, value);
  // @@protoc_insertion_point(field_set:kevin.Battery.cell_temperature)
}
inline void Battery::add_cell_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cell_temperature()->Add(value);
  // @@protoc_insertion_point(field_add:kevin.Battery.cell_temperature)
}
inline const ::google::protobuf::RepeatedField<float>& Battery::cell_temperature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kevin.Battery.cell_temperature)
  return _internal_cell_temperature();
}
inline ::google::protobuf::RepeatedField<float>* Battery::mutable_cell_temperature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kevin.Battery.cell_temperature)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cell_temperature();
}
inline const ::google::protobuf::RepeatedField<float>&
Battery::_internal_cell_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_temperature_;
}
inline ::google::protobuf::RepeatedField<float>* Battery::_internal_mutable_cell_temperature() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cell_temperature_;
}

// string location = 15;
inline void Battery::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.ClearToEmpty();
}
inline const std::string& Battery::location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Battery.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Battery::set_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kevin.Battery.location)
}
inline std::string* Battery::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:kevin.Battery.location)
  return _s;
}
inline const std::string& Battery::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.location_.Get();
}
inline void Battery::_internal_set_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(value, GetArena());
}
inline std::string* Battery::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.location_.Mutable( GetArena());
}
inline std::string* Battery::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Battery.location)
  return _impl_.location_.Release();
}
inline void Battery::set_allocated_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kevin.Battery.location)
}

// string serial_number = 16;
inline void Battery::clear_serial_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_number_.ClearToEmpty();
}
inline const std::string& Battery::serial_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Battery.serial_number)
  return _internal_serial_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Battery::set_serial_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kevin.Battery.serial_number)
}
inline std::string* Battery::mutable_serial_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:kevin.Battery.serial_number)
  return _s;
}
inline const std::string& Battery::_internal_serial_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.serial_number_.Get();
}
inline void Battery::_internal_set_serial_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_number_.Set(value, GetArena());
}
inline std::string* Battery::_internal_mutable_serial_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.serial_number_.Mutable( GetArena());
}
inline std::string* Battery::release_serial_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Battery.serial_number)
  return _impl_.serial_number_.Release();
}
inline void Battery::set_allocated_serial_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.serial_number_.IsDefault()) {
    _impl_.serial_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kevin.Battery.serial_number)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::kevin::BatteryStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::BatteryStatus>() {
  return ::kevin::BatteryStatus_descriptor();
}
template <>
struct is_proto_enum<::kevin::BatteryHealth> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::BatteryHealth>() {
  return ::kevin::BatteryHealth_descriptor();
}
template <>
struct is_proto_enum<::kevin::BatteryTechnology> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::BatteryTechnology>() {
  return ::kevin::BatteryTechnology_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // battery_2eproto_2epb_2eh
