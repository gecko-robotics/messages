// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: image.proto
// Protobuf C++ Version: 5.29.3

#include "image.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kevin {

inline constexpr Image::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : encoding_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        width_{0u},
        height_{0u},
        step_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Image::Image(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;

inline constexpr DisparityImage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        image_{nullptr},
        f_{0},
        t_{0},
        min_disparity_{0},
        max_disparity_{0},
        delta_d_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DisparityImage::DisparityImage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DisparityImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisparityImageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisparityImageDefaultTypeInternal() {}
  union {
    DisparityImage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisparityImageDefaultTypeInternal _DisparityImage_default_instance_;
}  // namespace kevin
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_image_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_image_2eproto = nullptr;
const ::uint32_t
    TableStruct_image_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kevin::Image, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::Image, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::kevin::Image, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::kevin::Image, _impl_.encoding_),
        PROTOBUF_FIELD_OFFSET(::kevin::Image, _impl_.step_),
        PROTOBUF_FIELD_OFFSET(::kevin::Image, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.image_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.f_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.t_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.min_disparity_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.max_disparity_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.delta_d_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::kevin::Image)},
        {13, 28, -1, sizeof(::kevin::DisparityImage)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kevin::_Image_default_instance_._instance,
    &::kevin::_DisparityImage_default_instance_._instance,
};
const char descriptor_table_protodef_image_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013image.proto\022\005kevin\032\014header.proto\"T\n\005Im"
    "age\022\r\n\005width\030\001 \001(\007\022\016\n\006height\030\002 \001(\007\022\020\n\010en"
    "coding\030\003 \001(\t\022\014\n\004step\030\004 \001(\007\022\014\n\004data\030\005 \001(\014"
    "\"\241\001\n\016DisparityImage\022\035\n\006header\030\001 \001(\0132\r.ke"
    "vin.Header\022\033\n\005image\030\002 \001(\0132\014.kevin.Image\022"
    "\t\n\001f\030\003 \001(\002\022\t\n\001t\030\004 \001(\002\022\025\n\rmin_disparity\030\005"
    " \001(\002\022\025\n\rmax_disparity\030\006 \001(\002\022\017\n\007delta_d\030\007"
    " \001(\002b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_image_2eproto_deps[1] =
    {
        &::descriptor_table_header_2eproto,
};
static ::absl::once_flag descriptor_table_image_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_image_2eproto = {
    false,
    false,
    292,
    descriptor_table_protodef_image_2eproto,
    "image.proto",
    &descriptor_table_image_2eproto_once,
    descriptor_table_image_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_image_2eproto::offsets,
    file_level_enum_descriptors_image_2eproto,
    file_level_service_descriptors_image_2eproto,
};
namespace kevin {
// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.Image)
}
inline PROTOBUF_NDEBUG_INLINE Image::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::Image& from_msg)
      : encoding_(arena, from.encoding_),
        data_(arena, from.data_),
        _cached_size_{0} {}

Image::Image(
    ::google::protobuf::Arena* arena,
    const Image& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Image* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, step_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::step_));

  // @@protoc_insertion_point(copy_constructor:kevin.Image)
}
inline PROTOBUF_NDEBUG_INLINE Image::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : encoding_(arena),
        data_(arena),
        _cached_size_{0} {}

inline void Image::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, step_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::step_));
}
Image::~Image() {
  // @@protoc_insertion_point(destructor:kevin.Image)
  SharedDtor(*this);
}
inline void Image::SharedDtor(MessageLite& self) {
  Image& this_ = static_cast<Image&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encoding_.Destroy();
  this_._impl_.data_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Image::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Image(arena);
}
constexpr auto Image::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Image),
                                            alignof(Image));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Image::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Image_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Image::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Image>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Image::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Image>(), &Image::ByteSizeLong,
            &Image::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Image, _impl_._cached_size_),
        false,
    },
    &Image::kDescriptorMethods,
    &descriptor_table_image_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Image::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 28, 2> Image::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::Image>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // fixed32 width = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Image, _impl_.width_)}},
    // fixed32 height = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Image, _impl_.height_)}},
    // string encoding = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Image, _impl_.encoding_)}},
    // fixed32 step = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Image, _impl_.step_)}},
    // bytes data = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Image, _impl_.data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // fixed32 width = 1;
    {PROTOBUF_FIELD_OFFSET(Image, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // fixed32 height = 2;
    {PROTOBUF_FIELD_OFFSET(Image, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // string encoding = 3;
    {PROTOBUF_FIELD_OFFSET(Image, _impl_.encoding_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // fixed32 step = 4;
    {PROTOBUF_FIELD_OFFSET(Image, _impl_.step_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // bytes data = 5;
    {PROTOBUF_FIELD_OFFSET(Image, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\13\0\0\10\0\0\0\0"
    "kevin.Image"
    "encoding"
  }},
};

PROTOBUF_NOINLINE void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.Image)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoding_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.step_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.step_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Image::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Image& this_ = static_cast<const Image&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Image::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Image& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.Image)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // fixed32 width = 1;
          if (this_._internal_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                1, this_._internal_width(), target);
          }

          // fixed32 height = 2;
          if (this_._internal_height() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                2, this_._internal_height(), target);
          }

          // string encoding = 3;
          if (!this_._internal_encoding().empty()) {
            const std::string& _s = this_._internal_encoding();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kevin.Image.encoding");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // fixed32 step = 4;
          if (this_._internal_step() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                4, this_._internal_step(), target);
          }

          // bytes data = 5;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(5, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.Image)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Image::ByteSizeLong(const MessageLite& base) {
          const Image& this_ = static_cast<const Image&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Image::ByteSizeLong() const {
          const Image& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.Image)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string encoding = 3;
            if (!this_._internal_encoding().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_encoding());
            }
            // bytes data = 5;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
            // fixed32 width = 1;
            if (this_._internal_width() != 0) {
              total_size += 5;
            }
            // fixed32 height = 2;
            if (this_._internal_height() != 0) {
              total_size += 5;
            }
            // fixed32 step = 4;
            if (this_._internal_step() != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Image::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Image*>(&to_msg);
  auto& from = static_cast<const Image&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.Image)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoding().empty()) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_width() != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_step() != 0) {
    _this->_impl_.step_ = from._impl_.step_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Image::InternalSwap(Image* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encoding_, &other->_impl_.encoding_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, _impl_.step_)
      + sizeof(Image::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(Image, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata Image::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DisparityImage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DisparityImage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_._has_bits_);
};

void DisparityImage::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DisparityImage::DisparityImage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.DisparityImage)
}
inline PROTOBUF_NDEBUG_INLINE DisparityImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::DisparityImage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DisparityImage::DisparityImage(
    ::google::protobuf::Arena* arena,
    const DisparityImage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DisparityImage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.image_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Image>(
                              arena, *from._impl_.image_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, f_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, f_),
           offsetof(Impl_, delta_d_) -
               offsetof(Impl_, f_) +
               sizeof(Impl_::delta_d_));

  // @@protoc_insertion_point(copy_constructor:kevin.DisparityImage)
}
inline PROTOBUF_NDEBUG_INLINE DisparityImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DisparityImage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, delta_d_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::delta_d_));
}
DisparityImage::~DisparityImage() {
  // @@protoc_insertion_point(destructor:kevin.DisparityImage)
  SharedDtor(*this);
}
inline void DisparityImage::SharedDtor(MessageLite& self) {
  DisparityImage& this_ = static_cast<DisparityImage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.image_;
  this_._impl_.~Impl_();
}

inline void* DisparityImage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DisparityImage(arena);
}
constexpr auto DisparityImage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DisparityImage),
                                            alignof(DisparityImage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DisparityImage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DisparityImage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DisparityImage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DisparityImage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DisparityImage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DisparityImage>(), &DisparityImage::ByteSizeLong,
            &DisparityImage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_._cached_size_),
        false,
    },
    &DisparityImage::kDescriptorMethods,
    &descriptor_table_image_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DisparityImage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> DisparityImage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::DisparityImage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.header_)}},
    // .kevin.Image image = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.image_)}},
    // float f = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.f_)}},
    // float t = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.t_)}},
    // float min_disparity = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.min_disparity_)}},
    // float max_disparity = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.max_disparity_)}},
    // float delta_d = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.delta_d_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Image image = 2;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.image_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float f = 3;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.f_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float t = 4;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.t_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_disparity = 5;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.min_disparity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_disparity = 6;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.max_disparity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float delta_d = 7;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.delta_d_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::Image>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DisparityImage::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.DisparityImage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
  }
  ::memset(&_impl_.f_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delta_d_) -
      reinterpret_cast<char*>(&_impl_.f_)) + sizeof(_impl_.delta_d_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DisparityImage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DisparityImage& this_ = static_cast<const DisparityImage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DisparityImage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DisparityImage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.DisparityImage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Image image = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.image_, this_._impl_.image_->GetCachedSize(), target,
                stream);
          }

          // float f = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_f()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_f(), target);
          }

          // float t = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_t()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_t(), target);
          }

          // float min_disparity = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_disparity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_min_disparity(), target);
          }

          // float max_disparity = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_disparity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_max_disparity(), target);
          }

          // float delta_d = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_delta_d()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_delta_d(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.DisparityImage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DisparityImage::ByteSizeLong(const MessageLite& base) {
          const DisparityImage& this_ = static_cast<const DisparityImage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DisparityImage::ByteSizeLong() const {
          const DisparityImage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.DisparityImage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.Image image = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.image_);
            }
          }
           {
            // float f = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_f()) != 0) {
              total_size += 5;
            }
            // float t = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_t()) != 0) {
              total_size += 5;
            }
            // float min_disparity = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_disparity()) != 0) {
              total_size += 5;
            }
            // float max_disparity = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_disparity()) != 0) {
              total_size += 5;
            }
            // float delta_d = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_delta_d()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DisparityImage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DisparityImage*>(&to_msg);
  auto& from = static_cast<const DisparityImage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.DisparityImage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.image_ != nullptr);
      if (_this->_impl_.image_ == nullptr) {
        _this->_impl_.image_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Image>(arena, *from._impl_.image_);
      } else {
        _this->_impl_.image_->MergeFrom(*from._impl_.image_);
      }
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_f()) != 0) {
    _this->_impl_.f_ = from._impl_.f_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_t()) != 0) {
    _this->_impl_.t_ = from._impl_.t_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_disparity()) != 0) {
    _this->_impl_.min_disparity_ = from._impl_.min_disparity_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_disparity()) != 0) {
    _this->_impl_.max_disparity_ = from._impl_.max_disparity_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_delta_d()) != 0) {
    _this->_impl_.delta_d_ = from._impl_.delta_d_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DisparityImage::CopyFrom(const DisparityImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.DisparityImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DisparityImage::InternalSwap(DisparityImage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.delta_d_)
      + sizeof(DisparityImage::_impl_.delta_d_)
      - PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata DisparityImage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_image_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
