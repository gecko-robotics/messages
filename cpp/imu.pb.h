// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: imu.proto
// Protobuf C++ Version: 5.29.3

#ifndef imu_2eproto_2epb_2eh
#define imu_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "vector3.pb.h"
#include "quaternion.pb.h"
#include "header.pb.h"
#include "covariance.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_imu_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_imu_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_imu_2eproto;
namespace kevin {
class HighResolutionImu;
struct HighResolutionImuDefaultTypeInternal;
extern HighResolutionImuDefaultTypeInternal _HighResolutionImu_default_instance_;
class Imu;
struct ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class ImuInfo;
struct ImuInfoDefaultTypeInternal;
extern ImuInfoDefaultTypeInternal _ImuInfo_default_instance_;
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kevin {

// ===================================================================


// -------------------------------------------------------------------

class ImuInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.ImuInfo) */ {
 public:
  inline ImuInfo() : ImuInfo(nullptr) {}
  ~ImuInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ImuInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ImuInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ImuInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ImuInfo(const ImuInfo& from) : ImuInfo(nullptr, from) {}
  inline ImuInfo(ImuInfo&& from) noexcept
      : ImuInfo(nullptr, std::move(from)) {}
  inline ImuInfo& operator=(const ImuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuInfo& operator=(ImuInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuInfo* internal_default_instance() {
    return reinterpret_cast<const ImuInfo*>(
        &_ImuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ImuInfo& a, ImuInfo& b) { a.Swap(&b); }
  inline void Swap(ImuInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ImuInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImuInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ImuInfo& from) { ImuInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ImuInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.ImuInfo"; }

 protected:
  explicit ImuInfo(::google::protobuf::Arena* arena);
  ImuInfo(::google::protobuf::Arena* arena, const ImuInfo& from);
  ImuInfo(::google::protobuf::Arena* arena, ImuInfo&& from) noexcept
      : ImuInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAccelCovFieldNumber = 1,
    kGyroCovFieldNumber = 2,
    kMagCovFieldNumber = 3,
  };
  // .kevin.Covariance6 accel_cov = 1;
  bool has_accel_cov() const;
  void clear_accel_cov() ;
  const ::kevin::Covariance6& accel_cov() const;
  PROTOBUF_NODISCARD ::kevin::Covariance6* release_accel_cov();
  ::kevin::Covariance6* mutable_accel_cov();
  void set_allocated_accel_cov(::kevin::Covariance6* value);
  void unsafe_arena_set_allocated_accel_cov(::kevin::Covariance6* value);
  ::kevin::Covariance6* unsafe_arena_release_accel_cov();

  private:
  const ::kevin::Covariance6& _internal_accel_cov() const;
  ::kevin::Covariance6* _internal_mutable_accel_cov();

  public:
  // .kevin.Covariance6 gyro_cov = 2;
  bool has_gyro_cov() const;
  void clear_gyro_cov() ;
  const ::kevin::Covariance6& gyro_cov() const;
  PROTOBUF_NODISCARD ::kevin::Covariance6* release_gyro_cov();
  ::kevin::Covariance6* mutable_gyro_cov();
  void set_allocated_gyro_cov(::kevin::Covariance6* value);
  void unsafe_arena_set_allocated_gyro_cov(::kevin::Covariance6* value);
  ::kevin::Covariance6* unsafe_arena_release_gyro_cov();

  private:
  const ::kevin::Covariance6& _internal_gyro_cov() const;
  ::kevin::Covariance6* _internal_mutable_gyro_cov();

  public:
  // .kevin.Covariance6 mag_cov = 3;
  bool has_mag_cov() const;
  void clear_mag_cov() ;
  const ::kevin::Covariance6& mag_cov() const;
  PROTOBUF_NODISCARD ::kevin::Covariance6* release_mag_cov();
  ::kevin::Covariance6* mutable_mag_cov();
  void set_allocated_mag_cov(::kevin::Covariance6* value);
  void unsafe_arena_set_allocated_mag_cov(::kevin::Covariance6* value);
  ::kevin::Covariance6* unsafe_arena_release_mag_cov();

  private:
  const ::kevin::Covariance6& _internal_mag_cov() const;
  ::kevin::Covariance6* _internal_mutable_mag_cov();

  public:
  // @@protoc_insertion_point(class_scope:kevin.ImuInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ImuInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Covariance6* accel_cov_;
    ::kevin::Covariance6* gyro_cov_;
    ::kevin::Covariance6* mag_cov_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_imu_2eproto;
};
// -------------------------------------------------------------------

class Imu final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Imu) */ {
 public:
  inline Imu() : Imu(nullptr) {}
  ~Imu() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Imu* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Imu));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Imu(
      ::google::protobuf::internal::ConstantInitialized);

  inline Imu(const Imu& from) : Imu(nullptr, from) {}
  inline Imu(Imu&& from) noexcept
      : Imu(nullptr, std::move(from)) {}
  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Imu& operator=(Imu&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Imu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
        &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Imu& a, Imu& b) { a.Swap(&b); }
  inline void Swap(Imu* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Imu* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Imu* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Imu>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Imu& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Imu& from) { Imu::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Imu* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Imu"; }

 protected:
  explicit Imu(::google::protobuf::Arena* arena);
  Imu(::google::protobuf::Arena* arena, const Imu& from);
  Imu(::google::protobuf::Arena* arena, Imu&& from) noexcept
      : Imu(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kLinearAccelerationFieldNumber = 2,
    kAngularVelocityFieldNumber = 3,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Vector3 linear_acceleration = 2;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration() ;
  const ::kevin::Vector3& linear_acceleration() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_linear_acceleration();
  ::kevin::Vector3* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_linear_acceleration(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_linear_acceleration();

  private:
  const ::kevin::Vector3& _internal_linear_acceleration() const;
  ::kevin::Vector3* _internal_mutable_linear_acceleration();

  public:
  // .kevin.Vector3 angular_velocity = 3;
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  const ::kevin::Vector3& angular_velocity() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_angular_velocity();
  ::kevin::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_angular_velocity(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_angular_velocity();

  private:
  const ::kevin::Vector3& _internal_angular_velocity() const;
  ::kevin::Vector3* _internal_mutable_angular_velocity();

  public:
  // @@protoc_insertion_point(class_scope:kevin.Imu)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Imu& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    ::kevin::Vector3* linear_acceleration_;
    ::kevin::Vector3* angular_velocity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_imu_2eproto;
};
// -------------------------------------------------------------------

class HighResolutionImu final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.HighResolutionImu) */ {
 public:
  inline HighResolutionImu() : HighResolutionImu(nullptr) {}
  ~HighResolutionImu() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HighResolutionImu* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HighResolutionImu));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HighResolutionImu(
      ::google::protobuf::internal::ConstantInitialized);

  inline HighResolutionImu(const HighResolutionImu& from) : HighResolutionImu(nullptr, from) {}
  inline HighResolutionImu(HighResolutionImu&& from) noexcept
      : HighResolutionImu(nullptr, std::move(from)) {}
  inline HighResolutionImu& operator=(const HighResolutionImu& from) {
    CopyFrom(from);
    return *this;
  }
  inline HighResolutionImu& operator=(HighResolutionImu&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HighResolutionImu& default_instance() {
    return *internal_default_instance();
  }
  static inline const HighResolutionImu* internal_default_instance() {
    return reinterpret_cast<const HighResolutionImu*>(
        &_HighResolutionImu_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(HighResolutionImu& a, HighResolutionImu& b) { a.Swap(&b); }
  inline void Swap(HighResolutionImu* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HighResolutionImu* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HighResolutionImu* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HighResolutionImu>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HighResolutionImu& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HighResolutionImu& from) { HighResolutionImu::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HighResolutionImu* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.HighResolutionImu"; }

 protected:
  explicit HighResolutionImu(::google::protobuf::Arena* arena);
  HighResolutionImu(::google::protobuf::Arena* arena, const HighResolutionImu& from);
  HighResolutionImu(::google::protobuf::Arena* arena, HighResolutionImu&& from) noexcept
      : HighResolutionImu(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kLinearAccelerationFieldNumber = 2,
    kAngularVelocityFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kMagneticFieldFieldNumber = 5,
    kPressureFieldNumber = 6,
    kTemperatureFieldNumber = 7,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Vector3 linear_acceleration = 2;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration() ;
  const ::kevin::Vector3& linear_acceleration() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_linear_acceleration();
  ::kevin::Vector3* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_linear_acceleration(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_linear_acceleration();

  private:
  const ::kevin::Vector3& _internal_linear_acceleration() const;
  ::kevin::Vector3* _internal_mutable_linear_acceleration();

  public:
  // .kevin.Vector3 angular_velocity = 3;
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  const ::kevin::Vector3& angular_velocity() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_angular_velocity();
  ::kevin::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_angular_velocity(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_angular_velocity();

  private:
  const ::kevin::Vector3& _internal_angular_velocity() const;
  ::kevin::Vector3* _internal_mutable_angular_velocity();

  public:
  // .kevin.Quaternion orientation = 4;
  bool has_orientation() const;
  void clear_orientation() ;
  const ::kevin::Quaternion& orientation() const;
  PROTOBUF_NODISCARD ::kevin::Quaternion* release_orientation();
  ::kevin::Quaternion* mutable_orientation();
  void set_allocated_orientation(::kevin::Quaternion* value);
  void unsafe_arena_set_allocated_orientation(::kevin::Quaternion* value);
  ::kevin::Quaternion* unsafe_arena_release_orientation();

  private:
  const ::kevin::Quaternion& _internal_orientation() const;
  ::kevin::Quaternion* _internal_mutable_orientation();

  public:
  // .kevin.Vector3 magnetic_field = 5;
  bool has_magnetic_field() const;
  void clear_magnetic_field() ;
  const ::kevin::Vector3& magnetic_field() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_magnetic_field();
  ::kevin::Vector3* mutable_magnetic_field();
  void set_allocated_magnetic_field(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_magnetic_field(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_magnetic_field();

  private:
  const ::kevin::Vector3& _internal_magnetic_field() const;
  ::kevin::Vector3* _internal_mutable_magnetic_field();

  public:
  // double pressure = 6;
  void clear_pressure() ;
  double pressure() const;
  void set_pressure(double value);

  private:
  double _internal_pressure() const;
  void _internal_set_pressure(double value);

  public:
  // double temperature = 7;
  void clear_temperature() ;
  double temperature() const;
  void set_temperature(double value);

  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.HighResolutionImu)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HighResolutionImu& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    ::kevin::Vector3* linear_acceleration_;
    ::kevin::Vector3* angular_velocity_;
    ::kevin::Quaternion* orientation_;
    ::kevin::Vector3* magnetic_field_;
    double pressure_;
    double temperature_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_imu_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Imu

// .kevin.Header header = 1;
inline bool Imu::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& Imu::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& Imu::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Imu.header)
  return _internal_header();
}
inline void Imu::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Imu.header)
}
inline ::kevin::Header* Imu::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* Imu::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Imu.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* Imu::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* Imu::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.Imu.header)
  return _msg;
}
inline void Imu::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Imu.header)
}

// .kevin.Vector3 linear_acceleration = 2;
inline bool Imu::has_linear_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_acceleration_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& Imu::_internal_linear_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& Imu::linear_acceleration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Imu.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void Imu::unsafe_arena_set_allocated_linear_acceleration(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }
  _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Imu.linear_acceleration)
}
inline ::kevin::Vector3* Imu::release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* released = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* Imu::unsafe_arena_release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Imu.linear_acceleration)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* temp = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* Imu::_internal_mutable_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.linear_acceleration_;
}
inline ::kevin::Vector3* Imu::mutable_linear_acceleration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Vector3* _msg = _internal_mutable_linear_acceleration();
  // @@protoc_insertion_point(field_mutable:kevin.Imu.linear_acceleration)
  return _msg;
}
inline void Imu::set_allocated_linear_acceleration(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Imu.linear_acceleration)
}

// .kevin.Vector3 angular_velocity = 3;
inline bool Imu::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& Imu::_internal_angular_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& Imu::angular_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Imu.angular_velocity)
  return _internal_angular_velocity();
}
inline void Imu::unsafe_arena_set_allocated_angular_velocity(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Imu.angular_velocity)
}
inline ::kevin::Vector3* Imu::release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* released = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* Imu::unsafe_arena_release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Imu.angular_velocity)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* Imu::_internal_mutable_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.angular_velocity_;
}
inline ::kevin::Vector3* Imu::mutable_angular_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Vector3* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:kevin.Imu.angular_velocity)
  return _msg;
}
inline void Imu::set_allocated_angular_velocity(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Imu.angular_velocity)
}

// -------------------------------------------------------------------

// HighResolutionImu

// .kevin.Header header = 1;
inline bool HighResolutionImu::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& HighResolutionImu::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& HighResolutionImu::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.header)
  return _internal_header();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.header)
}
inline ::kevin::Header* HighResolutionImu::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* HighResolutionImu::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* HighResolutionImu::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* HighResolutionImu::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.header)
  return _msg;
}
inline void HighResolutionImu::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.header)
}

// .kevin.Vector3 linear_acceleration = 2;
inline bool HighResolutionImu::has_linear_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_acceleration_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& HighResolutionImu::_internal_linear_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& HighResolutionImu::linear_acceleration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_linear_acceleration(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }
  _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.linear_acceleration)
}
inline ::kevin::Vector3* HighResolutionImu::release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* released = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* HighResolutionImu::unsafe_arena_release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.linear_acceleration)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* temp = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* HighResolutionImu::_internal_mutable_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.linear_acceleration_;
}
inline ::kevin::Vector3* HighResolutionImu::mutable_linear_acceleration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Vector3* _msg = _internal_mutable_linear_acceleration();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.linear_acceleration)
  return _msg;
}
inline void HighResolutionImu::set_allocated_linear_acceleration(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.linear_acceleration)
}

// .kevin.Vector3 angular_velocity = 3;
inline bool HighResolutionImu::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& HighResolutionImu::_internal_angular_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& HighResolutionImu::angular_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.angular_velocity)
  return _internal_angular_velocity();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_angular_velocity(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.angular_velocity)
}
inline ::kevin::Vector3* HighResolutionImu::release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* released = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* HighResolutionImu::unsafe_arena_release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.angular_velocity)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* HighResolutionImu::_internal_mutable_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.angular_velocity_;
}
inline ::kevin::Vector3* HighResolutionImu::mutable_angular_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Vector3* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.angular_velocity)
  return _msg;
}
inline void HighResolutionImu::set_allocated_angular_velocity(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.angular_velocity)
}

// .kevin.Quaternion orientation = 4;
inline bool HighResolutionImu::has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline const ::kevin::Quaternion& HighResolutionImu::_internal_orientation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Quaternion* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Quaternion&>(::kevin::_Quaternion_default_instance_);
}
inline const ::kevin::Quaternion& HighResolutionImu::orientation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.orientation)
  return _internal_orientation();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_orientation(::kevin::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = reinterpret_cast<::kevin::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.orientation)
}
inline ::kevin::Quaternion* HighResolutionImu::release_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::kevin::Quaternion* released = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Quaternion* HighResolutionImu::unsafe_arena_release_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.orientation)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::kevin::Quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::kevin::Quaternion* HighResolutionImu::_internal_mutable_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orientation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Quaternion>(GetArena());
    _impl_.orientation_ = reinterpret_cast<::kevin::Quaternion*>(p);
  }
  return _impl_.orientation_;
}
inline ::kevin::Quaternion* HighResolutionImu::mutable_orientation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::kevin::Quaternion* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.orientation)
  return _msg;
}
inline void HighResolutionImu::set_allocated_orientation(::kevin::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.orientation_ = reinterpret_cast<::kevin::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.orientation)
}

// .kevin.Vector3 magnetic_field = 5;
inline bool HighResolutionImu::has_magnetic_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.magnetic_field_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& HighResolutionImu::_internal_magnetic_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.magnetic_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& HighResolutionImu::magnetic_field() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.magnetic_field)
  return _internal_magnetic_field();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_magnetic_field(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.magnetic_field_);
  }
  _impl_.magnetic_field_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.magnetic_field)
}
inline ::kevin::Vector3* HighResolutionImu::release_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::kevin::Vector3* released = _impl_.magnetic_field_;
  _impl_.magnetic_field_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* HighResolutionImu::unsafe_arena_release_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.magnetic_field)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::kevin::Vector3* temp = _impl_.magnetic_field_;
  _impl_.magnetic_field_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* HighResolutionImu::_internal_mutable_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.magnetic_field_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.magnetic_field_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.magnetic_field_;
}
inline ::kevin::Vector3* HighResolutionImu::mutable_magnetic_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::kevin::Vector3* _msg = _internal_mutable_magnetic_field();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.magnetic_field)
  return _msg;
}
inline void HighResolutionImu::set_allocated_magnetic_field(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.magnetic_field_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.magnetic_field_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.magnetic_field)
}

// double pressure = 6;
inline void HighResolutionImu::clear_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = 0;
}
inline double HighResolutionImu::pressure() const {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.pressure)
  return _internal_pressure();
}
inline void HighResolutionImu::set_pressure(double value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:kevin.HighResolutionImu.pressure)
}
inline double HighResolutionImu::_internal_pressure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pressure_;
}
inline void HighResolutionImu::_internal_set_pressure(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = value;
}

// double temperature = 7;
inline void HighResolutionImu::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline double HighResolutionImu::temperature() const {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.temperature)
  return _internal_temperature();
}
inline void HighResolutionImu::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:kevin.HighResolutionImu.temperature)
}
inline double HighResolutionImu::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void HighResolutionImu::_internal_set_temperature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// -------------------------------------------------------------------

// ImuInfo

// .kevin.Covariance6 accel_cov = 1;
inline bool ImuInfo::has_accel_cov() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accel_cov_ != nullptr);
  return value;
}
inline const ::kevin::Covariance6& ImuInfo::_internal_accel_cov() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Covariance6* p = _impl_.accel_cov_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Covariance6&>(::kevin::_Covariance6_default_instance_);
}
inline const ::kevin::Covariance6& ImuInfo::accel_cov() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImuInfo.accel_cov)
  return _internal_accel_cov();
}
inline void ImuInfo::unsafe_arena_set_allocated_accel_cov(::kevin::Covariance6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accel_cov_);
  }
  _impl_.accel_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.ImuInfo.accel_cov)
}
inline ::kevin::Covariance6* ImuInfo::release_accel_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Covariance6* released = _impl_.accel_cov_;
  _impl_.accel_cov_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Covariance6* ImuInfo::unsafe_arena_release_accel_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImuInfo.accel_cov)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Covariance6* temp = _impl_.accel_cov_;
  _impl_.accel_cov_ = nullptr;
  return temp;
}
inline ::kevin::Covariance6* ImuInfo::_internal_mutable_accel_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.accel_cov_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Covariance6>(GetArena());
    _impl_.accel_cov_ = reinterpret_cast<::kevin::Covariance6*>(p);
  }
  return _impl_.accel_cov_;
}
inline ::kevin::Covariance6* ImuInfo::mutable_accel_cov() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Covariance6* _msg = _internal_mutable_accel_cov();
  // @@protoc_insertion_point(field_mutable:kevin.ImuInfo.accel_cov)
  return _msg;
}
inline void ImuInfo::set_allocated_accel_cov(::kevin::Covariance6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accel_cov_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.accel_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.ImuInfo.accel_cov)
}

// .kevin.Covariance6 gyro_cov = 2;
inline bool ImuInfo::has_gyro_cov() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gyro_cov_ != nullptr);
  return value;
}
inline const ::kevin::Covariance6& ImuInfo::_internal_gyro_cov() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Covariance6* p = _impl_.gyro_cov_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Covariance6&>(::kevin::_Covariance6_default_instance_);
}
inline const ::kevin::Covariance6& ImuInfo::gyro_cov() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImuInfo.gyro_cov)
  return _internal_gyro_cov();
}
inline void ImuInfo::unsafe_arena_set_allocated_gyro_cov(::kevin::Covariance6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gyro_cov_);
  }
  _impl_.gyro_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.ImuInfo.gyro_cov)
}
inline ::kevin::Covariance6* ImuInfo::release_gyro_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Covariance6* released = _impl_.gyro_cov_;
  _impl_.gyro_cov_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Covariance6* ImuInfo::unsafe_arena_release_gyro_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImuInfo.gyro_cov)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Covariance6* temp = _impl_.gyro_cov_;
  _impl_.gyro_cov_ = nullptr;
  return temp;
}
inline ::kevin::Covariance6* ImuInfo::_internal_mutable_gyro_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gyro_cov_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Covariance6>(GetArena());
    _impl_.gyro_cov_ = reinterpret_cast<::kevin::Covariance6*>(p);
  }
  return _impl_.gyro_cov_;
}
inline ::kevin::Covariance6* ImuInfo::mutable_gyro_cov() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Covariance6* _msg = _internal_mutable_gyro_cov();
  // @@protoc_insertion_point(field_mutable:kevin.ImuInfo.gyro_cov)
  return _msg;
}
inline void ImuInfo::set_allocated_gyro_cov(::kevin::Covariance6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gyro_cov_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.gyro_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.ImuInfo.gyro_cov)
}

// .kevin.Covariance6 mag_cov = 3;
inline bool ImuInfo::has_mag_cov() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mag_cov_ != nullptr);
  return value;
}
inline const ::kevin::Covariance6& ImuInfo::_internal_mag_cov() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Covariance6* p = _impl_.mag_cov_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Covariance6&>(::kevin::_Covariance6_default_instance_);
}
inline const ::kevin::Covariance6& ImuInfo::mag_cov() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImuInfo.mag_cov)
  return _internal_mag_cov();
}
inline void ImuInfo::unsafe_arena_set_allocated_mag_cov(::kevin::Covariance6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mag_cov_);
  }
  _impl_.mag_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.ImuInfo.mag_cov)
}
inline ::kevin::Covariance6* ImuInfo::release_mag_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* released = _impl_.mag_cov_;
  _impl_.mag_cov_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Covariance6* ImuInfo::unsafe_arena_release_mag_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImuInfo.mag_cov)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* temp = _impl_.mag_cov_;
  _impl_.mag_cov_ = nullptr;
  return temp;
}
inline ::kevin::Covariance6* ImuInfo::_internal_mutable_mag_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mag_cov_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Covariance6>(GetArena());
    _impl_.mag_cov_ = reinterpret_cast<::kevin::Covariance6*>(p);
  }
  return _impl_.mag_cov_;
}
inline ::kevin::Covariance6* ImuInfo::mutable_mag_cov() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Covariance6* _msg = _internal_mutable_mag_cov();
  // @@protoc_insertion_point(field_mutable:kevin.ImuInfo.mag_cov)
  return _msg;
}
inline void ImuInfo::set_allocated_mag_cov(::kevin::Covariance6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mag_cov_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.mag_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.ImuInfo.mag_cov)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // imu_2eproto_2epb_2eh
