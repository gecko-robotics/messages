// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: magneticfield.proto
// Protobuf C++ Version: 5.29.3

#include "magneticfield.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kevin {

inline constexpr MagneticField::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        magnetic_field_{nullptr},
        covariance_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MagneticField::MagneticField(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MagneticFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MagneticFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MagneticFieldDefaultTypeInternal() {}
  union {
    MagneticField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MagneticFieldDefaultTypeInternal _MagneticField_default_instance_;
}  // namespace kevin
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_magneticfield_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_magneticfield_2eproto = nullptr;
const ::uint32_t
    TableStruct_magneticfield_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _impl_.magnetic_field_),
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _impl_.covariance_),
        0,
        1,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::kevin::MagneticField)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kevin::_MagneticField_default_instance_._instance,
};
const char descriptor_table_protodef_magneticfield_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023magneticfield.proto\022\005kevin\032\rvector3.pr"
    "oto\032\014header.proto\032\020covariance.proto\"~\n\rM"
    "agneticField\022\035\n\006header\030\001 \001(\0132\r.kevin.Hea"
    "der\022&\n\016magnetic_field\030\002 \001(\0132\016.kevin.Vect"
    "or3\022&\n\ncovariance\030\003 \001(\0132\022.kevin.Covarian"
    "ce6b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_magneticfield_2eproto_deps[3] =
    {
        &::descriptor_table_covariance_2eproto,
        &::descriptor_table_header_2eproto,
        &::descriptor_table_vector3_2eproto,
};
static ::absl::once_flag descriptor_table_magneticfield_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_magneticfield_2eproto = {
    false,
    false,
    211,
    descriptor_table_protodef_magneticfield_2eproto,
    "magneticfield.proto",
    &descriptor_table_magneticfield_2eproto_once,
    descriptor_table_magneticfield_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_magneticfield_2eproto::offsets,
    file_level_enum_descriptors_magneticfield_2eproto,
    file_level_service_descriptors_magneticfield_2eproto,
};
namespace kevin {
// ===================================================================

class MagneticField::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MagneticField>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MagneticField, _impl_._has_bits_);
};

void MagneticField::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MagneticField::clear_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.magnetic_field_ != nullptr) _impl_.magnetic_field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MagneticField::clear_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.covariance_ != nullptr) _impl_.covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
MagneticField::MagneticField(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.MagneticField)
}
inline PROTOBUF_NDEBUG_INLINE MagneticField::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::MagneticField& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MagneticField::MagneticField(
    ::google::protobuf::Arena* arena,
    const MagneticField& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MagneticField* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.magnetic_field_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.magnetic_field_)
                        : nullptr;
  _impl_.covariance_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(
                              arena, *from._impl_.covariance_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.MagneticField)
}
inline PROTOBUF_NDEBUG_INLINE MagneticField::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MagneticField::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, covariance_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::covariance_));
}
MagneticField::~MagneticField() {
  // @@protoc_insertion_point(destructor:kevin.MagneticField)
  SharedDtor(*this);
}
inline void MagneticField::SharedDtor(MessageLite& self) {
  MagneticField& this_ = static_cast<MagneticField&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.magnetic_field_;
  delete this_._impl_.covariance_;
  this_._impl_.~Impl_();
}

inline void* MagneticField::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MagneticField(arena);
}
constexpr auto MagneticField::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MagneticField),
                                            alignof(MagneticField));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MagneticField::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MagneticField_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MagneticField::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MagneticField>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MagneticField::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MagneticField>(), &MagneticField::ByteSizeLong,
            &MagneticField::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MagneticField, _impl_._cached_size_),
        false,
    },
    &MagneticField::kDescriptorMethods,
    &descriptor_table_magneticfield_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MagneticField::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> MagneticField::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MagneticField, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::MagneticField>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.header_)}},
    // .kevin.Vector3 magnetic_field = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.magnetic_field_)}},
    // .kevin.Covariance6 covariance = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.covariance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 magnetic_field = 2;
    {PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.magnetic_field_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Covariance6 covariance = 3;
    {PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.covariance_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Covariance6>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MagneticField::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.MagneticField)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.magnetic_field_ != nullptr);
      _impl_.magnetic_field_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.covariance_ != nullptr);
      _impl_.covariance_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MagneticField::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MagneticField& this_ = static_cast<const MagneticField&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MagneticField::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MagneticField& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.MagneticField)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 magnetic_field = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.magnetic_field_, this_._impl_.magnetic_field_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Covariance6 covariance = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.covariance_, this_._impl_.covariance_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.MagneticField)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MagneticField::ByteSizeLong(const MessageLite& base) {
          const MagneticField& this_ = static_cast<const MagneticField&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MagneticField::ByteSizeLong() const {
          const MagneticField& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.MagneticField)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.Vector3 magnetic_field = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.magnetic_field_);
            }
            // .kevin.Covariance6 covariance = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.covariance_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MagneticField::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MagneticField*>(&to_msg);
  auto& from = static_cast<const MagneticField&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.MagneticField)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.magnetic_field_ != nullptr);
      if (_this->_impl_.magnetic_field_ == nullptr) {
        _this->_impl_.magnetic_field_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.magnetic_field_);
      } else {
        _this->_impl_.magnetic_field_->MergeFrom(*from._impl_.magnetic_field_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.covariance_ != nullptr);
      if (_this->_impl_.covariance_ == nullptr) {
        _this->_impl_.covariance_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(arena, *from._impl_.covariance_);
      } else {
        _this->_impl_.covariance_->MergeFrom(*from._impl_.covariance_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MagneticField::CopyFrom(const MagneticField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.MagneticField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MagneticField::InternalSwap(MagneticField* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.covariance_)
      + sizeof(MagneticField::_impl_.covariance_)
      - PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata MagneticField::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_magneticfield_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
