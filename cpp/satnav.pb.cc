// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: satnav.proto
// Protobuf C++ Version: 5.29.3

#include "satnav.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kevin {

inline constexpr NavSatStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : status_{static_cast< ::kevin::StatusFix >(0)},
        service_{static_cast< ::kevin::ServiceType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NavSatStatus::NavSatStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NavSatStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavSatStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavSatStatusDefaultTypeInternal() {}
  union {
    NavSatStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavSatStatusDefaultTypeInternal _NavSatStatus_default_instance_;

inline constexpr SatNav::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        status_{nullptr},
        position_covariance_{nullptr},
        latitude_{0},
        longitude_{0},
        altitude_{0},
        type_{static_cast< ::kevin::PositionCovariance >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR SatNav::SatNav(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SatNavDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SatNavDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SatNavDefaultTypeInternal() {}
  union {
    SatNav _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SatNavDefaultTypeInternal _SatNav_default_instance_;
}  // namespace kevin
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_satnav_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_satnav_2eproto = nullptr;
const ::uint32_t
    TableStruct_satnav_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kevin::NavSatStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::NavSatStatus, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::kevin::NavSatStatus, _impl_.service_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.latitude_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.longitude_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.altitude_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.position_covariance_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.type_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        2,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::kevin::NavSatStatus)},
        {10, 25, -1, sizeof(::kevin::SatNav)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kevin::_NavSatStatus_default_instance_._instance,
    &::kevin::_SatNav_default_instance_._instance,
};
const char descriptor_table_protodef_satnav_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014satnav.proto\022\005kevin\032\014header.proto\032\020cov"
    "ariance.proto\"U\n\014NavSatStatus\022 \n\006status\030"
    "\001 \001(\0162\020.kevin.StatusFix\022#\n\007service\030\002 \001(\016"
    "2\022.kevin.ServiceType\"\335\001\n\006SatNav\022\035\n\006heade"
    "r\030\001 \001(\0132\r.kevin.Header\022#\n\006status\030\002 \001(\0132\023"
    ".kevin.NavSatStatus\022\020\n\010latitude\030\003 \001(\001\022\021\n"
    "\tlongitude\030\004 \001(\001\022\020\n\010altitude\030\005 \001(\001\022/\n\023po"
    "sition_covariance\030\006 \001(\0132\022.kevin.Covarian"
    "ce6\022\'\n\004type\030\007 \001(\0162\031.kevin.PositionCovari"
    "ance*\222\001\n\022PositionCovariance\022\033\n\027COVARIANC"
    "E_TYPE_UNKNOWN\020\000\022 \n\034COVARIANCE_TYPE_APPR"
    "OXIMATED\020\001\022\"\n\036COVARIANCE_TYPE_DIAGONAL_K"
    "NOWN\020\002\022\031\n\025COVARIANCE_TYPE_KNOWN\020\003*E\n\tSta"
    "tusFix\022\016\n\nSTATUS_FIX\020\000\022\023\n\017STATUS_SBAS_FI"
    "X\020\001\022\023\n\017STATUS_GBAS_FIX\020\002*r\n\013ServiceType\022"
    "\023\n\017SERVICE_UNKNOWN\020\000\022\017\n\013SERVICE_GPS\020\001\022\023\n"
    "\017SERVICE_GLONASS\020\002\022\023\n\017SERVICE_COMPASS\020\004\022"
    "\023\n\017SERVICE_GALILEO\020\010b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_satnav_2eproto_deps[2] =
    {
        &::descriptor_table_covariance_2eproto,
        &::descriptor_table_header_2eproto,
};
static ::absl::once_flag descriptor_table_satnav_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_satnav_2eproto = {
    false,
    false,
    708,
    descriptor_table_protodef_satnav_2eproto,
    "satnav.proto",
    &descriptor_table_satnav_2eproto_once,
    descriptor_table_satnav_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_satnav_2eproto::offsets,
    file_level_enum_descriptors_satnav_2eproto,
    file_level_service_descriptors_satnav_2eproto,
};
namespace kevin {
const ::google::protobuf::EnumDescriptor* PositionCovariance_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_satnav_2eproto);
  return file_level_enum_descriptors_satnav_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t PositionCovariance_internal_data_[] = {
    262144u, 0u, };
bool PositionCovariance_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* StatusFix_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_satnav_2eproto);
  return file_level_enum_descriptors_satnav_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t StatusFix_internal_data_[] = {
    196608u, 0u, };
bool StatusFix_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* ServiceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_satnav_2eproto);
  return file_level_enum_descriptors_satnav_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t ServiceType_internal_data_[] = {
    196608u, 32u, 34u, };
bool ServiceType_IsValid(int value) {
  return 0 <= value && value <= 8 && ((279u >> value) & 1) != 0;
}
// ===================================================================

class NavSatStatus::_Internal {
 public:
};

NavSatStatus::NavSatStatus(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.NavSatStatus)
}
NavSatStatus::NavSatStatus(
    ::google::protobuf::Arena* arena, const NavSatStatus& from)
    : NavSatStatus(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE NavSatStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NavSatStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           0,
           offsetof(Impl_, service_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::service_));
}
NavSatStatus::~NavSatStatus() {
  // @@protoc_insertion_point(destructor:kevin.NavSatStatus)
  SharedDtor(*this);
}
inline void NavSatStatus::SharedDtor(MessageLite& self) {
  NavSatStatus& this_ = static_cast<NavSatStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* NavSatStatus::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) NavSatStatus(arena);
}
constexpr auto NavSatStatus::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(NavSatStatus),
                                            alignof(NavSatStatus));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull NavSatStatus::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_NavSatStatus_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &NavSatStatus::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<NavSatStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &NavSatStatus::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<NavSatStatus>(), &NavSatStatus::ByteSizeLong,
            &NavSatStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(NavSatStatus, _impl_._cached_size_),
        false,
    },
    &NavSatStatus::kDescriptorMethods,
    &descriptor_table_satnav_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* NavSatStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> NavSatStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::NavSatStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kevin.ServiceType service = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NavSatStatus, _impl_.service_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NavSatStatus, _impl_.service_)}},
    // .kevin.StatusFix status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NavSatStatus, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NavSatStatus, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.StatusFix status = 1;
    {PROTOBUF_FIELD_OFFSET(NavSatStatus, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .kevin.ServiceType service = 2;
    {PROTOBUF_FIELD_OFFSET(NavSatStatus, _impl_.service_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void NavSatStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.NavSatStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.service_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.service_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NavSatStatus::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NavSatStatus& this_ = static_cast<const NavSatStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NavSatStatus::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NavSatStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.NavSatStatus)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .kevin.StatusFix status = 1;
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_status(), target);
          }

          // .kevin.ServiceType service = 2;
          if (this_._internal_service() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_service(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.NavSatStatus)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NavSatStatus::ByteSizeLong(const MessageLite& base) {
          const NavSatStatus& this_ = static_cast<const NavSatStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NavSatStatus::ByteSizeLong() const {
          const NavSatStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.NavSatStatus)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .kevin.StatusFix status = 1;
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
            // .kevin.ServiceType service = 2;
            if (this_._internal_service() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_service());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NavSatStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NavSatStatus*>(&to_msg);
  auto& from = static_cast<const NavSatStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.NavSatStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  if (from._internal_service() != 0) {
    _this->_impl_.service_ = from._impl_.service_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NavSatStatus::CopyFrom(const NavSatStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.NavSatStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NavSatStatus::InternalSwap(NavSatStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavSatStatus, _impl_.service_)
      + sizeof(NavSatStatus::_impl_.service_)
      - PROTOBUF_FIELD_OFFSET(NavSatStatus, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::google::protobuf::Metadata NavSatStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SatNav::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SatNav>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SatNav, _impl_._has_bits_);
};

void SatNav::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SatNav::clear_position_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_covariance_ != nullptr) _impl_.position_covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SatNav::SatNav(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.SatNav)
}
inline PROTOBUF_NDEBUG_INLINE SatNav::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::SatNav& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SatNav::SatNav(
    ::google::protobuf::Arena* arena,
    const SatNav& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SatNav* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.status_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::NavSatStatus>(
                              arena, *from._impl_.status_)
                        : nullptr;
  _impl_.position_covariance_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(
                              arena, *from._impl_.position_covariance_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latitude_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:kevin.SatNav)
}
inline PROTOBUF_NDEBUG_INLINE SatNav::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SatNav::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::type_));
}
SatNav::~SatNav() {
  // @@protoc_insertion_point(destructor:kevin.SatNav)
  SharedDtor(*this);
}
inline void SatNav::SharedDtor(MessageLite& self) {
  SatNav& this_ = static_cast<SatNav&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.status_;
  delete this_._impl_.position_covariance_;
  this_._impl_.~Impl_();
}

inline void* SatNav::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SatNav(arena);
}
constexpr auto SatNav::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SatNav),
                                            alignof(SatNav));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SatNav::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SatNav_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SatNav::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SatNav>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SatNav::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SatNav>(), &SatNav::ByteSizeLong,
            &SatNav::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SatNav, _impl_._cached_size_),
        false,
    },
    &SatNav::kDescriptorMethods,
    &descriptor_table_satnav_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SatNav::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 3, 0, 2> SatNav::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SatNav, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::SatNav>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.header_)}},
    // .kevin.NavSatStatus status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.status_)}},
    // double latitude = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.latitude_)}},
    // double longitude = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.longitude_)}},
    // double altitude = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.altitude_)}},
    // .kevin.Covariance6 position_covariance = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.position_covariance_)}},
    // .kevin.PositionCovariance type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SatNav, _impl_.type_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.NavSatStatus status = 2;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double latitude = 3;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.latitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude = 4;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.longitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double altitude = 5;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.altitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .kevin.Covariance6 position_covariance = 6;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.position_covariance_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.PositionCovariance type = 7;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::NavSatStatus>()},
    {::_pbi::TcParser::GetTable<::kevin::Covariance6>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SatNav::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.SatNav)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.position_covariance_ != nullptr);
      _impl_.position_covariance_->Clear();
    }
  }
  ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SatNav::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SatNav& this_ = static_cast<const SatNav&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SatNav::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SatNav& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.SatNav)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.NavSatStatus status = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.status_, this_._impl_.status_->GetCachedSize(), target,
                stream);
          }

          // double latitude = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_latitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_latitude(), target);
          }

          // double longitude = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_longitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_longitude(), target);
          }

          // double altitude = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_altitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_altitude(), target);
          }

          // .kevin.Covariance6 position_covariance = 6;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.position_covariance_, this_._impl_.position_covariance_->GetCachedSize(), target,
                stream);
          }

          // .kevin.PositionCovariance type = 7;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.SatNav)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SatNav::ByteSizeLong(const MessageLite& base) {
          const SatNav& this_ = static_cast<const SatNav&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SatNav::ByteSizeLong() const {
          const SatNav& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.SatNav)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.NavSatStatus status = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_);
            }
            // .kevin.Covariance6 position_covariance = 6;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_covariance_);
            }
          }
           {
            // double latitude = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_latitude()) != 0) {
              total_size += 9;
            }
            // double longitude = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_longitude()) != 0) {
              total_size += 9;
            }
            // double altitude = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_altitude()) != 0) {
              total_size += 9;
            }
            // .kevin.PositionCovariance type = 7;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SatNav::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SatNav*>(&to_msg);
  auto& from = static_cast<const SatNav&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.SatNav)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.status_ != nullptr);
      if (_this->_impl_.status_ == nullptr) {
        _this->_impl_.status_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::NavSatStatus>(arena, *from._impl_.status_);
      } else {
        _this->_impl_.status_->MergeFrom(*from._impl_.status_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.position_covariance_ != nullptr);
      if (_this->_impl_.position_covariance_ == nullptr) {
        _this->_impl_.position_covariance_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(arena, *from._impl_.position_covariance_);
      } else {
        _this->_impl_.position_covariance_->MergeFrom(*from._impl_.position_covariance_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_latitude()) != 0) {
    _this->_impl_.latitude_ = from._impl_.latitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_longitude()) != 0) {
    _this->_impl_.longitude_ = from._impl_.longitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_altitude()) != 0) {
    _this->_impl_.altitude_ = from._impl_.altitude_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SatNav::CopyFrom(const SatNav& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.SatNav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SatNav::InternalSwap(SatNav* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SatNav, _impl_.type_)
      + sizeof(SatNav::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SatNav, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata SatNav::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_satnav_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
