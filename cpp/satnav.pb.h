// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: satnav.proto
// Protobuf C++ Version: 5.29.3

#ifndef satnav_2eproto_2epb_2eh
#define satnav_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "header.pb.h"
#include "covariance.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_satnav_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_satnav_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_satnav_2eproto;
namespace kevin {
class NavSatStatus;
struct NavSatStatusDefaultTypeInternal;
extern NavSatStatusDefaultTypeInternal _NavSatStatus_default_instance_;
class SatNav;
struct SatNavDefaultTypeInternal;
extern SatNavDefaultTypeInternal _SatNav_default_instance_;
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kevin {
enum PositionCovariance : int {
  COVARIANCE_TYPE_UNKNOWN = 0,
  COVARIANCE_TYPE_APPROXIMATED = 1,
  COVARIANCE_TYPE_DIAGONAL_KNOWN = 2,
  COVARIANCE_TYPE_KNOWN = 3,
  PositionCovariance_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PositionCovariance_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PositionCovariance_IsValid(int value);
extern const uint32_t PositionCovariance_internal_data_[];
constexpr PositionCovariance PositionCovariance_MIN = static_cast<PositionCovariance>(0);
constexpr PositionCovariance PositionCovariance_MAX = static_cast<PositionCovariance>(3);
constexpr int PositionCovariance_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
PositionCovariance_descriptor();
template <typename T>
const std::string& PositionCovariance_Name(T value) {
  static_assert(std::is_same<T, PositionCovariance>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PositionCovariance_Name().");
  return PositionCovariance_Name(static_cast<PositionCovariance>(value));
}
template <>
inline const std::string& PositionCovariance_Name(PositionCovariance value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PositionCovariance_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool PositionCovariance_Parse(absl::string_view name, PositionCovariance* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PositionCovariance>(
      PositionCovariance_descriptor(), name, value);
}
enum StatusFix : int {
  STATUS_FIX = 0,
  STATUS_SBAS_FIX = 1,
  STATUS_GBAS_FIX = 2,
  StatusFix_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StatusFix_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StatusFix_IsValid(int value);
extern const uint32_t StatusFix_internal_data_[];
constexpr StatusFix StatusFix_MIN = static_cast<StatusFix>(0);
constexpr StatusFix StatusFix_MAX = static_cast<StatusFix>(2);
constexpr int StatusFix_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StatusFix_descriptor();
template <typename T>
const std::string& StatusFix_Name(T value) {
  static_assert(std::is_same<T, StatusFix>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatusFix_Name().");
  return StatusFix_Name(static_cast<StatusFix>(value));
}
template <>
inline const std::string& StatusFix_Name(StatusFix value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StatusFix_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool StatusFix_Parse(absl::string_view name, StatusFix* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusFix>(
      StatusFix_descriptor(), name, value);
}
enum ServiceType : int {
  SERVICE_UNKNOWN = 0,
  SERVICE_GPS = 1,
  SERVICE_GLONASS = 2,
  SERVICE_COMPASS = 4,
  SERVICE_GALILEO = 8,
  ServiceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ServiceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ServiceType_IsValid(int value);
extern const uint32_t ServiceType_internal_data_[];
constexpr ServiceType ServiceType_MIN = static_cast<ServiceType>(0);
constexpr ServiceType ServiceType_MAX = static_cast<ServiceType>(8);
constexpr int ServiceType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
ServiceType_descriptor();
template <typename T>
const std::string& ServiceType_Name(T value) {
  static_assert(std::is_same<T, ServiceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ServiceType_Name().");
  return ServiceType_Name(static_cast<ServiceType>(value));
}
template <>
inline const std::string& ServiceType_Name(ServiceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ServiceType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool ServiceType_Parse(absl::string_view name, ServiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceType>(
      ServiceType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class NavSatStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.NavSatStatus) */ {
 public:
  inline NavSatStatus() : NavSatStatus(nullptr) {}
  ~NavSatStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NavSatStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NavSatStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NavSatStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline NavSatStatus(const NavSatStatus& from) : NavSatStatus(nullptr, from) {}
  inline NavSatStatus(NavSatStatus&& from) noexcept
      : NavSatStatus(nullptr, std::move(from)) {}
  inline NavSatStatus& operator=(const NavSatStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavSatStatus& operator=(NavSatStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NavSatStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NavSatStatus* internal_default_instance() {
    return reinterpret_cast<const NavSatStatus*>(
        &_NavSatStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NavSatStatus& a, NavSatStatus& b) { a.Swap(&b); }
  inline void Swap(NavSatStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavSatStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NavSatStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NavSatStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NavSatStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NavSatStatus& from) { NavSatStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NavSatStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.NavSatStatus"; }

 protected:
  explicit NavSatStatus(::google::protobuf::Arena* arena);
  NavSatStatus(::google::protobuf::Arena* arena, const NavSatStatus& from);
  NavSatStatus(::google::protobuf::Arena* arena, NavSatStatus&& from) noexcept
      : NavSatStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
    kServiceFieldNumber = 2,
  };
  // .kevin.StatusFix status = 1;
  void clear_status() ;
  ::kevin::StatusFix status() const;
  void set_status(::kevin::StatusFix value);

  private:
  ::kevin::StatusFix _internal_status() const;
  void _internal_set_status(::kevin::StatusFix value);

  public:
  // .kevin.ServiceType service = 2;
  void clear_service() ;
  ::kevin::ServiceType service() const;
  void set_service(::kevin::ServiceType value);

  private:
  ::kevin::ServiceType _internal_service() const;
  void _internal_set_service(::kevin::ServiceType value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.NavSatStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NavSatStatus& from_msg);
    int status_;
    int service_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satnav_2eproto;
};
// -------------------------------------------------------------------

class SatNav final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.SatNav) */ {
 public:
  inline SatNav() : SatNav(nullptr) {}
  ~SatNav() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SatNav* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SatNav));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SatNav(
      ::google::protobuf::internal::ConstantInitialized);

  inline SatNav(const SatNav& from) : SatNav(nullptr, from) {}
  inline SatNav(SatNav&& from) noexcept
      : SatNav(nullptr, std::move(from)) {}
  inline SatNav& operator=(const SatNav& from) {
    CopyFrom(from);
    return *this;
  }
  inline SatNav& operator=(SatNav&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SatNav& default_instance() {
    return *internal_default_instance();
  }
  static inline const SatNav* internal_default_instance() {
    return reinterpret_cast<const SatNav*>(
        &_SatNav_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SatNav& a, SatNav& b) { a.Swap(&b); }
  inline void Swap(SatNav* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SatNav* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SatNav* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SatNav>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SatNav& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SatNav& from) { SatNav::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SatNav* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.SatNav"; }

 protected:
  explicit SatNav(::google::protobuf::Arena* arena);
  SatNav(::google::protobuf::Arena* arena, const SatNav& from);
  SatNav(::google::protobuf::Arena* arena, SatNav&& from) noexcept
      : SatNav(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kPositionCovarianceFieldNumber = 6,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kAltitudeFieldNumber = 5,
    kTypeFieldNumber = 7,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.NavSatStatus status = 2;
  bool has_status() const;
  void clear_status() ;
  const ::kevin::NavSatStatus& status() const;
  PROTOBUF_NODISCARD ::kevin::NavSatStatus* release_status();
  ::kevin::NavSatStatus* mutable_status();
  void set_allocated_status(::kevin::NavSatStatus* value);
  void unsafe_arena_set_allocated_status(::kevin::NavSatStatus* value);
  ::kevin::NavSatStatus* unsafe_arena_release_status();

  private:
  const ::kevin::NavSatStatus& _internal_status() const;
  ::kevin::NavSatStatus* _internal_mutable_status();

  public:
  // .kevin.Covariance6 position_covariance = 6;
  bool has_position_covariance() const;
  void clear_position_covariance() ;
  const ::kevin::Covariance6& position_covariance() const;
  PROTOBUF_NODISCARD ::kevin::Covariance6* release_position_covariance();
  ::kevin::Covariance6* mutable_position_covariance();
  void set_allocated_position_covariance(::kevin::Covariance6* value);
  void unsafe_arena_set_allocated_position_covariance(::kevin::Covariance6* value);
  ::kevin::Covariance6* unsafe_arena_release_position_covariance();

  private:
  const ::kevin::Covariance6& _internal_position_covariance() const;
  ::kevin::Covariance6* _internal_mutable_position_covariance();

  public:
  // double latitude = 3;
  void clear_latitude() ;
  double latitude() const;
  void set_latitude(double value);

  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);

  public:
  // double longitude = 4;
  void clear_longitude() ;
  double longitude() const;
  void set_longitude(double value);

  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);

  public:
  // double altitude = 5;
  void clear_altitude() ;
  double altitude() const;
  void set_altitude(double value);

  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);

  public:
  // .kevin.PositionCovariance type = 7;
  void clear_type() ;
  ::kevin::PositionCovariance type() const;
  void set_type(::kevin::PositionCovariance value);

  private:
  ::kevin::PositionCovariance _internal_type() const;
  void _internal_set_type(::kevin::PositionCovariance value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.SatNav)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SatNav& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    ::kevin::NavSatStatus* status_;
    ::kevin::Covariance6* position_covariance_;
    double latitude_;
    double longitude_;
    double altitude_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satnav_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NavSatStatus

// .kevin.StatusFix status = 1;
inline void NavSatStatus::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::kevin::StatusFix NavSatStatus::status() const {
  // @@protoc_insertion_point(field_get:kevin.NavSatStatus.status)
  return _internal_status();
}
inline void NavSatStatus::set_status(::kevin::StatusFix value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kevin.NavSatStatus.status)
}
inline ::kevin::StatusFix NavSatStatus::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::StatusFix>(_impl_.status_);
}
inline void NavSatStatus::_internal_set_status(::kevin::StatusFix value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// .kevin.ServiceType service = 2;
inline void NavSatStatus::clear_service() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_ = 0;
}
inline ::kevin::ServiceType NavSatStatus::service() const {
  // @@protoc_insertion_point(field_get:kevin.NavSatStatus.service)
  return _internal_service();
}
inline void NavSatStatus::set_service(::kevin::ServiceType value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:kevin.NavSatStatus.service)
}
inline ::kevin::ServiceType NavSatStatus::_internal_service() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::ServiceType>(_impl_.service_);
}
inline void NavSatStatus::_internal_set_service(::kevin::ServiceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_ = value;
}

// -------------------------------------------------------------------

// SatNav

// .kevin.Header header = 1;
inline bool SatNav::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& SatNav::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& SatNav::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.SatNav.header)
  return _internal_header();
}
inline void SatNav::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.SatNav.header)
}
inline ::kevin::Header* SatNav::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* SatNav::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.SatNav.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* SatNav::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* SatNav::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.SatNav.header)
  return _msg;
}
inline void SatNav::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.SatNav.header)
}

// .kevin.NavSatStatus status = 2;
inline bool SatNav::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline void SatNav::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::kevin::NavSatStatus& SatNav::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::NavSatStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::NavSatStatus&>(::kevin::_NavSatStatus_default_instance_);
}
inline const ::kevin::NavSatStatus& SatNav::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.SatNav.status)
  return _internal_status();
}
inline void SatNav::unsafe_arena_set_allocated_status(::kevin::NavSatStatus* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::kevin::NavSatStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.SatNav.status)
}
inline ::kevin::NavSatStatus* SatNav::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::NavSatStatus* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::NavSatStatus* SatNav::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.SatNav.status)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::NavSatStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::kevin::NavSatStatus* SatNav::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::NavSatStatus>(GetArena());
    _impl_.status_ = reinterpret_cast<::kevin::NavSatStatus*>(p);
  }
  return _impl_.status_;
}
inline ::kevin::NavSatStatus* SatNav::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::NavSatStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:kevin.SatNav.status)
  return _msg;
}
inline void SatNav::set_allocated_status(::kevin::NavSatStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.status_ = reinterpret_cast<::kevin::NavSatStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.SatNav.status)
}

// double latitude = 3;
inline void SatNav::clear_latitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = 0;
}
inline double SatNav::latitude() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.latitude)
  return _internal_latitude();
}
inline void SatNav::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.latitude)
}
inline double SatNav::_internal_latitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_;
}
inline void SatNav::_internal_set_latitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = value;
}

// double longitude = 4;
inline void SatNav::clear_longitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = 0;
}
inline double SatNav::longitude() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.longitude)
  return _internal_longitude();
}
inline void SatNav::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.longitude)
}
inline double SatNav::_internal_longitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_;
}
inline void SatNav::_internal_set_longitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = value;
}

// double altitude = 5;
inline void SatNav::clear_altitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ = 0;
}
inline double SatNav::altitude() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.altitude)
  return _internal_altitude();
}
inline void SatNav::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.altitude)
}
inline double SatNav::_internal_altitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.altitude_;
}
inline void SatNav::_internal_set_altitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ = value;
}

// .kevin.Covariance6 position_covariance = 6;
inline bool SatNav::has_position_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_covariance_ != nullptr);
  return value;
}
inline const ::kevin::Covariance6& SatNav::_internal_position_covariance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Covariance6* p = _impl_.position_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Covariance6&>(::kevin::_Covariance6_default_instance_);
}
inline const ::kevin::Covariance6& SatNav::position_covariance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.SatNav.position_covariance)
  return _internal_position_covariance();
}
inline void SatNav::unsafe_arena_set_allocated_position_covariance(::kevin::Covariance6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_covariance_);
  }
  _impl_.position_covariance_ = reinterpret_cast<::kevin::Covariance6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.SatNav.position_covariance)
}
inline ::kevin::Covariance6* SatNav::release_position_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* released = _impl_.position_covariance_;
  _impl_.position_covariance_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Covariance6* SatNav::unsafe_arena_release_position_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.SatNav.position_covariance)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* temp = _impl_.position_covariance_;
  _impl_.position_covariance_ = nullptr;
  return temp;
}
inline ::kevin::Covariance6* SatNav::_internal_mutable_position_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_covariance_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Covariance6>(GetArena());
    _impl_.position_covariance_ = reinterpret_cast<::kevin::Covariance6*>(p);
  }
  return _impl_.position_covariance_;
}
inline ::kevin::Covariance6* SatNav::mutable_position_covariance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Covariance6* _msg = _internal_mutable_position_covariance();
  // @@protoc_insertion_point(field_mutable:kevin.SatNav.position_covariance)
  return _msg;
}
inline void SatNav::set_allocated_position_covariance(::kevin::Covariance6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_covariance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.position_covariance_ = reinterpret_cast<::kevin::Covariance6*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.SatNav.position_covariance)
}

// .kevin.PositionCovariance type = 7;
inline void SatNav::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::kevin::PositionCovariance SatNav::type() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.type)
  return _internal_type();
}
inline void SatNav::set_type(::kevin::PositionCovariance value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.type)
}
inline ::kevin::PositionCovariance SatNav::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::PositionCovariance>(_impl_.type_);
}
inline void SatNav::_internal_set_type(::kevin::PositionCovariance value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::kevin::PositionCovariance> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::PositionCovariance>() {
  return ::kevin::PositionCovariance_descriptor();
}
template <>
struct is_proto_enum<::kevin::StatusFix> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::StatusFix>() {
  return ::kevin::StatusFix_descriptor();
}
template <>
struct is_proto_enum<::kevin::ServiceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::ServiceType>() {
  return ::kevin::ServiceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // satnav_2eproto_2epb_2eh
