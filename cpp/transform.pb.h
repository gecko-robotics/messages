// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: transform.proto
// Protobuf C++ Version: 5.29.3

#ifndef transform_2eproto_2epb_2eh
#define transform_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "vector3.pb.h"
#include "quaternion.pb.h"
#include "header.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_transform_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_transform_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_transform_2eproto;
namespace kevin {
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class TransformStamped;
struct TransformStampedDefaultTypeInternal;
extern TransformStampedDefaultTypeInternal _TransformStamped_default_instance_;
class Transforms;
struct TransformsDefaultTypeInternal;
extern TransformsDefaultTypeInternal _Transforms_default_instance_;
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kevin {

// ===================================================================


// -------------------------------------------------------------------

class Transform final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Transform* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Transform));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transform(
      ::google::protobuf::internal::ConstantInitialized);

  inline Transform(const Transform& from) : Transform(nullptr, from) {}
  inline Transform(Transform&& from) noexcept
      : Transform(nullptr, std::move(from)) {}
  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
        &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Transform& a, Transform& b) { a.Swap(&b); }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Transform>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transform& from) { Transform::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Transform* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Transform"; }

 protected:
  explicit Transform(::google::protobuf::Arena* arena);
  Transform(::google::protobuf::Arena* arena, const Transform& from);
  Transform(::google::protobuf::Arena* arena, Transform&& from) noexcept
      : Transform(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .kevin.Vector3 position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::kevin::Vector3& position() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_position();
  ::kevin::Vector3* mutable_position();
  void set_allocated_position(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_position(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_position();

  private:
  const ::kevin::Vector3& _internal_position() const;
  ::kevin::Vector3* _internal_mutable_position();

  public:
  // .kevin.Quaternion rotation = 2;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::kevin::Quaternion& rotation() const;
  PROTOBUF_NODISCARD ::kevin::Quaternion* release_rotation();
  ::kevin::Quaternion* mutable_rotation();
  void set_allocated_rotation(::kevin::Quaternion* value);
  void unsafe_arena_set_allocated_rotation(::kevin::Quaternion* value);
  ::kevin::Quaternion* unsafe_arena_release_rotation();

  private:
  const ::kevin::Quaternion& _internal_rotation() const;
  ::kevin::Quaternion* _internal_mutable_rotation();

  public:
  // @@protoc_insertion_point(class_scope:kevin.Transform)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Transform& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Vector3* position_;
    ::kevin::Quaternion* rotation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class TransformStamped final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.TransformStamped) */ {
 public:
  inline TransformStamped() : TransformStamped(nullptr) {}
  ~TransformStamped() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TransformStamped* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TransformStamped));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransformStamped(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransformStamped(const TransformStamped& from) : TransformStamped(nullptr, from) {}
  inline TransformStamped(TransformStamped&& from) noexcept
      : TransformStamped(nullptr, std::move(from)) {}
  inline TransformStamped& operator=(const TransformStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformStamped& operator=(TransformStamped&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformStamped* internal_default_instance() {
    return reinterpret_cast<const TransformStamped*>(
        &_TransformStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TransformStamped& a, TransformStamped& b) { a.Swap(&b); }
  inline void Swap(TransformStamped* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformStamped* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformStamped* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TransformStamped>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransformStamped& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransformStamped& from) { TransformStamped::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TransformStamped* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.TransformStamped"; }

 protected:
  explicit TransformStamped(::google::protobuf::Arena* arena);
  TransformStamped(::google::protobuf::Arena* arena, const TransformStamped& from);
  TransformStamped(::google::protobuf::Arena* arena, TransformStamped&& from) noexcept
      : TransformStamped(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChildFrameIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 4,
  };
  // string child_frame_id = 2;
  void clear_child_frame_id() ;
  const std::string& child_frame_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_child_frame_id(Arg_&& arg, Args_... args);
  std::string* mutable_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* value);

  private:
  const std::string& _internal_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child_frame_id(
      const std::string& value);
  std::string* _internal_mutable_child_frame_id();

  public:
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Vector3 position = 3;
  bool has_position() const;
  void clear_position() ;
  const ::kevin::Vector3& position() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_position();
  ::kevin::Vector3* mutable_position();
  void set_allocated_position(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_position(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_position();

  private:
  const ::kevin::Vector3& _internal_position() const;
  ::kevin::Vector3* _internal_mutable_position();

  public:
  // .kevin.Quaternion rotation = 4;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::kevin::Quaternion& rotation() const;
  PROTOBUF_NODISCARD ::kevin::Quaternion* release_rotation();
  ::kevin::Quaternion* mutable_rotation();
  void set_allocated_rotation(::kevin::Quaternion* value);
  void unsafe_arena_set_allocated_rotation(::kevin::Quaternion* value);
  ::kevin::Quaternion* unsafe_arena_release_rotation();

  private:
  const ::kevin::Quaternion& _internal_rotation() const;
  ::kevin::Quaternion* _internal_mutable_rotation();

  public:
  // @@protoc_insertion_point(class_scope:kevin.TransformStamped)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransformStamped& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr child_frame_id_;
    ::kevin::Header* header_;
    ::kevin::Vector3* position_;
    ::kevin::Quaternion* rotation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Transforms final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Transforms) */ {
 public:
  inline Transforms() : Transforms(nullptr) {}
  ~Transforms() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Transforms* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Transforms));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transforms(
      ::google::protobuf::internal::ConstantInitialized);

  inline Transforms(const Transforms& from) : Transforms(nullptr, from) {}
  inline Transforms(Transforms&& from) noexcept
      : Transforms(nullptr, std::move(from)) {}
  inline Transforms& operator=(const Transforms& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transforms& operator=(Transforms&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transforms& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transforms* internal_default_instance() {
    return reinterpret_cast<const Transforms*>(
        &_Transforms_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Transforms& a, Transforms& b) { a.Swap(&b); }
  inline void Swap(Transforms* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transforms* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transforms* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Transforms>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transforms& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transforms& from) { Transforms::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Transforms* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Transforms"; }

 protected:
  explicit Transforms(::google::protobuf::Arena* arena);
  Transforms(::google::protobuf::Arena* arena, const Transforms& from);
  Transforms(::google::protobuf::Arena* arena, Transforms&& from) noexcept
      : Transforms(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTransformsFieldNumber = 1,
  };
  // repeated .kevin.TransformStamped transforms = 1;
  int transforms_size() const;
  private:
  int _internal_transforms_size() const;

  public:
  void clear_transforms() ;
  ::kevin::TransformStamped* mutable_transforms(int index);
  ::google::protobuf::RepeatedPtrField<::kevin::TransformStamped>* mutable_transforms();

  private:
  const ::google::protobuf::RepeatedPtrField<::kevin::TransformStamped>& _internal_transforms() const;
  ::google::protobuf::RepeatedPtrField<::kevin::TransformStamped>* _internal_mutable_transforms();
  public:
  const ::kevin::TransformStamped& transforms(int index) const;
  ::kevin::TransformStamped* add_transforms();
  const ::google::protobuf::RepeatedPtrField<::kevin::TransformStamped>& transforms() const;
  // @@protoc_insertion_point(class_scope:kevin.Transforms)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Transforms& from_msg);
    ::google::protobuf::RepeatedPtrField< ::kevin::TransformStamped > transforms_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Transform

// .kevin.Vector3 position = 1;
inline bool Transform::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& Transform::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& Transform::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Transform.position)
  return _internal_position();
}
inline void Transform::unsafe_arena_set_allocated_position(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Transform.position)
}
inline ::kevin::Vector3* Transform::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Vector3* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* Transform::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Transform.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* Transform::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.position_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.position_;
}
inline ::kevin::Vector3* Transform::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:kevin.Transform.position)
  return _msg;
}
inline void Transform::set_allocated_position(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Transform.position)
}

// .kevin.Quaternion rotation = 2;
inline bool Transform::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline const ::kevin::Quaternion& Transform::_internal_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Quaternion* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Quaternion&>(::kevin::_Quaternion_default_instance_);
}
inline const ::kevin::Quaternion& Transform::rotation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(::kevin::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = reinterpret_cast<::kevin::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Transform.rotation)
}
inline ::kevin::Quaternion* Transform::release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Quaternion* released = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Quaternion* Transform::unsafe_arena_release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Transform.rotation)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::kevin::Quaternion* Transform::_internal_mutable_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Quaternion>(GetArena());
    _impl_.rotation_ = reinterpret_cast<::kevin::Quaternion*>(p);
  }
  return _impl_.rotation_;
}
inline ::kevin::Quaternion* Transform::mutable_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Quaternion* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:kevin.Transform.rotation)
  return _msg;
}
inline void Transform::set_allocated_rotation(::kevin::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rotation_ = reinterpret_cast<::kevin::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Transform.rotation)
}

// -------------------------------------------------------------------

// TransformStamped

// .kevin.Header header = 1;
inline bool TransformStamped::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& TransformStamped::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& TransformStamped::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.TransformStamped.header)
  return _internal_header();
}
inline void TransformStamped::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.TransformStamped.header)
}
inline ::kevin::Header* TransformStamped::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* TransformStamped::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.TransformStamped.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* TransformStamped::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* TransformStamped::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.TransformStamped.header)
  return _msg;
}
inline void TransformStamped::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.TransformStamped.header)
}

// string child_frame_id = 2;
inline void TransformStamped::clear_child_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_.ClearToEmpty();
}
inline const std::string& TransformStamped::child_frame_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.TransformStamped.child_frame_id)
  return _internal_child_frame_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransformStamped::set_child_frame_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kevin.TransformStamped.child_frame_id)
}
inline std::string* TransformStamped::mutable_child_frame_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_child_frame_id();
  // @@protoc_insertion_point(field_mutable:kevin.TransformStamped.child_frame_id)
  return _s;
}
inline const std::string& TransformStamped::_internal_child_frame_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.child_frame_id_.Get();
}
inline void TransformStamped::_internal_set_child_frame_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_.Set(value, GetArena());
}
inline std::string* TransformStamped::_internal_mutable_child_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.child_frame_id_.Mutable( GetArena());
}
inline std::string* TransformStamped::release_child_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.TransformStamped.child_frame_id)
  return _impl_.child_frame_id_.Release();
}
inline void TransformStamped::set_allocated_child_frame_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.child_frame_id_.IsDefault()) {
    _impl_.child_frame_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kevin.TransformStamped.child_frame_id)
}

// .kevin.Vector3 position = 3;
inline bool TransformStamped::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& TransformStamped::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& TransformStamped::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.TransformStamped.position)
  return _internal_position();
}
inline void TransformStamped::unsafe_arena_set_allocated_position(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.TransformStamped.position)
}
inline ::kevin::Vector3* TransformStamped::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* TransformStamped::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.TransformStamped.position)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* TransformStamped::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.position_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.position_;
}
inline ::kevin::Vector3* TransformStamped::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:kevin.TransformStamped.position)
  return _msg;
}
inline void TransformStamped::set_allocated_position(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.position_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.TransformStamped.position)
}

// .kevin.Quaternion rotation = 4;
inline bool TransformStamped::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline const ::kevin::Quaternion& TransformStamped::_internal_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Quaternion* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Quaternion&>(::kevin::_Quaternion_default_instance_);
}
inline const ::kevin::Quaternion& TransformStamped::rotation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.TransformStamped.rotation)
  return _internal_rotation();
}
inline void TransformStamped::unsafe_arena_set_allocated_rotation(::kevin::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = reinterpret_cast<::kevin::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.TransformStamped.rotation)
}
inline ::kevin::Quaternion* TransformStamped::release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Quaternion* released = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Quaternion* TransformStamped::unsafe_arena_release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.TransformStamped.rotation)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::kevin::Quaternion* TransformStamped::_internal_mutable_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Quaternion>(GetArena());
    _impl_.rotation_ = reinterpret_cast<::kevin::Quaternion*>(p);
  }
  return _impl_.rotation_;
}
inline ::kevin::Quaternion* TransformStamped::mutable_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Quaternion* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:kevin.TransformStamped.rotation)
  return _msg;
}
inline void TransformStamped::set_allocated_rotation(::kevin::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.rotation_ = reinterpret_cast<::kevin::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.TransformStamped.rotation)
}

// -------------------------------------------------------------------

// Transforms

// repeated .kevin.TransformStamped transforms = 1;
inline int Transforms::_internal_transforms_size() const {
  return _internal_transforms().size();
}
inline int Transforms::transforms_size() const {
  return _internal_transforms_size();
}
inline void Transforms::clear_transforms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transforms_.Clear();
}
inline ::kevin::TransformStamped* Transforms::mutable_transforms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kevin.Transforms.transforms)
  return _internal_mutable_transforms()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::kevin::TransformStamped>* Transforms::mutable_transforms()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kevin.Transforms.transforms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_transforms();
}
inline const ::kevin::TransformStamped& Transforms::transforms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Transforms.transforms)
  return _internal_transforms().Get(index);
}
inline ::kevin::TransformStamped* Transforms::add_transforms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::kevin::TransformStamped* _add = _internal_mutable_transforms()->Add();
  // @@protoc_insertion_point(field_add:kevin.Transforms.transforms)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::kevin::TransformStamped>& Transforms::transforms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kevin.Transforms.transforms)
  return _internal_transforms();
}
inline const ::google::protobuf::RepeatedPtrField<::kevin::TransformStamped>&
Transforms::_internal_transforms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transforms_;
}
inline ::google::protobuf::RepeatedPtrField<::kevin::TransformStamped>*
Transforms::_internal_mutable_transforms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.transforms_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // transform_2eproto_2epb_2eh
