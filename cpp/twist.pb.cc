// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: twist.proto
// Protobuf C++ Version: 5.29.3

#include "twist.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kevin {

inline constexpr Twist::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        linear_{nullptr},
        angular_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Twist::Twist(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TwistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwistDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwistDefaultTypeInternal() {}
  union {
    Twist _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwistDefaultTypeInternal _Twist_default_instance_;

inline constexpr TwistStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        linear_{nullptr},
        angular_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TwistStamped::TwistStamped(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TwistStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwistStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwistStampedDefaultTypeInternal() {}
  union {
    TwistStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwistStampedDefaultTypeInternal _TwistStamped_default_instance_;
}  // namespace kevin
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_twist_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_twist_2eproto = nullptr;
const ::uint32_t
    TableStruct_twist_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kevin::Twist, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::Twist, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::Twist, _impl_.linear_),
        PROTOBUF_FIELD_OFFSET(::kevin::Twist, _impl_.angular_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kevin::TwistStamped, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::TwistStamped, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::TwistStamped, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::TwistStamped, _impl_.linear_),
        PROTOBUF_FIELD_OFFSET(::kevin::TwistStamped, _impl_.angular_),
        0,
        1,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::kevin::Twist)},
        {12, 23, -1, sizeof(::kevin::TwistStamped)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kevin::_Twist_default_instance_._instance,
    &::kevin::_TwistStamped_default_instance_._instance,
};
const char descriptor_table_protodef_twist_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013twist.proto\022\005kevin\032\rvector3.proto\032\014hea"
    "der.proto\"H\n\005Twist\022\036\n\006linear\030\001 \001(\0132\016.kev"
    "in.Vector3\022\037\n\007angular\030\002 \001(\0132\016.kevin.Vect"
    "or3\"n\n\014TwistStamped\022\035\n\006header\030\001 \001(\0132\r.ke"
    "vin.Header\022\036\n\006linear\030\002 \001(\0132\016.kevin.Vecto"
    "r3\022\037\n\007angular\030\003 \001(\0132\016.kevin.Vector3b\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_twist_2eproto_deps[2] =
    {
        &::descriptor_table_header_2eproto,
        &::descriptor_table_vector3_2eproto,
};
static ::absl::once_flag descriptor_table_twist_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_twist_2eproto = {
    false,
    false,
    243,
    descriptor_table_protodef_twist_2eproto,
    "twist.proto",
    &descriptor_table_twist_2eproto_once,
    descriptor_table_twist_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_twist_2eproto::offsets,
    file_level_enum_descriptors_twist_2eproto,
    file_level_service_descriptors_twist_2eproto,
};
namespace kevin {
// ===================================================================

class Twist::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Twist>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Twist, _impl_._has_bits_);
};

void Twist::clear_linear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_ != nullptr) _impl_.linear_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Twist::clear_angular() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_ != nullptr) _impl_.angular_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Twist::Twist(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.Twist)
}
inline PROTOBUF_NDEBUG_INLINE Twist::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::Twist& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Twist::Twist(
    ::google::protobuf::Arena* arena,
    const Twist& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Twist* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.linear_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.linear_)
                        : nullptr;
  _impl_.angular_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.angular_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.Twist)
}
inline PROTOBUF_NDEBUG_INLINE Twist::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Twist::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, linear_),
           0,
           offsetof(Impl_, angular_) -
               offsetof(Impl_, linear_) +
               sizeof(Impl_::angular_));
}
Twist::~Twist() {
  // @@protoc_insertion_point(destructor:kevin.Twist)
  SharedDtor(*this);
}
inline void Twist::SharedDtor(MessageLite& self) {
  Twist& this_ = static_cast<Twist&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.linear_;
  delete this_._impl_.angular_;
  this_._impl_.~Impl_();
}

inline void* Twist::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Twist(arena);
}
constexpr auto Twist::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Twist),
                                            alignof(Twist));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Twist::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Twist_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Twist::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Twist>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Twist::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Twist>(), &Twist::ByteSizeLong,
            &Twist::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Twist, _impl_._cached_size_),
        false,
    },
    &Twist::kDescriptorMethods,
    &descriptor_table_twist_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Twist::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Twist::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Twist, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::Twist>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kevin.Vector3 angular = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Twist, _impl_.angular_)}},
    // .kevin.Vector3 linear = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Twist, _impl_.linear_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Vector3 linear = 1;
    {PROTOBUF_FIELD_OFFSET(Twist, _impl_.linear_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 angular = 2;
    {PROTOBUF_FIELD_OFFSET(Twist, _impl_.angular_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.Twist)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.linear_ != nullptr);
      _impl_.linear_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.angular_ != nullptr);
      _impl_.angular_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Twist::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Twist& this_ = static_cast<const Twist&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Twist::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Twist& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.Twist)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Vector3 linear = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.linear_, this_._impl_.linear_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 angular = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.angular_, this_._impl_.angular_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.Twist)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Twist::ByteSizeLong(const MessageLite& base) {
          const Twist& this_ = static_cast<const Twist&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Twist::ByteSizeLong() const {
          const Twist& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.Twist)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kevin.Vector3 linear = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.linear_);
            }
            // .kevin.Vector3 angular = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.angular_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Twist::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Twist*>(&to_msg);
  auto& from = static_cast<const Twist&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.Twist)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.linear_ != nullptr);
      if (_this->_impl_.linear_ == nullptr) {
        _this->_impl_.linear_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.linear_);
      } else {
        _this->_impl_.linear_->MergeFrom(*from._impl_.linear_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.angular_ != nullptr);
      if (_this->_impl_.angular_ == nullptr) {
        _this->_impl_.angular_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.angular_);
      } else {
        _this->_impl_.angular_->MergeFrom(*from._impl_.angular_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Twist::InternalSwap(Twist* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Twist, _impl_.angular_)
      + sizeof(Twist::_impl_.angular_)
      - PROTOBUF_FIELD_OFFSET(Twist, _impl_.linear_)>(
          reinterpret_cast<char*>(&_impl_.linear_),
          reinterpret_cast<char*>(&other->_impl_.linear_));
}

::google::protobuf::Metadata Twist::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TwistStamped::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TwistStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_._has_bits_);
};

void TwistStamped::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TwistStamped::clear_linear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_ != nullptr) _impl_.linear_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TwistStamped::clear_angular() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_ != nullptr) _impl_.angular_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TwistStamped::TwistStamped(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.TwistStamped)
}
inline PROTOBUF_NDEBUG_INLINE TwistStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::TwistStamped& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TwistStamped::TwistStamped(
    ::google::protobuf::Arena* arena,
    const TwistStamped& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TwistStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.linear_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.linear_)
                        : nullptr;
  _impl_.angular_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.angular_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.TwistStamped)
}
inline PROTOBUF_NDEBUG_INLINE TwistStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TwistStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, angular_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::angular_));
}
TwistStamped::~TwistStamped() {
  // @@protoc_insertion_point(destructor:kevin.TwistStamped)
  SharedDtor(*this);
}
inline void TwistStamped::SharedDtor(MessageLite& self) {
  TwistStamped& this_ = static_cast<TwistStamped&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.linear_;
  delete this_._impl_.angular_;
  this_._impl_.~Impl_();
}

inline void* TwistStamped::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TwistStamped(arena);
}
constexpr auto TwistStamped::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TwistStamped),
                                            alignof(TwistStamped));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TwistStamped::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TwistStamped_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TwistStamped::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TwistStamped>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TwistStamped::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TwistStamped>(), &TwistStamped::ByteSizeLong,
            &TwistStamped::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_._cached_size_),
        false,
    },
    &TwistStamped::kDescriptorMethods,
    &descriptor_table_twist_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TwistStamped::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> TwistStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::TwistStamped>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.header_)}},
    // .kevin.Vector3 linear = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.linear_)}},
    // .kevin.Vector3 angular = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.angular_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 linear = 2;
    {PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.linear_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 angular = 3;
    {PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.angular_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TwistStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.TwistStamped)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.linear_ != nullptr);
      _impl_.linear_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.angular_ != nullptr);
      _impl_.angular_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TwistStamped::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TwistStamped& this_ = static_cast<const TwistStamped&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TwistStamped::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TwistStamped& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.TwistStamped)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 linear = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.linear_, this_._impl_.linear_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 angular = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.angular_, this_._impl_.angular_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.TwistStamped)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TwistStamped::ByteSizeLong(const MessageLite& base) {
          const TwistStamped& this_ = static_cast<const TwistStamped&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TwistStamped::ByteSizeLong() const {
          const TwistStamped& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.TwistStamped)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.Vector3 linear = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.linear_);
            }
            // .kevin.Vector3 angular = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.angular_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TwistStamped::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TwistStamped*>(&to_msg);
  auto& from = static_cast<const TwistStamped&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.TwistStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.linear_ != nullptr);
      if (_this->_impl_.linear_ == nullptr) {
        _this->_impl_.linear_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.linear_);
      } else {
        _this->_impl_.linear_->MergeFrom(*from._impl_.linear_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.angular_ != nullptr);
      if (_this->_impl_.angular_ == nullptr) {
        _this->_impl_.angular_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.angular_);
      } else {
        _this->_impl_.angular_->MergeFrom(*from._impl_.angular_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TwistStamped::CopyFrom(const TwistStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.TwistStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TwistStamped::InternalSwap(TwistStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.angular_)
      + sizeof(TwistStamped::_impl_.angular_)
      - PROTOBUF_FIELD_OFFSET(TwistStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata TwistStamped::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_twist_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
