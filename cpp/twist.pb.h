// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: twist.proto
// Protobuf C++ Version: 5.29.3

#ifndef twist_2eproto_2epb_2eh
#define twist_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "vector3.pb.h"
#include "header.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_twist_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_twist_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_twist_2eproto;
namespace kevin {
class Twist;
struct TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
class TwistStamped;
struct TwistStampedDefaultTypeInternal;
extern TwistStampedDefaultTypeInternal _TwistStamped_default_instance_;
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kevin {

// ===================================================================


// -------------------------------------------------------------------

class Twist final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Twist) */ {
 public:
  inline Twist() : Twist(nullptr) {}
  ~Twist() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Twist* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Twist));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Twist(
      ::google::protobuf::internal::ConstantInitialized);

  inline Twist(const Twist& from) : Twist(nullptr, from) {}
  inline Twist(Twist&& from) noexcept
      : Twist(nullptr, std::move(from)) {}
  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Twist& operator=(Twist&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Twist& default_instance() {
    return *internal_default_instance();
  }
  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
        &_Twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Twist& a, Twist& b) { a.Swap(&b); }
  inline void Swap(Twist* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Twist* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Twist* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Twist>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Twist& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Twist& from) { Twist::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Twist* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Twist"; }

 protected:
  explicit Twist(::google::protobuf::Arena* arena);
  Twist(::google::protobuf::Arena* arena, const Twist& from);
  Twist(::google::protobuf::Arena* arena, Twist&& from) noexcept
      : Twist(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // .kevin.Vector3 linear = 1;
  bool has_linear() const;
  void clear_linear() ;
  const ::kevin::Vector3& linear() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_linear();
  ::kevin::Vector3* mutable_linear();
  void set_allocated_linear(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_linear(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_linear();

  private:
  const ::kevin::Vector3& _internal_linear() const;
  ::kevin::Vector3* _internal_mutable_linear();

  public:
  // .kevin.Vector3 angular = 2;
  bool has_angular() const;
  void clear_angular() ;
  const ::kevin::Vector3& angular() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_angular();
  ::kevin::Vector3* mutable_angular();
  void set_allocated_angular(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_angular(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_angular();

  private:
  const ::kevin::Vector3& _internal_angular() const;
  ::kevin::Vector3* _internal_mutable_angular();

  public:
  // @@protoc_insertion_point(class_scope:kevin.Twist)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Twist& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Vector3* linear_;
    ::kevin::Vector3* angular_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_twist_2eproto;
};
// -------------------------------------------------------------------

class TwistStamped final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.TwistStamped) */ {
 public:
  inline TwistStamped() : TwistStamped(nullptr) {}
  ~TwistStamped() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TwistStamped* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TwistStamped));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TwistStamped(
      ::google::protobuf::internal::ConstantInitialized);

  inline TwistStamped(const TwistStamped& from) : TwistStamped(nullptr, from) {}
  inline TwistStamped(TwistStamped&& from) noexcept
      : TwistStamped(nullptr, std::move(from)) {}
  inline TwistStamped& operator=(const TwistStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwistStamped& operator=(TwistStamped&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwistStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwistStamped* internal_default_instance() {
    return reinterpret_cast<const TwistStamped*>(
        &_TwistStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TwistStamped& a, TwistStamped& b) { a.Swap(&b); }
  inline void Swap(TwistStamped* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwistStamped* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TwistStamped* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TwistStamped>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TwistStamped& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TwistStamped& from) { TwistStamped::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TwistStamped* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.TwistStamped"; }

 protected:
  explicit TwistStamped(::google::protobuf::Arena* arena);
  TwistStamped(::google::protobuf::Arena* arena, const TwistStamped& from);
  TwistStamped(::google::protobuf::Arena* arena, TwistStamped&& from) noexcept
      : TwistStamped(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kLinearFieldNumber = 2,
    kAngularFieldNumber = 3,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Vector3 linear = 2;
  bool has_linear() const;
  void clear_linear() ;
  const ::kevin::Vector3& linear() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_linear();
  ::kevin::Vector3* mutable_linear();
  void set_allocated_linear(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_linear(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_linear();

  private:
  const ::kevin::Vector3& _internal_linear() const;
  ::kevin::Vector3* _internal_mutable_linear();

  public:
  // .kevin.Vector3 angular = 3;
  bool has_angular() const;
  void clear_angular() ;
  const ::kevin::Vector3& angular() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_angular();
  ::kevin::Vector3* mutable_angular();
  void set_allocated_angular(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_angular(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_angular();

  private:
  const ::kevin::Vector3& _internal_angular() const;
  ::kevin::Vector3* _internal_mutable_angular();

  public:
  // @@protoc_insertion_point(class_scope:kevin.TwistStamped)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TwistStamped& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    ::kevin::Vector3* linear_;
    ::kevin::Vector3* angular_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_twist_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Twist

// .kevin.Vector3 linear = 1;
inline bool Twist::has_linear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& Twist::_internal_linear() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.linear_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& Twist::linear() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Twist.linear)
  return _internal_linear();
}
inline void Twist::unsafe_arena_set_allocated_linear(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_);
  }
  _impl_.linear_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Twist.linear)
}
inline ::kevin::Vector3* Twist::release_linear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Vector3* released = _impl_.linear_;
  _impl_.linear_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* Twist::unsafe_arena_release_linear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Twist.linear)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Vector3* temp = _impl_.linear_;
  _impl_.linear_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* Twist::_internal_mutable_linear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.linear_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.linear_;
}
inline ::kevin::Vector3* Twist::mutable_linear() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Vector3* _msg = _internal_mutable_linear();
  // @@protoc_insertion_point(field_mutable:kevin.Twist.linear)
  return _msg;
}
inline void Twist::set_allocated_linear(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.linear_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Twist.linear)
}

// .kevin.Vector3 angular = 2;
inline bool Twist::has_angular() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& Twist::_internal_angular() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.angular_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& Twist::angular() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Twist.angular)
  return _internal_angular();
}
inline void Twist::unsafe_arena_set_allocated_angular(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_);
  }
  _impl_.angular_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Twist.angular)
}
inline ::kevin::Vector3* Twist::release_angular() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* released = _impl_.angular_;
  _impl_.angular_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* Twist::unsafe_arena_release_angular() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Twist.angular)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* temp = _impl_.angular_;
  _impl_.angular_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* Twist::_internal_mutable_angular() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.angular_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.angular_;
}
inline ::kevin::Vector3* Twist::mutable_angular() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Vector3* _msg = _internal_mutable_angular();
  // @@protoc_insertion_point(field_mutable:kevin.Twist.angular)
  return _msg;
}
inline void Twist::set_allocated_angular(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.angular_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Twist.angular)
}

// -------------------------------------------------------------------

// TwistStamped

// .kevin.Header header = 1;
inline bool TwistStamped::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& TwistStamped::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& TwistStamped::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.TwistStamped.header)
  return _internal_header();
}
inline void TwistStamped::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.TwistStamped.header)
}
inline ::kevin::Header* TwistStamped::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* TwistStamped::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.TwistStamped.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* TwistStamped::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* TwistStamped::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.TwistStamped.header)
  return _msg;
}
inline void TwistStamped::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.TwistStamped.header)
}

// .kevin.Vector3 linear = 2;
inline bool TwistStamped::has_linear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& TwistStamped::_internal_linear() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.linear_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& TwistStamped::linear() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.TwistStamped.linear)
  return _internal_linear();
}
inline void TwistStamped::unsafe_arena_set_allocated_linear(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_);
  }
  _impl_.linear_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.TwistStamped.linear)
}
inline ::kevin::Vector3* TwistStamped::release_linear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* released = _impl_.linear_;
  _impl_.linear_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* TwistStamped::unsafe_arena_release_linear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.TwistStamped.linear)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* temp = _impl_.linear_;
  _impl_.linear_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* TwistStamped::_internal_mutable_linear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.linear_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.linear_;
}
inline ::kevin::Vector3* TwistStamped::mutable_linear() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Vector3* _msg = _internal_mutable_linear();
  // @@protoc_insertion_point(field_mutable:kevin.TwistStamped.linear)
  return _msg;
}
inline void TwistStamped::set_allocated_linear(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.linear_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.TwistStamped.linear)
}

// .kevin.Vector3 angular = 3;
inline bool TwistStamped::has_angular() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& TwistStamped::_internal_angular() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.angular_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& TwistStamped::angular() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.TwistStamped.angular)
  return _internal_angular();
}
inline void TwistStamped::unsafe_arena_set_allocated_angular(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_);
  }
  _impl_.angular_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.TwistStamped.angular)
}
inline ::kevin::Vector3* TwistStamped::release_angular() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* released = _impl_.angular_;
  _impl_.angular_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* TwistStamped::unsafe_arena_release_angular() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.TwistStamped.angular)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* temp = _impl_.angular_;
  _impl_.angular_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* TwistStamped::_internal_mutable_angular() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.angular_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.angular_;
}
inline ::kevin::Vector3* TwistStamped::mutable_angular() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Vector3* _msg = _internal_mutable_angular();
  // @@protoc_insertion_point(field_mutable:kevin.TwistStamped.angular)
  return _msg;
}
inline void TwistStamped::set_allocated_angular(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.angular_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.TwistStamped.angular)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // twist_2eproto_2epb_2eh
