// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: wrench.proto
// Protobuf C++ Version: 5.29.3

#include "wrench.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kevin {

inline constexpr Wrench::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        force_{nullptr},
        torque_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Wrench::Wrench(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WrenchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WrenchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WrenchDefaultTypeInternal() {}
  union {
    Wrench _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WrenchDefaultTypeInternal _Wrench_default_instance_;

inline constexpr WrenchStamped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        force_{nullptr},
        torque_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR WrenchStamped::WrenchStamped(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WrenchStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WrenchStampedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WrenchStampedDefaultTypeInternal() {}
  union {
    WrenchStamped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WrenchStampedDefaultTypeInternal _WrenchStamped_default_instance_;
}  // namespace kevin
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_wrench_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_wrench_2eproto = nullptr;
const ::uint32_t
    TableStruct_wrench_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kevin::Wrench, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::Wrench, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::Wrench, _impl_.force_),
        PROTOBUF_FIELD_OFFSET(::kevin::Wrench, _impl_.torque_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kevin::WrenchStamped, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::WrenchStamped, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::WrenchStamped, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::WrenchStamped, _impl_.force_),
        PROTOBUF_FIELD_OFFSET(::kevin::WrenchStamped, _impl_.torque_),
        0,
        1,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::kevin::Wrench)},
        {12, 23, -1, sizeof(::kevin::WrenchStamped)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kevin::_Wrench_default_instance_._instance,
    &::kevin::_WrenchStamped_default_instance_._instance,
};
const char descriptor_table_protodef_wrench_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014wrench.proto\022\005kevin\032\rvector3.proto\032\014he"
    "ader.proto\"G\n\006Wrench\022\035\n\005force\030\001 \001(\0132\016.ke"
    "vin.Vector3\022\036\n\006torque\030\002 \001(\0132\016.kevin.Vect"
    "or3\"m\n\rWrenchStamped\022\035\n\006header\030\001 \001(\0132\r.k"
    "evin.Header\022\035\n\005force\030\002 \001(\0132\016.kevin.Vecto"
    "r3\022\036\n\006torque\030\003 \001(\0132\016.kevin.Vector3b\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_wrench_2eproto_deps[2] =
    {
        &::descriptor_table_header_2eproto,
        &::descriptor_table_vector3_2eproto,
};
static ::absl::once_flag descriptor_table_wrench_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_wrench_2eproto = {
    false,
    false,
    242,
    descriptor_table_protodef_wrench_2eproto,
    "wrench.proto",
    &descriptor_table_wrench_2eproto_once,
    descriptor_table_wrench_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_wrench_2eproto::offsets,
    file_level_enum_descriptors_wrench_2eproto,
    file_level_service_descriptors_wrench_2eproto,
};
namespace kevin {
// ===================================================================

class Wrench::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Wrench>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Wrench, _impl_._has_bits_);
};

void Wrench::clear_force() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.force_ != nullptr) _impl_.force_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Wrench::clear_torque() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.torque_ != nullptr) _impl_.torque_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Wrench::Wrench(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.Wrench)
}
inline PROTOBUF_NDEBUG_INLINE Wrench::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::Wrench& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Wrench::Wrench(
    ::google::protobuf::Arena* arena,
    const Wrench& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Wrench* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.force_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.force_)
                        : nullptr;
  _impl_.torque_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.torque_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.Wrench)
}
inline PROTOBUF_NDEBUG_INLINE Wrench::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Wrench::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, force_),
           0,
           offsetof(Impl_, torque_) -
               offsetof(Impl_, force_) +
               sizeof(Impl_::torque_));
}
Wrench::~Wrench() {
  // @@protoc_insertion_point(destructor:kevin.Wrench)
  SharedDtor(*this);
}
inline void Wrench::SharedDtor(MessageLite& self) {
  Wrench& this_ = static_cast<Wrench&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.force_;
  delete this_._impl_.torque_;
  this_._impl_.~Impl_();
}

inline void* Wrench::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Wrench(arena);
}
constexpr auto Wrench::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Wrench),
                                            alignof(Wrench));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Wrench::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Wrench_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Wrench::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Wrench>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Wrench::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Wrench>(), &Wrench::ByteSizeLong,
            &Wrench::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Wrench, _impl_._cached_size_),
        false,
    },
    &Wrench::kDescriptorMethods,
    &descriptor_table_wrench_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Wrench::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Wrench::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Wrench, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::Wrench>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kevin.Vector3 torque = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Wrench, _impl_.torque_)}},
    // .kevin.Vector3 force = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Wrench, _impl_.force_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Vector3 force = 1;
    {PROTOBUF_FIELD_OFFSET(Wrench, _impl_.force_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 torque = 2;
    {PROTOBUF_FIELD_OFFSET(Wrench, _impl_.torque_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Wrench::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.Wrench)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.force_ != nullptr);
      _impl_.force_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.torque_ != nullptr);
      _impl_.torque_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Wrench::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Wrench& this_ = static_cast<const Wrench&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Wrench::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Wrench& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.Wrench)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Vector3 force = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.force_, this_._impl_.force_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 torque = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.torque_, this_._impl_.torque_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.Wrench)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Wrench::ByteSizeLong(const MessageLite& base) {
          const Wrench& this_ = static_cast<const Wrench&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Wrench::ByteSizeLong() const {
          const Wrench& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.Wrench)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kevin.Vector3 force = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.force_);
            }
            // .kevin.Vector3 torque = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.torque_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Wrench::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Wrench*>(&to_msg);
  auto& from = static_cast<const Wrench&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.Wrench)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.force_ != nullptr);
      if (_this->_impl_.force_ == nullptr) {
        _this->_impl_.force_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.force_);
      } else {
        _this->_impl_.force_->MergeFrom(*from._impl_.force_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.torque_ != nullptr);
      if (_this->_impl_.torque_ == nullptr) {
        _this->_impl_.torque_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.torque_);
      } else {
        _this->_impl_.torque_->MergeFrom(*from._impl_.torque_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Wrench::CopyFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Wrench::InternalSwap(Wrench* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wrench, _impl_.torque_)
      + sizeof(Wrench::_impl_.torque_)
      - PROTOBUF_FIELD_OFFSET(Wrench, _impl_.force_)>(
          reinterpret_cast<char*>(&_impl_.force_),
          reinterpret_cast<char*>(&other->_impl_.force_));
}

::google::protobuf::Metadata Wrench::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WrenchStamped::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WrenchStamped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_._has_bits_);
};

void WrenchStamped::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void WrenchStamped::clear_force() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.force_ != nullptr) _impl_.force_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void WrenchStamped::clear_torque() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.torque_ != nullptr) _impl_.torque_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
WrenchStamped::WrenchStamped(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.WrenchStamped)
}
inline PROTOBUF_NDEBUG_INLINE WrenchStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::WrenchStamped& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

WrenchStamped::WrenchStamped(
    ::google::protobuf::Arena* arena,
    const WrenchStamped& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WrenchStamped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.force_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.force_)
                        : nullptr;
  _impl_.torque_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.torque_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.WrenchStamped)
}
inline PROTOBUF_NDEBUG_INLINE WrenchStamped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void WrenchStamped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, torque_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::torque_));
}
WrenchStamped::~WrenchStamped() {
  // @@protoc_insertion_point(destructor:kevin.WrenchStamped)
  SharedDtor(*this);
}
inline void WrenchStamped::SharedDtor(MessageLite& self) {
  WrenchStamped& this_ = static_cast<WrenchStamped&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.force_;
  delete this_._impl_.torque_;
  this_._impl_.~Impl_();
}

inline void* WrenchStamped::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WrenchStamped(arena);
}
constexpr auto WrenchStamped::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(WrenchStamped),
                                            alignof(WrenchStamped));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WrenchStamped::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WrenchStamped_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WrenchStamped::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WrenchStamped>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WrenchStamped::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WrenchStamped>(), &WrenchStamped::ByteSizeLong,
            &WrenchStamped::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_._cached_size_),
        false,
    },
    &WrenchStamped::kDescriptorMethods,
    &descriptor_table_wrench_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WrenchStamped::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> WrenchStamped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::WrenchStamped>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_.header_)}},
    // .kevin.Vector3 force = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_.force_)}},
    // .kevin.Vector3 torque = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_.torque_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 force = 2;
    {PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_.force_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 torque = 3;
    {PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_.torque_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WrenchStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.WrenchStamped)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.force_ != nullptr);
      _impl_.force_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.torque_ != nullptr);
      _impl_.torque_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WrenchStamped::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WrenchStamped& this_ = static_cast<const WrenchStamped&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WrenchStamped::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WrenchStamped& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.WrenchStamped)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 force = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.force_, this_._impl_.force_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 torque = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.torque_, this_._impl_.torque_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.WrenchStamped)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WrenchStamped::ByteSizeLong(const MessageLite& base) {
          const WrenchStamped& this_ = static_cast<const WrenchStamped&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WrenchStamped::ByteSizeLong() const {
          const WrenchStamped& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.WrenchStamped)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.Vector3 force = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.force_);
            }
            // .kevin.Vector3 torque = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.torque_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WrenchStamped::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WrenchStamped*>(&to_msg);
  auto& from = static_cast<const WrenchStamped&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.WrenchStamped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.force_ != nullptr);
      if (_this->_impl_.force_ == nullptr) {
        _this->_impl_.force_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.force_);
      } else {
        _this->_impl_.force_->MergeFrom(*from._impl_.force_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.torque_ != nullptr);
      if (_this->_impl_.torque_ == nullptr) {
        _this->_impl_.torque_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.torque_);
      } else {
        _this->_impl_.torque_->MergeFrom(*from._impl_.torque_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WrenchStamped::CopyFrom(const WrenchStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.WrenchStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WrenchStamped::InternalSwap(WrenchStamped* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_.torque_)
      + sizeof(WrenchStamped::_impl_.torque_)
      - PROTOBUF_FIELD_OFFSET(WrenchStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata WrenchStamped::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_wrench_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
