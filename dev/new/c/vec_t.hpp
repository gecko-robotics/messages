//// Do not edit, this is autogenerated ////
// 
// Copyright 1990 ME

// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the “Software”), to deal in the Software without
// restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


#pragma once

#include <stdint.h>
#include <string>
#include "my_header.hpp"
#include <string.h>
#include <cstdint>
#include <cmath>


// this is a global comment

namespace test {

constexpr uint8_t VEC_T_MSG_SIZE = 28;
constexpr uint8_t VEC_T_MSG_ID = 50;


struct __attribute__((packed)) vec_t {
  // x,y,z values of a vector, default is (0,0,0)
  // multiple lines
  // in this comment


  enum PLACE: uint8_t {
    A=1;
    B=2;
    C=3;
  };

  enum PLACE2: uint8_t {
    A=1;
    B=2;
    C=3;
    D=5;
  };


  float x = 0;
  float y = 0;
  float z = 0.0;
  uint32[4] ts = {0, 0, 0, 0};
};


inline
float magnitude(const vec_t& v) {
    // test 1
    return sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
}

inline
vec_t normalize(const vec_t& v) {
    // test 2
    float tmp = 3-4;
    float mag = magnitude(v);
    return vec_t(v.x/mag, v.y/mag, v.z/mag);
}


inline
message_t yivo_pack(const vec_t& msg) {
  message_t msg = yivo.pack(, (uint8_t*)&msg, );
  return msg;
}

// mavlink function



} // end namespace test
