//// Do not edit, this is autogenerated ////
//
{%- if license %} 
{{ license }}
{%- endif -%}
///////////////////////////////////////////////////////////
#pragma once

{%- if includes %}
{%- for inc in includes %}
{{ inc }}
{%- endfor %}
{% endif -%}
{%- if yivo -%}
#include <yivo.hpp>
{%- endif %}

{# {%- for com in comments %}
{{ com }}
{%- endfor %} #}

{%- if comments %}
{{ comments }}
{%- endif %}

{%- if namespace %}
namespace {{ namespace }} {
{% endif -%}

{# DEFINES ------------------------- #}
constexpr {{ type }} MSG_SIZE_{{ name|upper }} = {{ size }};
constexpr uint8_t MSG_ID_{{ name|upper }} = {{ msg_id }};

{# STRUCT ----------------------------- #}
struct __attribute__((packed)) {{ name }} {
{%- if msg_comments %}
{{ msg_comments }}
{%- endif %}
{# ENUMS ------------------------------ #}
{%- if enums %}
{%- for k, v in enums.items() %}
  enum {{ k|upper }}: {{ enums_type }} {
  {%- for name, value in v.items() %}
    {{ name }}={{ value }};
  {%- endfor %}
  };
{% endfor %}
{% endif %}

{%- for var in vars %}
  {{ var }}
{%- endfor %}
};

{% if functions %}
{{ functions }}
{% endif -%}

{%- if yivo %}
inline
message_t yivo_pack(const {{ name }}& msg) {
  message_t msg = yivo.pack({{ msg_id }}, (uint8_t*)&msg, {{size}});
  return msg;
}
{% endif -%}

{# {%- if mavlink %}
// mavlink function
{% endif -%} #}


{# static
{{ name }} {{ name }}_init(
    {%- for a in args -%}
    const {{ a[0] }} {{ a[1] }}
    {%- if loop.index != loop.length %}, {% endif -%}
    {%- endfor -%}
) {
  {{ name }} ret;

  {%- for a in args%}
  ret.{{ a[2] }} = {{ a[2] }};
  {%- endfor %}

  return ret;
} #}

{#
static
void print(const {{ name }} &val) {
    printf(
    {%- for a in args -%}
      {%-   if {{ a[0] }} == "float" -%} "%f "
      {%- elif {{ a[0] }} == "double" -%} "%lf "
      {%- elif {{ a[0] }} == "uint8_t" -%} "%zu "
      {% endif -%}
    {%- endfor -%}

    {%- for a in args -%}
    ,{{ a[1] }}
    {%- endfor -%}
    );
} #}

{%- if namespace %}
} // end namespace {{ namespace }}
{% endif %}