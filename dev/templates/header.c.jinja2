
#pragma once

#include <stdint.h>
#include <string>
{%- for inc in includes %}
{{ inc }}
{%- endfor %}

{%- for com in comments %}
{{ com }}
{%- endfor %}

namespace yivo {

{% if msg_size > 0 -%}
constexpr {{ msg_size_type }} {{ name|upper }}_MSG_SIZE = {{ msg_size }};
{% endif %}

{% if enums|length > 0 %}
{% for enum in enums %}
enum {{ name|upper }}_{{ enum.name }} {%- if enum.size %}: {{ enum.size }} {% endif %}{
{%- for val in enum.values -%}
  {{ val }} {%- if loop.index != loop.length %}, {% endif -%}
{%- endfor -%}
};
{% endfor %}
{% endif %}

{%- if template %}
template<typename T>
{%- endif %}
struct __attribute__((packed)) {{ name }}_t {
{%- for var in vars %}
  {{ var }}
{%- endfor %}

{%- if functions|length > 0 -%}
{% for line in functions %}
  {{ line }}
{%- endfor %}
{%- endif %}

};

static
{{ name }}_t {{ name }}_init(
    {%- for a in args -%}
    const {{ a[0] }} {{ a[1] }}
    {%- if loop.index != loop.length %}, {% endif -%}
    {%- endfor -%}
) {
  {{ name }}_t ret;

  {%- for a in args%}
  ret.{{ a[1] }} = {{ a[1] }};
  {%- endfor %}

  return ret;
}

static
message_t {{ name }}_pack(
    {%- for a in args -%}
    const {{ a[0] }} {{ a[1] }}
    {%- if loop.index != loop.length %}, {% endif -%}
    {%- endfor -%}
) {
  {{ name }}_t ret;

  {%- for a in args%}
  ret.{{ a[1] }} = {{ a[1] }};
  {%- endfor %}

  message_t msg;

  return msg;
}

static
void print(const {{ name }}_t &val) {
    printf(
        {#
    {%- for a in args -%}
      {%-   if {{ a[0] }} == "float" -%} "%f "
      {%- elif {{ a[0] }} == "double" -%} "%lf "
      {%- elif {{ a[0] }} == "uint8_t" -%} "%zu "
      {% endif -%}
    {%- endfor -%}

    {%- for a in args -%}
    ,{{ a[1] }}
    {%- endfor -%}
        #}
    );
}

} // end namespace