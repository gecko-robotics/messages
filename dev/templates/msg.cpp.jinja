/*
 Do not edit, this is autogenerated
 {{ license_notice }}
*/
#pragma once

#include <stdint.h>
#include <string>
{%- for inc in includes %}
{{ inc }}
{%- endfor %}

{%- for com in comments %}
{{ com }}
{%- endfor %}
{% if namespace %}
namespace {{ namespace }} {
{% endif %}

{% if msg_size > 0 -%}
constexpr {{ msg_size_type }} {{ name|upper }}_MSG_SIZE = {{ msg_size }};
{% endif %}
constexpr uint8_t {{ name|upper }}_MSG_ID = {{ msgid }};

struct __attribute__((packed)) {{ name }}_t {
{%- if enums|length > 0 %}
{%- for enum in enums %}
  enum {{ name|upper }}_{{ enum.name }} {%- if enum.size %}: {{ enum.size }} {% endif %}{
{%- for val in enum.values -%}
  {{ val }} {%- if loop.index != loop.length %}, {% endif -%}
{%- endfor -%}
};
{% endfor -%}
{% endif -%}

{%- for var in vars %}
  {{ var }}
{%- endfor %}

{%- if functions|length > 0 -%}
{% for line in functions %}
  {{ line }}
{%- endfor %}
{%- endif %}

};

{# static
{{ name }}_t {{ name }}_init(
    {%- for a in args -%}
    const {{ a[0] }} {{ a[1] }}
    {%- if loop.index != loop.length %}, {% endif -%}
    {%- endfor -%}
) {
  {{ name }}_t ret;

  {%- for a in args%}
  ret.{{ a[2] }} = {{ a[2] }};
  {%- endfor %}

  return ret;
} #}

inline
message_t {{ name }}_yivo_pack(const {{ name }}_t& msg) {
  message_t msg = yivo.pack({{ msgid }}, (uint8_t*)&msg, {{msg_size}});
  return msg;
}

{#
static
void print(const {{ name }}_t &val) {
    printf(
    {%- for a in args -%}
      {%-   if {{ a[0] }} == "float" -%} "%f "
      {%- elif {{ a[0] }} == "double" -%} "%lf "
      {%- elif {{ a[0] }} == "uint8_t" -%} "%zu "
      {% endif -%}
    {%- endfor -%}

    {%- for a in args -%}
    ,{{ a[1] }}
    {%- endfor -%}
    );
} #}

{% if namespace %}
} // end namespace
{% endif %}