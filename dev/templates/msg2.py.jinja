# Do not edit, this is autogenerated
# {{ license_notice }}
from dataclasses import dataclass
from enum import IntEnum
{% for inc in includes %}
{{ inc }}
{% endfor %}

{%- if enums|length > 0 %}
{%- for enum in enums %}
class {{ name|upper }}_{{ enum.name }}(IntEnum):
{%- for val in enum.values %}
    {{ val }} {%- if loop.index != loop.length %} {% endif %}
{%- endfor -%}
{%- endfor -%}
{% endif %}

@dataclass(frozen=True)
class {{ name }}_t(Base):
    {%- for var in vars %}
    {{ var }}
    {%- endfor %}

    def __yivo__(self):
        # (fmt, size, name, id)
        # name_t.__class__ already has name, do I need it again?
        return ("{{ format }}", {{ msg_size }}, {{ name }}_t, {{ msgid }})
