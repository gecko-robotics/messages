
from dataclasses import dataclass
from dataclasses import field
from struct import Struct
{% for inc in includes %}
{{ inc }}
{% endfor %}

@dataclass
class {{ name }}:
    {%- for var in vars %}
    {{ var }}
    {%- endfor %}
    packer: Struct = field(init=False, repr=False, default=Struct( "{{ format }}" )))

    def pack(self):
        return self.packer.pack(*self.to_list())

    def unpack(self, pkt):
        return self.packer.unpack(pkt)

    def to_list(self):
        ret = []
        for a in self.__dict__.values():
            if isinstance(a,float) or isinstance(a,int):
                ret.append(a)
            else:
                for i in a.to_list():
                    ret.append(i)
        return ret

    {#
    {%- if functions|length > 0 -%}
    {% for line in functions %}
    {{ line }}
    {%- endfor %}
    {%- endif %}

    def pack(self):
        return self.packer.pack({%- for arg in args %}self.{{ arg }}{%- if loop.index != loop.length %},{% endif -%}{%- endfor %})

    def unpack(self, pkt):
        return self.packer.unpack(pkt)

    self.to_bytes = Struct( {{format}} )
    #}