
// Constants are chosen to match the enums in the linux kernel
// defined in include/linux/power_supply.h as of version 3.7
// The one difference is for style reasons the constants are
// all uppercase not mixed case.
syntax = "proto3";

package kevin;

// import "vector3.proto";
// import "quaternion.proto";
import "standard_msgs.proto";
// import "covariance.proto";

// Power supply status constants
enum BatteryStatus {
  BATTERY_STATUS_UNKNOWN = 0;
  BATTERY_STATUS_CHARGING = 1;
  BATTERY_STATUS_DISCHARGING = 2;
  BATTERY_STATUS_NOT_CHARGING = 3;
  BATTERY_STATUS_FULL = 4;
}

// Power supply health constants
enum BatteryHealth {
  BATTERY_HEALTH_UNKNOWN = 0;
  BATTERY_HEALTH_GOOD = 1;
  BATTERY_HEALTH_OVERHEAT = 2;
  BATTERY_HEALTH_DEAD = 3;
  BATTERY_HEALTH_OVERVOLTAGE = 4;
  BATTERY_HEALTH_UNSPEC_FAILURE = 5;
  BATTERY_HEALTH_COLD = 6;
  BATTERY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7;
  BATTERY_HEALTH_SAFETY_TIMER_EXPIRE = 8;
}

// Power supply technology (chemistry) constants
enum BatteryTechnology {
  BATTERY_TECHNOLOGY_UNKNOWN = 0; // Unknown battery technology
  BATTERY_TECHNOLOGY_NIMH = 1;    // Nickel-Metal Hydride battery
  BATTERY_TECHNOLOGY_LION = 2;    // Lithium-ion battery
  BATTERY_TECHNOLOGY_LIPO = 3;    // Lithium Polymer battery
  BATTERY_TECHNOLOGY_LIFE = 4;    // Lithium Iron Phosphate battery
  BATTERY_TECHNOLOGY_NICD = 5;    // Nickel-Cadmium battery
  BATTERY_TECHNOLOGY_LIMN = 6;    // Lithium Manganese Dioxide battery
  BATTERY_TECHNOLOGY_TERNARY = 7; // Ternary Lithium battery
  BATTERY_TECHNOLOGY_VRLA = 8;    // Valve Regulated Lead-Acid battery
}

message Battery {
  kevin.Header  header = 1;
  float voltage = 2;          // Voltage in Volts (Mandatory)
  float temperature = 3;      // Temperature in Degrees Celsius (If unmeasured NaN)
  float current = 4;          // Negative when discharging (A)  (If unmeasured NaN)
  float charge = 5;           // Current charge in Ah  (If unmeasured NaN)
  float capacity = 6;         // Capacity in Ah (last full capacity)  (If unmeasured NaN)
  float design_capacity = 7;  // Capacity in Ah (design capacity)  (If unmeasured NaN)
  float percentage = 8;              // Charge percentage on 0 to 1 range  (If unmeasured NaN)
  BatteryStatus status = 9;          // The charging status as reported. Values defined above
  BatteryHealth health = 10;         // The battery health metric. Values defined above
  BatteryTechnology technology = 11; // The battery chemistry. Values defined above
  bool present = 12;                 // True if the battery is present

  repeated float cell_voltage = 13;  // An array of individual cell voltages for each cell in the pack
                                     // If individual voltages unknown but number of cells known set each to NaN
  repeated float cell_temperature = 14; // An array of individual cell temperatures for each cell in the pack
                                        // If individual temperatures unknown but number of cells known set each to NaN
  string location = 15;       // The location into which the battery is inserted. (slot number or plug)
  string serial_number = 16;  // The best approximation of the battery serial number
}