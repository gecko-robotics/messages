syntax = "proto3";

package kevin;

import "standard_msgs.proto";
import "math_msgs.proto";
import "geometry_msgs.proto";

message Image {
  // Timestamp of image
  // google.protobuf.Timestamp timestamp = 1;

  // Frame of reference for the image. The origin of the 
  // frame is the optical center of the camera. +x points 
  // to the right in the image, +y points down, and +z 
  // points into the plane of the image.
  // string frame_id = 7;
  // kevin.Header header = 1;

  // Image width
  fixed32 width = 1;

  // Image height
  fixed32 height = 2;

  // Encoding of the raw image data
  // 
  // Supported values: `8UC1`, `8UC3`, `16UC1` (little 
  // endian), `32FC1` (little endian), `bayer_bggr8`, 
  // `bayer_gbrg8`, `bayer_grbg8`, `bayer_rggb8`, `bgr8`, 
  // `bgra8`, `mono8`, `mono16`, `rgb8`, `rgba8`, `uyvy`
  // or `yuv422`, `yuyv` or `yuv422_yuy2`
  string encoding = 3;

  // Byte length of a single row
  fixed32 step = 4;

  // Raw image data
  bytes data = 5;
}

message DisparityImage {
  // Separate header for compatibility with current TimeSynchronizer.
  // Likely to be removed in a later release, use image.header instead.
  kevin.Header header = 1;

  // Floating point disparity image. The disparities are pre-adjusted for any
  // x-offset between the principal points of the two cameras (in the case
  // that they are verged). That is: d = x_l - x_r - (cx_l - cx_r)
  Image image = 2;

  // Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.
  float f = 3; // Focal length, pixels
  float t = 4; // Baseline, world units

  // Subwindow of (potentially) valid disparity values.
  // sensor_msgs/RegionOfInterest valid_window

  // The range of disparities searched.
  // In the disparity image, any disparity less than min_disparity is invalid.
  // The disparity search range defines the horopter, or 3D volume that the
  // stereo algorithm can "see". Points with Z outside of:
  //     Z_min = fT / max_disparity
  //     Z_max = fT / min_disparity
  // could not be found.
  float min_disparity = 5;
  float max_disparity = 6;

  // Smallest allowed disparity increment. The smallest achievable depth range
  // resolution is delta_Z = (Z^2/fT)*delta_d.
  float delta_d = 7;
}

message Imu {
  kevin.Header header = 1;
  kevin.Vector3 linear_acceleration = 2;  // m/s^2
  kevin.Vector3 angular_velocity = 3;  // rads/sec
}

message HighResolutionImu {
  kevin.Header header = 1;
  kevin.Vector3 linear_acceleration = 2;  // m/s^2
  kevin.Vector3 angular_velocity = 3;  // rads/sec
  kevin.Quaternion orientation = 4;
  kevin.Vector3 magnetic_field = 5;  // Tesla
  double pressure = 6; // hPa
  double temperature = 7; // C
}

message ImuInfo {
  Covariance6 accel_cov = 1;
  Covariance6 gyro_cov = 2;
  Covariance6 mag_cov = 3;
}

// Measurement of the Magnetic Field vector at a specific location.
//
// If the covariance of the measurement is known, it should be filled in.
// If all you know is the variance of each measurement, e.g. from the datasheet,
// just put those along the diagonal.
// A covariance matrix of all zeros will be interpreted as "covariance unknown",
// and to use the data a covariance will have to be assumed or gotten from some
// other source.

message MagneticField {
  kevin.Header header = 1;  // timestamp is the time the
                            // field was measured
                            // frame_id is the location and orientation
                            // of the field measurement

  kevin.Vector3 magnetic_field = 2; // x, y, and z components of the
                                    // field vector in Tesla
                                    // If your sensor does not output 3 axes,
                                    // put NaNs in the components not reported.

  Covariance6 covariance = 3; // Row major about x, y, z axes
                              // 0 is interpreted as variance unknown
}



// Single range reading from an active ranger that emits energy and reports
// one range reading that is valid along an arc at the distance measured.
// This message is  not appropriate for laser scanners. See the LaserScan
// message if you are working with a laser scanner.
//
// This message also can represent a fixed-distance (binary) ranger.  This
// sensor will have min_range===max_range===distance of detection.
// These sensors follow REP 117 and will output -Inf if the object is detected
// and +Inf if the object is outside of the detection range.

message Range {
  enum RangeType {
    // Radiation type enums
    // If you want a value added to this list, send an email to the ros-users list
    ULTRASOUND = 0;
    INFRARED = 1;
    LASER = 2;
  }

  kevin.Header header = 1;
  RangeType radiation_type = 2; // the type of radiation used by the sensor
                                // (sound, IR, etc) [enum]

  float field_of_view = 3;  // the size of the arc that the distance reading is
                            // valid for [rad]
                            // the object causing the range reading may have
                            // been anywhere within -field_of_view/2 and
                            // field_of_view/2 at the measured range.
                            // 0 angle corresponds to the x-axis of the sensor.

  float min_range = 4;  // minimum range value [m]
  float max_range = 5;  // maximum range value [m]
                        // Fixed distance rangers require min_range==max_range

  float range = 6;      // range data [m]
                        // (Note: values < range_min or > range_max should be discarded)
                        // Fixed distance rangers only output -Inf or +Inf.
                        // -Inf represents a detection within fixed distance.
                        // (Detection too close to the sensor to quantify)
                        // +Inf represents no detection within the fixed distance.
                        // (Object out of range)

  float variance = 7;   // variance of the range sensor
                        // 0 is interpreted as variance unknown
}

message Pressure {
  kevin.Header header = 1;
  double pressure = 2;  // Pa
  // double variance = 3;        // 0 is interpreted as variance unknown
}

message Temperature {
  kevin.Header header = 1;
  double temperature = 2;  // C
  // double variance = 3;        // 0 is interpreted as variance unknown
}

message PressureTemperature {
  kevin.Header header = 1;
  double pressure = 2;  // Pa
  double temperature = 3;  // C
}

message Odometry {
  // Includes the frame id of the pose parent.
  kevin.Header header = 1;

  // Frame id the pose points to. The twist is in this coordinate frame.
  string child_frame_id = 2;

  // Estimated pose that is typically relative to a fixed world frame.
  kevin.Pose pose = 3;

  // Estimated linear and angular velocity relative to child_frame_id.
  kevin.Twist twist = 4;
}


enum PositionCovariance {
  // If the covariance of the fix is known, fill it in completely. If the
  // GPS receiver provides the variance of each measurement, put them
  // along the diagonal. If only Dilution of Precision is available,
  // estimate an approximate covariance from that.

  COVARIANCE_TYPE_UNKNOWN = 0;
  COVARIANCE_TYPE_APPROXIMATED = 1;
  COVARIANCE_TYPE_DIAGONAL_KNOWN = 2;
  COVARIANCE_TYPE_KNOWN = 3;
}

// Navigation Satellite fix status for any Global Navigation Satellite System.
//
// Whether to output an augmented fix is determined by both the fix
// type and the last time differential corrections were received.  A
// fix is valid when status >= STATUS_FIX.
message SatNav {
  enum StatusFix {
    // STATUS_UNKNOWN = -2;  // status is not yet set
    // STATUS_NO_FIX =  -1;  // unable to fix position
    STATUS_FIX =      0;  // unaugmented fix
    STATUS_SBAS_FIX = 1;  // with satellite-based augmentation
    STATUS_GBAS_FIX = 2;  // with ground-based augmentation
  }

  // Bits defining which Global Navigation Satellite System signals were
  // used by the receiver.
  enum ServiceType {
    SERVICE_UNKNOWN = 0;  // Remember service is a bitfield, so checking (service & SERVICE_UNKNOWN) will not work. Use == instead.
    SERVICE_GPS =     1;
    SERVICE_GLONASS = 2;
    SERVICE_COMPASS = 4;  // includes BeiDou.
    SERVICE_GALILEO = 8;
  }

  message NavSatStatus {
    StatusFix status = 1; // STATUS_UNKNOWN
    ServiceType service = 2;
  }
  // header.stamp specifies the ROS time for this measurement (the
  //        corresponding satellite time may be reported using the
  //        sensor_msgs/TimeReference message).
  //
  // header.frame_id is the frame of reference reported by the satellite
  //        receiver, usually the location of the antenna.  This is a
  //        Euclidean frame relative to the vehicle, not a reference
  //        ellipsoid.
  kevin.Header header = 1;

  // Satellite fix status information.
  NavSatStatus status = 2;

  // Latitude [degrees]. Positive is north of equator; negative is south.
  double latitude = 3;

  // Longitude [degrees]. Positive is east of prime meridian; negative is west.
  double longitude = 4;

  // Altitude [m]. Positive is above the WGS 84 ellipsoid
  // (quiet NaN if no altitude is available).
  double altitude = 5;

  // Position covariance [m^2] defined relative to a tangential plane
  // through the reported position. The components are East, North, and
  // Up (ENU), in row-major order.
  //
  // Beware: this coordinate system exhibits singularities at the poles.
  kevin.Covariance6 position_covariance = 6;

  PositionCovariance type = 7;
}