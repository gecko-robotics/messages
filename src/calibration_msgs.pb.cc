// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: calibration_msgs.proto
// Protobuf C++ Version: 5.29.3

#include "calibration_msgs.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kevin {

inline constexpr ImuCalibration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : a_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ImuCalibration::ImuCalibration(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImuCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuCalibrationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuCalibrationDefaultTypeInternal() {}
  union {
    ImuCalibration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuCalibrationDefaultTypeInternal _ImuCalibration_default_instance_;

inline constexpr MagnetometerCalibration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        softiron_{nullptr},
        hardiron_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MagnetometerCalibration::MagnetometerCalibration(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MagnetometerCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MagnetometerCalibrationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MagnetometerCalibrationDefaultTypeInternal() {}
  union {
    MagnetometerCalibration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MagnetometerCalibrationDefaultTypeInternal _MagnetometerCalibration_default_instance_;
}  // namespace kevin
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_calibration_5fmsgs_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_calibration_5fmsgs_2eproto = nullptr;
const ::uint32_t
    TableStruct_calibration_5fmsgs_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kevin::MagnetometerCalibration, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::MagnetometerCalibration, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::MagnetometerCalibration, _impl_.softiron_),
        PROTOBUF_FIELD_OFFSET(::kevin::MagnetometerCalibration, _impl_.hardiron_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kevin::ImuCalibration, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::ImuCalibration, _impl_.a_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::kevin::MagnetometerCalibration)},
        {12, -1, -1, sizeof(::kevin::ImuCalibration)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kevin::_MagnetometerCalibration_default_instance_._instance,
    &::kevin::_ImuCalibration_default_instance_._instance,
};
const char descriptor_table_protodef_calibration_5fmsgs_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\026calibration_msgs.proto\022\005kevin\032\023standar"
    "d_msgs.proto\"]\n\027MagnetometerCalibration\022"
    " \n\010softiron\030\001 \001(\0132\016.kevin.Vector3\022 \n\010har"
    "diron\030\002 \001(\0132\016.kevin.Vector3\"\033\n\016ImuCalibr"
    "ation\022\t\n\001A\030\001 \003(\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_calibration_5fmsgs_2eproto_deps[1] =
    {
        &::descriptor_table_standard_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_calibration_5fmsgs_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_calibration_5fmsgs_2eproto = {
    false,
    false,
    184,
    descriptor_table_protodef_calibration_5fmsgs_2eproto,
    "calibration_msgs.proto",
    &descriptor_table_calibration_5fmsgs_2eproto_once,
    descriptor_table_calibration_5fmsgs_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_calibration_5fmsgs_2eproto::offsets,
    file_level_enum_descriptors_calibration_5fmsgs_2eproto,
    file_level_service_descriptors_calibration_5fmsgs_2eproto,
};
namespace kevin {
// ===================================================================

class MagnetometerCalibration::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MagnetometerCalibration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MagnetometerCalibration, _impl_._has_bits_);
};

void MagnetometerCalibration::clear_softiron() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.softiron_ != nullptr) _impl_.softiron_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MagnetometerCalibration::clear_hardiron() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hardiron_ != nullptr) _impl_.hardiron_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MagnetometerCalibration::MagnetometerCalibration(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.MagnetometerCalibration)
}
inline PROTOBUF_NDEBUG_INLINE MagnetometerCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::MagnetometerCalibration& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MagnetometerCalibration::MagnetometerCalibration(
    ::google::protobuf::Arena* arena,
    const MagnetometerCalibration& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MagnetometerCalibration* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.softiron_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.softiron_)
                        : nullptr;
  _impl_.hardiron_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.hardiron_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.MagnetometerCalibration)
}
inline PROTOBUF_NDEBUG_INLINE MagnetometerCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MagnetometerCalibration::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, softiron_),
           0,
           offsetof(Impl_, hardiron_) -
               offsetof(Impl_, softiron_) +
               sizeof(Impl_::hardiron_));
}
MagnetometerCalibration::~MagnetometerCalibration() {
  // @@protoc_insertion_point(destructor:kevin.MagnetometerCalibration)
  SharedDtor(*this);
}
inline void MagnetometerCalibration::SharedDtor(MessageLite& self) {
  MagnetometerCalibration& this_ = static_cast<MagnetometerCalibration&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.softiron_;
  delete this_._impl_.hardiron_;
  this_._impl_.~Impl_();
}

inline void* MagnetometerCalibration::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MagnetometerCalibration(arena);
}
constexpr auto MagnetometerCalibration::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MagnetometerCalibration),
                                            alignof(MagnetometerCalibration));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MagnetometerCalibration::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MagnetometerCalibration_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MagnetometerCalibration::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MagnetometerCalibration>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MagnetometerCalibration::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MagnetometerCalibration>(), &MagnetometerCalibration::ByteSizeLong,
            &MagnetometerCalibration::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MagnetometerCalibration, _impl_._cached_size_),
        false,
    },
    &MagnetometerCalibration::kDescriptorMethods,
    &descriptor_table_calibration_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MagnetometerCalibration::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> MagnetometerCalibration::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MagnetometerCalibration, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::MagnetometerCalibration>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kevin.Vector3 hardiron = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MagnetometerCalibration, _impl_.hardiron_)}},
    // .kevin.Vector3 softiron = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MagnetometerCalibration, _impl_.softiron_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Vector3 softiron = 1;
    {PROTOBUF_FIELD_OFFSET(MagnetometerCalibration, _impl_.softiron_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 hardiron = 2;
    {PROTOBUF_FIELD_OFFSET(MagnetometerCalibration, _impl_.hardiron_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MagnetometerCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.MagnetometerCalibration)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.softiron_ != nullptr);
      _impl_.softiron_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.hardiron_ != nullptr);
      _impl_.hardiron_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MagnetometerCalibration::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MagnetometerCalibration& this_ = static_cast<const MagnetometerCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MagnetometerCalibration::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MagnetometerCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.MagnetometerCalibration)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Vector3 softiron = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.softiron_, this_._impl_.softiron_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 hardiron = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.hardiron_, this_._impl_.hardiron_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.MagnetometerCalibration)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MagnetometerCalibration::ByteSizeLong(const MessageLite& base) {
          const MagnetometerCalibration& this_ = static_cast<const MagnetometerCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MagnetometerCalibration::ByteSizeLong() const {
          const MagnetometerCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.MagnetometerCalibration)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kevin.Vector3 softiron = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.softiron_);
            }
            // .kevin.Vector3 hardiron = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hardiron_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MagnetometerCalibration::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MagnetometerCalibration*>(&to_msg);
  auto& from = static_cast<const MagnetometerCalibration&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.MagnetometerCalibration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.softiron_ != nullptr);
      if (_this->_impl_.softiron_ == nullptr) {
        _this->_impl_.softiron_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.softiron_);
      } else {
        _this->_impl_.softiron_->MergeFrom(*from._impl_.softiron_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.hardiron_ != nullptr);
      if (_this->_impl_.hardiron_ == nullptr) {
        _this->_impl_.hardiron_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.hardiron_);
      } else {
        _this->_impl_.hardiron_->MergeFrom(*from._impl_.hardiron_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MagnetometerCalibration::CopyFrom(const MagnetometerCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.MagnetometerCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MagnetometerCalibration::InternalSwap(MagnetometerCalibration* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagnetometerCalibration, _impl_.hardiron_)
      + sizeof(MagnetometerCalibration::_impl_.hardiron_)
      - PROTOBUF_FIELD_OFFSET(MagnetometerCalibration, _impl_.softiron_)>(
          reinterpret_cast<char*>(&_impl_.softiron_),
          reinterpret_cast<char*>(&other->_impl_.softiron_));
}

::google::protobuf::Metadata MagnetometerCalibration::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ImuCalibration::_Internal {
 public:
};

ImuCalibration::ImuCalibration(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.ImuCalibration)
}
inline PROTOBUF_NDEBUG_INLINE ImuCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::ImuCalibration& from_msg)
      : a_{visibility, arena, from.a_},
        _cached_size_{0} {}

ImuCalibration::ImuCalibration(
    ::google::protobuf::Arena* arena,
    const ImuCalibration& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ImuCalibration* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kevin.ImuCalibration)
}
inline PROTOBUF_NDEBUG_INLINE ImuCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : a_{visibility, arena},
        _cached_size_{0} {}

inline void ImuCalibration::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ImuCalibration::~ImuCalibration() {
  // @@protoc_insertion_point(destructor:kevin.ImuCalibration)
  SharedDtor(*this);
}
inline void ImuCalibration::SharedDtor(MessageLite& self) {
  ImuCalibration& this_ = static_cast<ImuCalibration&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ImuCalibration::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ImuCalibration(arena);
}
constexpr auto ImuCalibration::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ImuCalibration, _impl_.a_) +
          decltype(ImuCalibration::_impl_.a_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ImuCalibration), alignof(ImuCalibration), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ImuCalibration::PlacementNew_,
                                 sizeof(ImuCalibration),
                                 alignof(ImuCalibration));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ImuCalibration::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ImuCalibration_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ImuCalibration::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ImuCalibration>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ImuCalibration::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ImuCalibration>(), &ImuCalibration::ByteSizeLong,
            &ImuCalibration::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ImuCalibration, _impl_._cached_size_),
        false,
    },
    &ImuCalibration::kDescriptorMethods,
    &descriptor_table_calibration_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ImuCalibration::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ImuCalibration::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::ImuCalibration>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated double A = 1;
    {::_pbi::TcParser::FastF64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ImuCalibration, _impl_.a_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double A = 1;
    {PROTOBUF_FIELD_OFFSET(ImuCalibration, _impl_.a_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ImuCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.ImuCalibration)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.a_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ImuCalibration::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ImuCalibration& this_ = static_cast<const ImuCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ImuCalibration::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ImuCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.ImuCalibration)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated double A = 1;
          if (this_._internal_a_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_a(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.ImuCalibration)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ImuCalibration::ByteSizeLong(const MessageLite& base) {
          const ImuCalibration& this_ = static_cast<const ImuCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ImuCalibration::ByteSizeLong() const {
          const ImuCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.ImuCalibration)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double A = 1;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_a_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ImuCalibration::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ImuCalibration*>(&to_msg);
  auto& from = static_cast<const ImuCalibration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.ImuCalibration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_a()->MergeFrom(from._internal_a());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImuCalibration::CopyFrom(const ImuCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.ImuCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ImuCalibration::InternalSwap(ImuCalibration* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.a_.InternalSwap(&other->_impl_.a_);
}

::google::protobuf::Metadata ImuCalibration::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_calibration_5fmsgs_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
