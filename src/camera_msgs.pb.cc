// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: camera_msgs.proto
// Protobuf C++ Version: 5.29.3

#include "camera_msgs.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kevin {

inline constexpr ImageRaw::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        encoding_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        header_{nullptr},
        width_{0u},
        height_{0u},
        step_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR ImageRaw::ImageRaw(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImageRawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageRawDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageRawDefaultTypeInternal() {}
  union {
    ImageRaw _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageRawDefaultTypeInternal _ImageRaw_default_instance_;

inline constexpr ImageCompressed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        format_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        heading_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ImageCompressed::ImageCompressed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImageCompressedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageCompressedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageCompressedDefaultTypeInternal() {}
  union {
    ImageCompressed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageCompressedDefaultTypeInternal _ImageCompressed_default_instance_;

inline constexpr CameraCalibration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        d_{},
        k_{},
        r_{},
        p_{},
        distortion_model_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        header_{nullptr},
        width_{0u},
        height_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CameraCalibration::CameraCalibration(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CameraCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraCalibrationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraCalibrationDefaultTypeInternal() {}
  union {
    CameraCalibration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraCalibrationDefaultTypeInternal _CameraCalibration_default_instance_;

inline constexpr DisparityImage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        image_{nullptr},
        f_{0},
        t_{0},
        min_disparity_{0},
        max_disparity_{0},
        delta_d_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DisparityImage::DisparityImage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DisparityImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisparityImageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisparityImageDefaultTypeInternal() {}
  union {
    DisparityImage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisparityImageDefaultTypeInternal _DisparityImage_default_instance_;
}  // namespace kevin
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_camera_5fmsgs_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_camera_5fmsgs_2eproto = nullptr;
const ::uint32_t
    TableStruct_camera_5fmsgs_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kevin::ImageCompressed, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImageCompressed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::ImageCompressed, _impl_.heading_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImageCompressed, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImageCompressed, _impl_.format_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kevin::ImageRaw, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImageRaw, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::ImageRaw, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImageRaw, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImageRaw, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImageRaw, _impl_.encoding_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImageRaw, _impl_.step_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImageRaw, _impl_.data_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _impl_.distortion_model_),
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _impl_.d_),
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _impl_.k_),
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _impl_.r_),
        PROTOBUF_FIELD_OFFSET(::kevin::CameraCalibration, _impl_.p_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.image_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.f_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.t_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.min_disparity_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.max_disparity_),
        PROTOBUF_FIELD_OFFSET(::kevin::DisparityImage, _impl_.delta_d_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::kevin::ImageCompressed)},
        {14, 28, -1, sizeof(::kevin::ImageRaw)},
        {34, 50, -1, sizeof(::kevin::CameraCalibration)},
        {58, 73, -1, sizeof(::kevin::DisparityImage)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kevin::_ImageCompressed_default_instance_._instance,
    &::kevin::_ImageRaw_default_instance_._instance,
    &::kevin::_CameraCalibration_default_instance_._instance,
    &::kevin::_DisparityImage_default_instance_._instance,
};
const char descriptor_table_protodef_camera_5fmsgs_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021camera_msgs.proto\022\005kevin\032\023standard_msg"
    "s.proto\"O\n\017ImageCompressed\022\036\n\007heading\030\001 "
    "\001(\0132\r.kevin.Header\022\014\n\004data\030\002 \001(\014\022\016\n\006form"
    "at\030\003 \001(\t\"v\n\010ImageRaw\022\035\n\006header\030\001 \001(\0132\r.k"
    "evin.Header\022\r\n\005width\030\002 \001(\007\022\016\n\006height\030\003 \001"
    "(\007\022\020\n\010encoding\030\004 \001(\t\022\014\n\004step\030\005 \001(\007\022\014\n\004da"
    "ta\030\006 \001(\014\"\227\001\n\021CameraCalibration\022\035\n\006header"
    "\030\001 \001(\0132\r.kevin.Header\022\r\n\005width\030\002 \001(\007\022\016\n\006"
    "height\030\003 \001(\007\022\030\n\020distortion_model\030\004 \001(\t\022\t"
    "\n\001D\030\005 \003(\001\022\t\n\001K\030\006 \003(\001\022\t\n\001R\030\007 \003(\001\022\t\n\001P\030\010 \003"
    "(\001\"\244\001\n\016DisparityImage\022\035\n\006header\030\001 \001(\0132\r."
    "kevin.Header\022\036\n\005image\030\002 \001(\0132\017.kevin.Imag"
    "eRaw\022\t\n\001f\030\003 \001(\002\022\t\n\001t\030\004 \001(\002\022\025\n\rmin_dispar"
    "ity\030\005 \001(\002\022\025\n\rmax_disparity\030\006 \001(\002\022\017\n\007delt"
    "a_d\030\007 \001(\002b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_camera_5fmsgs_2eproto_deps[1] =
    {
        &::descriptor_table_standard_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_camera_5fmsgs_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_camera_5fmsgs_2eproto = {
    false,
    false,
    577,
    descriptor_table_protodef_camera_5fmsgs_2eproto,
    "camera_msgs.proto",
    &descriptor_table_camera_5fmsgs_2eproto_once,
    descriptor_table_camera_5fmsgs_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_camera_5fmsgs_2eproto::offsets,
    file_level_enum_descriptors_camera_5fmsgs_2eproto,
    file_level_service_descriptors_camera_5fmsgs_2eproto,
};
namespace kevin {
// ===================================================================

class ImageCompressed::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ImageCompressed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ImageCompressed, _impl_._has_bits_);
};

void ImageCompressed::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.heading_ != nullptr) _impl_.heading_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ImageCompressed::ImageCompressed(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.ImageCompressed)
}
inline PROTOBUF_NDEBUG_INLINE ImageCompressed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::ImageCompressed& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_(arena, from.data_),
        format_(arena, from.format_) {}

ImageCompressed::ImageCompressed(
    ::google::protobuf::Arena* arena,
    const ImageCompressed& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ImageCompressed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.heading_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.heading_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.ImageCompressed)
}
inline PROTOBUF_NDEBUG_INLINE ImageCompressed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        data_(arena),
        format_(arena) {}

inline void ImageCompressed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.heading_ = {};
}
ImageCompressed::~ImageCompressed() {
  // @@protoc_insertion_point(destructor:kevin.ImageCompressed)
  SharedDtor(*this);
}
inline void ImageCompressed::SharedDtor(MessageLite& self) {
  ImageCompressed& this_ = static_cast<ImageCompressed&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.data_.Destroy();
  this_._impl_.format_.Destroy();
  delete this_._impl_.heading_;
  this_._impl_.~Impl_();
}

inline void* ImageCompressed::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ImageCompressed(arena);
}
constexpr auto ImageCompressed::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ImageCompressed),
                                            alignof(ImageCompressed));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ImageCompressed::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ImageCompressed_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ImageCompressed::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ImageCompressed>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ImageCompressed::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ImageCompressed>(), &ImageCompressed::ByteSizeLong,
            &ImageCompressed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ImageCompressed, _impl_._cached_size_),
        false,
    },
    &ImageCompressed::kDescriptorMethods,
    &descriptor_table_camera_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ImageCompressed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 36, 2> ImageCompressed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImageCompressed, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::ImageCompressed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header heading = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ImageCompressed, _impl_.heading_)}},
    // bytes data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ImageCompressed, _impl_.data_)}},
    // string format = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ImageCompressed, _impl_.format_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header heading = 1;
    {PROTOBUF_FIELD_OFFSET(ImageCompressed, _impl_.heading_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes data = 2;
    {PROTOBUF_FIELD_OFFSET(ImageCompressed, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string format = 3;
    {PROTOBUF_FIELD_OFFSET(ImageCompressed, _impl_.format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
  }}, {{
    "\25\0\0\6\0\0\0\0"
    "kevin.ImageCompressed"
    "format"
  }},
};

PROTOBUF_NOINLINE void ImageCompressed::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.ImageCompressed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.format_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.heading_ != nullptr);
    _impl_.heading_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ImageCompressed::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ImageCompressed& this_ = static_cast<const ImageCompressed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ImageCompressed::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ImageCompressed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.ImageCompressed)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header heading = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.heading_, this_._impl_.heading_->GetCachedSize(), target,
                stream);
          }

          // bytes data = 2;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          // string format = 3;
          if (!this_._internal_format().empty()) {
            const std::string& _s = this_._internal_format();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kevin.ImageCompressed.format");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.ImageCompressed)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ImageCompressed::ByteSizeLong(const MessageLite& base) {
          const ImageCompressed& this_ = static_cast<const ImageCompressed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ImageCompressed::ByteSizeLong() const {
          const ImageCompressed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.ImageCompressed)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes data = 2;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
            // string format = 3;
            if (!this_._internal_format().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_format());
            }
          }
           {
            // .kevin.Header heading = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.heading_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ImageCompressed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ImageCompressed*>(&to_msg);
  auto& from = static_cast<const ImageCompressed&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.ImageCompressed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.heading_ != nullptr);
    if (_this->_impl_.heading_ == nullptr) {
      _this->_impl_.heading_ =
          ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.heading_);
    } else {
      _this->_impl_.heading_->MergeFrom(*from._impl_.heading_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImageCompressed::CopyFrom(const ImageCompressed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.ImageCompressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ImageCompressed::InternalSwap(ImageCompressed* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_, &other->_impl_.format_, arena);
  swap(_impl_.heading_, other->_impl_.heading_);
}

::google::protobuf::Metadata ImageCompressed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ImageRaw::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ImageRaw>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_._has_bits_);
};

void ImageRaw::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ImageRaw::ImageRaw(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.ImageRaw)
}
inline PROTOBUF_NDEBUG_INLINE ImageRaw::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::ImageRaw& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        encoding_(arena, from.encoding_),
        data_(arena, from.data_) {}

ImageRaw::ImageRaw(
    ::google::protobuf::Arena* arena,
    const ImageRaw& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ImageRaw* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, step_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::step_));

  // @@protoc_insertion_point(copy_constructor:kevin.ImageRaw)
}
inline PROTOBUF_NDEBUG_INLINE ImageRaw::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        encoding_(arena),
        data_(arena) {}

inline void ImageRaw::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, step_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::step_));
}
ImageRaw::~ImageRaw() {
  // @@protoc_insertion_point(destructor:kevin.ImageRaw)
  SharedDtor(*this);
}
inline void ImageRaw::SharedDtor(MessageLite& self) {
  ImageRaw& this_ = static_cast<ImageRaw&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encoding_.Destroy();
  this_._impl_.data_.Destroy();
  delete this_._impl_.header_;
  this_._impl_.~Impl_();
}

inline void* ImageRaw::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ImageRaw(arena);
}
constexpr auto ImageRaw::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ImageRaw),
                                            alignof(ImageRaw));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ImageRaw::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ImageRaw_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ImageRaw::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ImageRaw>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ImageRaw::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ImageRaw>(), &ImageRaw::ByteSizeLong,
            &ImageRaw::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_._cached_size_),
        false,
    },
    &ImageRaw::kDescriptorMethods,
    &descriptor_table_camera_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ImageRaw::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 31, 2> ImageRaw::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::ImageRaw>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.header_)}},
    // fixed32 width = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.width_)}},
    // fixed32 height = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.height_)}},
    // string encoding = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.encoding_)}},
    // fixed32 step = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.step_)}},
    // bytes data = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.data_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // fixed32 width = 2;
    {PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // fixed32 height = 3;
    {PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // string encoding = 4;
    {PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.encoding_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // fixed32 step = 5;
    {PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // bytes data = 6;
    {PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
  }}, {{
    "\16\0\0\0\10\0\0\0"
    "kevin.ImageRaw"
    "encoding"
  }},
};

PROTOBUF_NOINLINE void ImageRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.ImageRaw)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoding_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.step_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.step_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ImageRaw::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ImageRaw& this_ = static_cast<const ImageRaw&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ImageRaw::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ImageRaw& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.ImageRaw)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // fixed32 width = 2;
          if (this_._internal_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                2, this_._internal_width(), target);
          }

          // fixed32 height = 3;
          if (this_._internal_height() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                3, this_._internal_height(), target);
          }

          // string encoding = 4;
          if (!this_._internal_encoding().empty()) {
            const std::string& _s = this_._internal_encoding();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kevin.ImageRaw.encoding");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // fixed32 step = 5;
          if (this_._internal_step() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                5, this_._internal_step(), target);
          }

          // bytes data = 6;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.ImageRaw)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ImageRaw::ByteSizeLong(const MessageLite& base) {
          const ImageRaw& this_ = static_cast<const ImageRaw&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ImageRaw::ByteSizeLong() const {
          const ImageRaw& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.ImageRaw)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string encoding = 4;
            if (!this_._internal_encoding().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_encoding());
            }
            // bytes data = 6;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
          }
           {
            // .kevin.Header header = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
          }
           {
            // fixed32 width = 2;
            if (this_._internal_width() != 0) {
              total_size += 5;
            }
            // fixed32 height = 3;
            if (this_._internal_height() != 0) {
              total_size += 5;
            }
            // fixed32 step = 5;
            if (this_._internal_step() != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ImageRaw::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ImageRaw*>(&to_msg);
  auto& from = static_cast<const ImageRaw&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.ImageRaw)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoding().empty()) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.header_ != nullptr);
    if (_this->_impl_.header_ == nullptr) {
      _this->_impl_.header_ =
          ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
    } else {
      _this->_impl_.header_->MergeFrom(*from._impl_.header_);
    }
  }
  if (from._internal_width() != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_step() != 0) {
    _this->_impl_.step_ = from._impl_.step_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImageRaw::CopyFrom(const ImageRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.ImageRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ImageRaw::InternalSwap(ImageRaw* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encoding_, &other->_impl_.encoding_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.step_)
      + sizeof(ImageRaw::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(ImageRaw, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata ImageRaw::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CameraCalibration::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CameraCalibration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_._has_bits_);
};

void CameraCalibration::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CameraCalibration::CameraCalibration(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.CameraCalibration)
}
inline PROTOBUF_NDEBUG_INLINE CameraCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::CameraCalibration& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        d_{visibility, arena, from.d_},
        k_{visibility, arena, from.k_},
        r_{visibility, arena, from.r_},
        p_{visibility, arena, from.p_},
        distortion_model_(arena, from.distortion_model_) {}

CameraCalibration::CameraCalibration(
    ::google::protobuf::Arena* arena,
    const CameraCalibration& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CameraCalibration* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:kevin.CameraCalibration)
}
inline PROTOBUF_NDEBUG_INLINE CameraCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        d_{visibility, arena},
        k_{visibility, arena},
        r_{visibility, arena},
        p_{visibility, arena},
        distortion_model_(arena) {}

inline void CameraCalibration::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::height_));
}
CameraCalibration::~CameraCalibration() {
  // @@protoc_insertion_point(destructor:kevin.CameraCalibration)
  SharedDtor(*this);
}
inline void CameraCalibration::SharedDtor(MessageLite& self) {
  CameraCalibration& this_ = static_cast<CameraCalibration&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.distortion_model_.Destroy();
  delete this_._impl_.header_;
  this_._impl_.~Impl_();
}

inline void* CameraCalibration::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CameraCalibration(arena);
}
constexpr auto CameraCalibration::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.d_) +
          decltype(CameraCalibration::_impl_.d_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.k_) +
          decltype(CameraCalibration::_impl_.k_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.r_) +
          decltype(CameraCalibration::_impl_.r_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.p_) +
          decltype(CameraCalibration::_impl_.p_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CameraCalibration), alignof(CameraCalibration), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CameraCalibration::PlacementNew_,
                                 sizeof(CameraCalibration),
                                 alignof(CameraCalibration));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CameraCalibration::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CameraCalibration_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CameraCalibration::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CameraCalibration>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CameraCalibration::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CameraCalibration>(), &CameraCalibration::ByteSizeLong,
            &CameraCalibration::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_._cached_size_),
        false,
    },
    &CameraCalibration::kDescriptorMethods,
    &descriptor_table_camera_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CameraCalibration::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 56, 2> CameraCalibration::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::CameraCalibration>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated double P = 8;
    {::_pbi::TcParser::FastF64P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.p_)}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.header_)}},
    // fixed32 width = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.width_)}},
    // fixed32 height = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.height_)}},
    // string distortion_model = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.distortion_model_)}},
    // repeated double D = 5;
    {::_pbi::TcParser::FastF64P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.d_)}},
    // repeated double K = 6;
    {::_pbi::TcParser::FastF64P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.k_)}},
    // repeated double R = 7;
    {::_pbi::TcParser::FastF64P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.r_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // fixed32 width = 2;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // fixed32 height = 3;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // string distortion_model = 4;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.distortion_model_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated double D = 5;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.d_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double K = 6;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.k_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double R = 7;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.r_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double P = 8;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.p_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
  }}, {{
    "\27\0\0\0\20\0\0\0\0\0\0\0\0\0\0\0"
    "kevin.CameraCalibration"
    "distortion_model"
  }},
};

PROTOBUF_NOINLINE void CameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.CameraCalibration)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.d_.Clear();
  _impl_.k_.Clear();
  _impl_.r_.Clear();
  _impl_.p_.Clear();
  _impl_.distortion_model_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CameraCalibration::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CameraCalibration& this_ = static_cast<const CameraCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CameraCalibration::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CameraCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.CameraCalibration)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // fixed32 width = 2;
          if (this_._internal_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                2, this_._internal_width(), target);
          }

          // fixed32 height = 3;
          if (this_._internal_height() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                3, this_._internal_height(), target);
          }

          // string distortion_model = 4;
          if (!this_._internal_distortion_model().empty()) {
            const std::string& _s = this_._internal_distortion_model();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kevin.CameraCalibration.distortion_model");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // repeated double D = 5;
          if (this_._internal_d_size() > 0) {
            target = stream->WriteFixedPacked(5, this_._internal_d(), target);
          }

          // repeated double K = 6;
          if (this_._internal_k_size() > 0) {
            target = stream->WriteFixedPacked(6, this_._internal_k(), target);
          }

          // repeated double R = 7;
          if (this_._internal_r_size() > 0) {
            target = stream->WriteFixedPacked(7, this_._internal_r(), target);
          }

          // repeated double P = 8;
          if (this_._internal_p_size() > 0) {
            target = stream->WriteFixedPacked(8, this_._internal_p(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.CameraCalibration)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CameraCalibration::ByteSizeLong(const MessageLite& base) {
          const CameraCalibration& this_ = static_cast<const CameraCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CameraCalibration::ByteSizeLong() const {
          const CameraCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.CameraCalibration)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double D = 5;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_d_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double K = 6;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_k_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double R = 7;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_r_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double P = 8;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_p_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // string distortion_model = 4;
            if (!this_._internal_distortion_model().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_distortion_model());
            }
          }
           {
            // .kevin.Header header = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
          }
           {
            // fixed32 width = 2;
            if (this_._internal_width() != 0) {
              total_size += 5;
            }
            // fixed32 height = 3;
            if (this_._internal_height() != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CameraCalibration::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CameraCalibration*>(&to_msg);
  auto& from = static_cast<const CameraCalibration&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.CameraCalibration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_d()->MergeFrom(from._internal_d());
  _this->_internal_mutable_k()->MergeFrom(from._internal_k());
  _this->_internal_mutable_r()->MergeFrom(from._internal_r());
  _this->_internal_mutable_p()->MergeFrom(from._internal_p());
  if (!from._internal_distortion_model().empty()) {
    _this->_internal_set_distortion_model(from._internal_distortion_model());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.header_ != nullptr);
    if (_this->_impl_.header_ == nullptr) {
      _this->_impl_.header_ =
          ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
    } else {
      _this->_impl_.header_->MergeFrom(*from._impl_.header_);
    }
  }
  if (from._internal_width() != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CameraCalibration::CopyFrom(const CameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.CameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CameraCalibration::InternalSwap(CameraCalibration* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.d_.InternalSwap(&other->_impl_.d_);
  _impl_.k_.InternalSwap(&other->_impl_.k_);
  _impl_.r_.InternalSwap(&other->_impl_.r_);
  _impl_.p_.InternalSwap(&other->_impl_.p_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.distortion_model_, &other->_impl_.distortion_model_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.height_)
      + sizeof(CameraCalibration::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata CameraCalibration::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DisparityImage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DisparityImage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_._has_bits_);
};

void DisparityImage::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DisparityImage::DisparityImage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.DisparityImage)
}
inline PROTOBUF_NDEBUG_INLINE DisparityImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::DisparityImage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DisparityImage::DisparityImage(
    ::google::protobuf::Arena* arena,
    const DisparityImage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DisparityImage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.image_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::ImageRaw>(
                              arena, *from._impl_.image_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, f_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, f_),
           offsetof(Impl_, delta_d_) -
               offsetof(Impl_, f_) +
               sizeof(Impl_::delta_d_));

  // @@protoc_insertion_point(copy_constructor:kevin.DisparityImage)
}
inline PROTOBUF_NDEBUG_INLINE DisparityImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DisparityImage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, delta_d_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::delta_d_));
}
DisparityImage::~DisparityImage() {
  // @@protoc_insertion_point(destructor:kevin.DisparityImage)
  SharedDtor(*this);
}
inline void DisparityImage::SharedDtor(MessageLite& self) {
  DisparityImage& this_ = static_cast<DisparityImage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.image_;
  this_._impl_.~Impl_();
}

inline void* DisparityImage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DisparityImage(arena);
}
constexpr auto DisparityImage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DisparityImage),
                                            alignof(DisparityImage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DisparityImage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DisparityImage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DisparityImage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DisparityImage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DisparityImage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DisparityImage>(), &DisparityImage::ByteSizeLong,
            &DisparityImage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_._cached_size_),
        false,
    },
    &DisparityImage::kDescriptorMethods,
    &descriptor_table_camera_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DisparityImage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> DisparityImage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::DisparityImage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.header_)}},
    // .kevin.ImageRaw image = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.image_)}},
    // float f = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.f_)}},
    // float t = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.t_)}},
    // float min_disparity = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.min_disparity_)}},
    // float max_disparity = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.max_disparity_)}},
    // float delta_d = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.delta_d_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.ImageRaw image = 2;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.image_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float f = 3;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.f_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float t = 4;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.t_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_disparity = 5;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.min_disparity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_disparity = 6;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.max_disparity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float delta_d = 7;
    {PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.delta_d_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::ImageRaw>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DisparityImage::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.DisparityImage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
  }
  ::memset(&_impl_.f_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delta_d_) -
      reinterpret_cast<char*>(&_impl_.f_)) + sizeof(_impl_.delta_d_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DisparityImage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DisparityImage& this_ = static_cast<const DisparityImage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DisparityImage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DisparityImage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.DisparityImage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.ImageRaw image = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.image_, this_._impl_.image_->GetCachedSize(), target,
                stream);
          }

          // float f = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_f()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_f(), target);
          }

          // float t = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_t()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_t(), target);
          }

          // float min_disparity = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_disparity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_min_disparity(), target);
          }

          // float max_disparity = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_disparity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_max_disparity(), target);
          }

          // float delta_d = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_delta_d()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_delta_d(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.DisparityImage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DisparityImage::ByteSizeLong(const MessageLite& base) {
          const DisparityImage& this_ = static_cast<const DisparityImage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DisparityImage::ByteSizeLong() const {
          const DisparityImage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.DisparityImage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.ImageRaw image = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.image_);
            }
          }
           {
            // float f = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_f()) != 0) {
              total_size += 5;
            }
            // float t = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_t()) != 0) {
              total_size += 5;
            }
            // float min_disparity = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_disparity()) != 0) {
              total_size += 5;
            }
            // float max_disparity = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_disparity()) != 0) {
              total_size += 5;
            }
            // float delta_d = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_delta_d()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DisparityImage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DisparityImage*>(&to_msg);
  auto& from = static_cast<const DisparityImage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.DisparityImage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.image_ != nullptr);
      if (_this->_impl_.image_ == nullptr) {
        _this->_impl_.image_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::ImageRaw>(arena, *from._impl_.image_);
      } else {
        _this->_impl_.image_->MergeFrom(*from._impl_.image_);
      }
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_f()) != 0) {
    _this->_impl_.f_ = from._impl_.f_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_t()) != 0) {
    _this->_impl_.t_ = from._impl_.t_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_disparity()) != 0) {
    _this->_impl_.min_disparity_ = from._impl_.min_disparity_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_disparity()) != 0) {
    _this->_impl_.max_disparity_ = from._impl_.max_disparity_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_delta_d()) != 0) {
    _this->_impl_.delta_d_ = from._impl_.delta_d_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DisparityImage::CopyFrom(const DisparityImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.DisparityImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DisparityImage::InternalSwap(DisparityImage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.delta_d_)
      + sizeof(DisparityImage::_impl_.delta_d_)
      - PROTOBUF_FIELD_OFFSET(DisparityImage, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata DisparityImage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_camera_5fmsgs_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
