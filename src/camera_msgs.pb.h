// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: camera_msgs.proto
// Protobuf C++ Version: 5.29.3

#ifndef camera_5fmsgs_2eproto_2epb_2eh
#define camera_5fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "standard_msgs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_camera_5fmsgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_camera_5fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_camera_5fmsgs_2eproto;
namespace kevin {
class CameraCalibration;
struct CameraCalibrationDefaultTypeInternal;
extern CameraCalibrationDefaultTypeInternal _CameraCalibration_default_instance_;
class DisparityImage;
struct DisparityImageDefaultTypeInternal;
extern DisparityImageDefaultTypeInternal _DisparityImage_default_instance_;
class ImageCompressed;
struct ImageCompressedDefaultTypeInternal;
extern ImageCompressedDefaultTypeInternal _ImageCompressed_default_instance_;
class ImageRaw;
struct ImageRawDefaultTypeInternal;
extern ImageRawDefaultTypeInternal _ImageRaw_default_instance_;
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kevin {

// ===================================================================


// -------------------------------------------------------------------

class ImageRaw final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.ImageRaw) */ {
 public:
  inline ImageRaw() : ImageRaw(nullptr) {}
  ~ImageRaw() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ImageRaw* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ImageRaw));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ImageRaw(
      ::google::protobuf::internal::ConstantInitialized);

  inline ImageRaw(const ImageRaw& from) : ImageRaw(nullptr, from) {}
  inline ImageRaw(ImageRaw&& from) noexcept
      : ImageRaw(nullptr, std::move(from)) {}
  inline ImageRaw& operator=(const ImageRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageRaw& operator=(ImageRaw&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageRaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageRaw* internal_default_instance() {
    return reinterpret_cast<const ImageRaw*>(
        &_ImageRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ImageRaw& a, ImageRaw& b) { a.Swap(&b); }
  inline void Swap(ImageRaw* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageRaw* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageRaw* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ImageRaw>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageRaw& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ImageRaw& from) { ImageRaw::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ImageRaw* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.ImageRaw"; }

 protected:
  explicit ImageRaw(::google::protobuf::Arena* arena);
  ImageRaw(::google::protobuf::Arena* arena, const ImageRaw& from);
  ImageRaw(::google::protobuf::Arena* arena, ImageRaw&& from) noexcept
      : ImageRaw(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEncodingFieldNumber = 4,
    kDataFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kStepFieldNumber = 5,
  };
  // string encoding = 4;
  void clear_encoding() ;
  const std::string& encoding() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encoding(Arg_&& arg, Args_... args);
  std::string* mutable_encoding();
  PROTOBUF_NODISCARD std::string* release_encoding();
  void set_allocated_encoding(std::string* value);

  private:
  const std::string& _internal_encoding() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoding(
      const std::string& value);
  std::string* _internal_mutable_encoding();

  public:
  // bytes data = 6;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // fixed32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // fixed32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // fixed32 step = 5;
  void clear_step() ;
  ::uint32_t step() const;
  void set_step(::uint32_t value);

  private:
  ::uint32_t _internal_step() const;
  void _internal_set_step(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.ImageRaw)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ImageRaw& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr encoding_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::kevin::Header* header_;
    ::uint32_t width_;
    ::uint32_t height_;
    ::uint32_t step_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ImageCompressed final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.ImageCompressed) */ {
 public:
  inline ImageCompressed() : ImageCompressed(nullptr) {}
  ~ImageCompressed() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ImageCompressed* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ImageCompressed));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ImageCompressed(
      ::google::protobuf::internal::ConstantInitialized);

  inline ImageCompressed(const ImageCompressed& from) : ImageCompressed(nullptr, from) {}
  inline ImageCompressed(ImageCompressed&& from) noexcept
      : ImageCompressed(nullptr, std::move(from)) {}
  inline ImageCompressed& operator=(const ImageCompressed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageCompressed& operator=(ImageCompressed&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageCompressed& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageCompressed* internal_default_instance() {
    return reinterpret_cast<const ImageCompressed*>(
        &_ImageCompressed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ImageCompressed& a, ImageCompressed& b) { a.Swap(&b); }
  inline void Swap(ImageCompressed* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageCompressed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageCompressed* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ImageCompressed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageCompressed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ImageCompressed& from) { ImageCompressed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ImageCompressed* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.ImageCompressed"; }

 protected:
  explicit ImageCompressed(::google::protobuf::Arena* arena);
  ImageCompressed(::google::protobuf::Arena* arena, const ImageCompressed& from);
  ImageCompressed(::google::protobuf::Arena* arena, ImageCompressed&& from) noexcept
      : ImageCompressed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 2,
    kFormatFieldNumber = 3,
    kHeadingFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string format = 3;
  void clear_format() ;
  const std::string& format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_format(Arg_&& arg, Args_... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* value);

  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(
      const std::string& value);
  std::string* _internal_mutable_format();

  public:
  // .kevin.Header heading = 1;
  bool has_heading() const;
  void clear_heading() ;
  const ::kevin::Header& heading() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_heading();
  ::kevin::Header* mutable_heading();
  void set_allocated_heading(::kevin::Header* value);
  void unsafe_arena_set_allocated_heading(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_heading();

  private:
  const ::kevin::Header& _internal_heading() const;
  ::kevin::Header* _internal_mutable_heading();

  public:
  // @@protoc_insertion_point(class_scope:kevin.ImageCompressed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ImageCompressed& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr format_;
    ::kevin::Header* heading_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CameraCalibration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.CameraCalibration) */ {
 public:
  inline CameraCalibration() : CameraCalibration(nullptr) {}
  ~CameraCalibration() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CameraCalibration* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CameraCalibration));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CameraCalibration(
      ::google::protobuf::internal::ConstantInitialized);

  inline CameraCalibration(const CameraCalibration& from) : CameraCalibration(nullptr, from) {}
  inline CameraCalibration(CameraCalibration&& from) noexcept
      : CameraCalibration(nullptr, std::move(from)) {}
  inline CameraCalibration& operator=(const CameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraCalibration& operator=(CameraCalibration&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraCalibration& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraCalibration* internal_default_instance() {
    return reinterpret_cast<const CameraCalibration*>(
        &_CameraCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CameraCalibration& a, CameraCalibration& b) { a.Swap(&b); }
  inline void Swap(CameraCalibration* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraCalibration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraCalibration* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CameraCalibration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CameraCalibration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CameraCalibration& from) { CameraCalibration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CameraCalibration* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.CameraCalibration"; }

 protected:
  explicit CameraCalibration(::google::protobuf::Arena* arena);
  CameraCalibration(::google::protobuf::Arena* arena, const CameraCalibration& from);
  CameraCalibration(::google::protobuf::Arena* arena, CameraCalibration&& from) noexcept
      : CameraCalibration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDFieldNumber = 5,
    kKFieldNumber = 6,
    kRFieldNumber = 7,
    kPFieldNumber = 8,
    kDistortionModelFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated double D = 5;
  int d_size() const;
  private:
  int _internal_d_size() const;

  public:
  void clear_d() ;
  double d(int index) const;
  void set_d(int index, double value);
  void add_d(double value);
  const ::google::protobuf::RepeatedField<double>& d() const;
  ::google::protobuf::RepeatedField<double>* mutable_d();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_d() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_d();

  public:
  // repeated double K = 6;
  int k_size() const;
  private:
  int _internal_k_size() const;

  public:
  void clear_k() ;
  double k(int index) const;
  void set_k(int index, double value);
  void add_k(double value);
  const ::google::protobuf::RepeatedField<double>& k() const;
  ::google::protobuf::RepeatedField<double>* mutable_k();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_k() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_k();

  public:
  // repeated double R = 7;
  int r_size() const;
  private:
  int _internal_r_size() const;

  public:
  void clear_r() ;
  double r(int index) const;
  void set_r(int index, double value);
  void add_r(double value);
  const ::google::protobuf::RepeatedField<double>& r() const;
  ::google::protobuf::RepeatedField<double>* mutable_r();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_r() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_r();

  public:
  // repeated double P = 8;
  int p_size() const;
  private:
  int _internal_p_size() const;

  public:
  void clear_p() ;
  double p(int index) const;
  void set_p(int index, double value);
  void add_p(double value);
  const ::google::protobuf::RepeatedField<double>& p() const;
  ::google::protobuf::RepeatedField<double>* mutable_p();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_p() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_p();

  public:
  // string distortion_model = 4;
  void clear_distortion_model() ;
  const std::string& distortion_model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_distortion_model(Arg_&& arg, Args_... args);
  std::string* mutable_distortion_model();
  PROTOBUF_NODISCARD std::string* release_distortion_model();
  void set_allocated_distortion_model(std::string* value);

  private:
  const std::string& _internal_distortion_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distortion_model(
      const std::string& value);
  std::string* _internal_mutable_distortion_model();

  public:
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // fixed32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // fixed32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.CameraCalibration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CameraCalibration& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> d_;
    ::google::protobuf::RepeatedField<double> k_;
    ::google::protobuf::RepeatedField<double> r_;
    ::google::protobuf::RepeatedField<double> p_;
    ::google::protobuf::internal::ArenaStringPtr distortion_model_;
    ::kevin::Header* header_;
    ::uint32_t width_;
    ::uint32_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DisparityImage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.DisparityImage) */ {
 public:
  inline DisparityImage() : DisparityImage(nullptr) {}
  ~DisparityImage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DisparityImage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DisparityImage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DisparityImage(
      ::google::protobuf::internal::ConstantInitialized);

  inline DisparityImage(const DisparityImage& from) : DisparityImage(nullptr, from) {}
  inline DisparityImage(DisparityImage&& from) noexcept
      : DisparityImage(nullptr, std::move(from)) {}
  inline DisparityImage& operator=(const DisparityImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisparityImage& operator=(DisparityImage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisparityImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisparityImage* internal_default_instance() {
    return reinterpret_cast<const DisparityImage*>(
        &_DisparityImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DisparityImage& a, DisparityImage& b) { a.Swap(&b); }
  inline void Swap(DisparityImage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisparityImage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisparityImage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DisparityImage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DisparityImage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DisparityImage& from) { DisparityImage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DisparityImage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.DisparityImage"; }

 protected:
  explicit DisparityImage(::google::protobuf::Arena* arena);
  DisparityImage(::google::protobuf::Arena* arena, const DisparityImage& from);
  DisparityImage(::google::protobuf::Arena* arena, DisparityImage&& from) noexcept
      : DisparityImage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kImageFieldNumber = 2,
    kFFieldNumber = 3,
    kTFieldNumber = 4,
    kMinDisparityFieldNumber = 5,
    kMaxDisparityFieldNumber = 6,
    kDeltaDFieldNumber = 7,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.ImageRaw image = 2;
  bool has_image() const;
  void clear_image() ;
  const ::kevin::ImageRaw& image() const;
  PROTOBUF_NODISCARD ::kevin::ImageRaw* release_image();
  ::kevin::ImageRaw* mutable_image();
  void set_allocated_image(::kevin::ImageRaw* value);
  void unsafe_arena_set_allocated_image(::kevin::ImageRaw* value);
  ::kevin::ImageRaw* unsafe_arena_release_image();

  private:
  const ::kevin::ImageRaw& _internal_image() const;
  ::kevin::ImageRaw* _internal_mutable_image();

  public:
  // float f = 3;
  void clear_f() ;
  float f() const;
  void set_f(float value);

  private:
  float _internal_f() const;
  void _internal_set_f(float value);

  public:
  // float t = 4;
  void clear_t() ;
  float t() const;
  void set_t(float value);

  private:
  float _internal_t() const;
  void _internal_set_t(float value);

  public:
  // float min_disparity = 5;
  void clear_min_disparity() ;
  float min_disparity() const;
  void set_min_disparity(float value);

  private:
  float _internal_min_disparity() const;
  void _internal_set_min_disparity(float value);

  public:
  // float max_disparity = 6;
  void clear_max_disparity() ;
  float max_disparity() const;
  void set_max_disparity(float value);

  private:
  float _internal_max_disparity() const;
  void _internal_set_max_disparity(float value);

  public:
  // float delta_d = 7;
  void clear_delta_d() ;
  float delta_d() const;
  void set_delta_d(float value);

  private:
  float _internal_delta_d() const;
  void _internal_set_delta_d(float value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.DisparityImage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DisparityImage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    ::kevin::ImageRaw* image_;
    float f_;
    float t_;
    float min_disparity_;
    float max_disparity_;
    float delta_d_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ImageCompressed

// .kevin.Header heading = 1;
inline bool ImageCompressed::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.heading_ != nullptr);
  return value;
}
inline const ::kevin::Header& ImageCompressed::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.heading_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& ImageCompressed::heading() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImageCompressed.heading)
  return _internal_heading();
}
inline void ImageCompressed::unsafe_arena_set_allocated_heading(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.heading_);
  }
  _impl_.heading_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.ImageCompressed.heading)
}
inline ::kevin::Header* ImageCompressed::release_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.heading_;
  _impl_.heading_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* ImageCompressed::unsafe_arena_release_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImageCompressed.heading)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.heading_;
  _impl_.heading_ = nullptr;
  return temp;
}
inline ::kevin::Header* ImageCompressed::_internal_mutable_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.heading_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.heading_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.heading_;
}
inline ::kevin::Header* ImageCompressed::mutable_heading() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_heading();
  // @@protoc_insertion_point(field_mutable:kevin.ImageCompressed.heading)
  return _msg;
}
inline void ImageCompressed::set_allocated_heading(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.heading_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.heading_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.ImageCompressed.heading)
}

// bytes data = 2;
inline void ImageCompressed::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ImageCompressed::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImageCompressed.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageCompressed::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kevin.ImageCompressed.data)
}
inline std::string* ImageCompressed::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:kevin.ImageCompressed.data)
  return _s;
}
inline const std::string& ImageCompressed::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ImageCompressed::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ImageCompressed::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ImageCompressed::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImageCompressed.data)
  return _impl_.data_.Release();
}
inline void ImageCompressed::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kevin.ImageCompressed.data)
}

// string format = 3;
inline void ImageCompressed::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_.ClearToEmpty();
}
inline const std::string& ImageCompressed::format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImageCompressed.format)
  return _internal_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageCompressed::set_format(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kevin.ImageCompressed.format)
}
inline std::string* ImageCompressed::mutable_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:kevin.ImageCompressed.format)
  return _s;
}
inline const std::string& ImageCompressed::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_.Get();
}
inline void ImageCompressed::_internal_set_format(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_.Set(value, GetArena());
}
inline std::string* ImageCompressed::_internal_mutable_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.format_.Mutable( GetArena());
}
inline std::string* ImageCompressed::release_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImageCompressed.format)
  return _impl_.format_.Release();
}
inline void ImageCompressed::set_allocated_format(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.format_.IsDefault()) {
    _impl_.format_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kevin.ImageCompressed.format)
}

// -------------------------------------------------------------------

// ImageRaw

// .kevin.Header header = 1;
inline bool ImageRaw::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& ImageRaw::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& ImageRaw::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImageRaw.header)
  return _internal_header();
}
inline void ImageRaw::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.ImageRaw.header)
}
inline ::kevin::Header* ImageRaw::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* ImageRaw::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImageRaw.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* ImageRaw::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* ImageRaw::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.ImageRaw.header)
  return _msg;
}
inline void ImageRaw::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.ImageRaw.header)
}

// fixed32 width = 2;
inline void ImageRaw::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0u;
}
inline ::uint32_t ImageRaw::width() const {
  // @@protoc_insertion_point(field_get:kevin.ImageRaw.width)
  return _internal_width();
}
inline void ImageRaw::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:kevin.ImageRaw.width)
}
inline ::uint32_t ImageRaw::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void ImageRaw::_internal_set_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// fixed32 height = 3;
inline void ImageRaw::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0u;
}
inline ::uint32_t ImageRaw::height() const {
  // @@protoc_insertion_point(field_get:kevin.ImageRaw.height)
  return _internal_height();
}
inline void ImageRaw::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:kevin.ImageRaw.height)
}
inline ::uint32_t ImageRaw::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void ImageRaw::_internal_set_height(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// string encoding = 4;
inline void ImageRaw::clear_encoding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoding_.ClearToEmpty();
}
inline const std::string& ImageRaw::encoding() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImageRaw.encoding)
  return _internal_encoding();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageRaw::set_encoding(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoding_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kevin.ImageRaw.encoding)
}
inline std::string* ImageRaw::mutable_encoding() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encoding();
  // @@protoc_insertion_point(field_mutable:kevin.ImageRaw.encoding)
  return _s;
}
inline const std::string& ImageRaw::_internal_encoding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encoding_.Get();
}
inline void ImageRaw::_internal_set_encoding(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoding_.Set(value, GetArena());
}
inline std::string* ImageRaw::_internal_mutable_encoding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encoding_.Mutable( GetArena());
}
inline std::string* ImageRaw::release_encoding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImageRaw.encoding)
  return _impl_.encoding_.Release();
}
inline void ImageRaw::set_allocated_encoding(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoding_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encoding_.IsDefault()) {
    _impl_.encoding_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kevin.ImageRaw.encoding)
}

// fixed32 step = 5;
inline void ImageRaw::clear_step() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_ = 0u;
}
inline ::uint32_t ImageRaw::step() const {
  // @@protoc_insertion_point(field_get:kevin.ImageRaw.step)
  return _internal_step();
}
inline void ImageRaw::set_step(::uint32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:kevin.ImageRaw.step)
}
inline ::uint32_t ImageRaw::_internal_step() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.step_;
}
inline void ImageRaw::_internal_set_step(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_ = value;
}

// bytes data = 6;
inline void ImageRaw::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ImageRaw::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImageRaw.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageRaw::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kevin.ImageRaw.data)
}
inline std::string* ImageRaw::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:kevin.ImageRaw.data)
  return _s;
}
inline const std::string& ImageRaw::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ImageRaw::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ImageRaw::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ImageRaw::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImageRaw.data)
  return _impl_.data_.Release();
}
inline void ImageRaw::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kevin.ImageRaw.data)
}

// -------------------------------------------------------------------

// CameraCalibration

// .kevin.Header header = 1;
inline bool CameraCalibration::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& CameraCalibration::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& CameraCalibration::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.CameraCalibration.header)
  return _internal_header();
}
inline void CameraCalibration::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.CameraCalibration.header)
}
inline ::kevin::Header* CameraCalibration::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* CameraCalibration::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.CameraCalibration.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* CameraCalibration::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* CameraCalibration::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.CameraCalibration.header)
  return _msg;
}
inline void CameraCalibration::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.CameraCalibration.header)
}

// fixed32 width = 2;
inline void CameraCalibration::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0u;
}
inline ::uint32_t CameraCalibration::width() const {
  // @@protoc_insertion_point(field_get:kevin.CameraCalibration.width)
  return _internal_width();
}
inline void CameraCalibration::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:kevin.CameraCalibration.width)
}
inline ::uint32_t CameraCalibration::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void CameraCalibration::_internal_set_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// fixed32 height = 3;
inline void CameraCalibration::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0u;
}
inline ::uint32_t CameraCalibration::height() const {
  // @@protoc_insertion_point(field_get:kevin.CameraCalibration.height)
  return _internal_height();
}
inline void CameraCalibration::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:kevin.CameraCalibration.height)
}
inline ::uint32_t CameraCalibration::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void CameraCalibration::_internal_set_height(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// string distortion_model = 4;
inline void CameraCalibration::clear_distortion_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distortion_model_.ClearToEmpty();
}
inline const std::string& CameraCalibration::distortion_model() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.CameraCalibration.distortion_model)
  return _internal_distortion_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraCalibration::set_distortion_model(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distortion_model_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kevin.CameraCalibration.distortion_model)
}
inline std::string* CameraCalibration::mutable_distortion_model() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_distortion_model();
  // @@protoc_insertion_point(field_mutable:kevin.CameraCalibration.distortion_model)
  return _s;
}
inline const std::string& CameraCalibration::_internal_distortion_model() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distortion_model_.Get();
}
inline void CameraCalibration::_internal_set_distortion_model(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distortion_model_.Set(value, GetArena());
}
inline std::string* CameraCalibration::_internal_mutable_distortion_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.distortion_model_.Mutable( GetArena());
}
inline std::string* CameraCalibration::release_distortion_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.CameraCalibration.distortion_model)
  return _impl_.distortion_model_.Release();
}
inline void CameraCalibration::set_allocated_distortion_model(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distortion_model_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.distortion_model_.IsDefault()) {
    _impl_.distortion_model_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kevin.CameraCalibration.distortion_model)
}

// repeated double D = 5;
inline int CameraCalibration::_internal_d_size() const {
  return _internal_d().size();
}
inline int CameraCalibration::d_size() const {
  return _internal_d_size();
}
inline void CameraCalibration::clear_d() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.d_.Clear();
}
inline double CameraCalibration::d(int index) const {
  // @@protoc_insertion_point(field_get:kevin.CameraCalibration.D)
  return _internal_d().Get(index);
}
inline void CameraCalibration::set_d(int index, double value) {
  _internal_mutable_d()->Set(index, value);
  // @@protoc_insertion_point(field_set:kevin.CameraCalibration.D)
}
inline void CameraCalibration::add_d(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_d()->Add(value);
  // @@protoc_insertion_point(field_add:kevin.CameraCalibration.D)
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::d() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kevin.CameraCalibration.D)
  return _internal_d();
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::mutable_d()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kevin.CameraCalibration.D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_d();
}
inline const ::google::protobuf::RepeatedField<double>&
CameraCalibration::_internal_d() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.d_;
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::_internal_mutable_d() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.d_;
}

// repeated double K = 6;
inline int CameraCalibration::_internal_k_size() const {
  return _internal_k().size();
}
inline int CameraCalibration::k_size() const {
  return _internal_k_size();
}
inline void CameraCalibration::clear_k() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.k_.Clear();
}
inline double CameraCalibration::k(int index) const {
  // @@protoc_insertion_point(field_get:kevin.CameraCalibration.K)
  return _internal_k().Get(index);
}
inline void CameraCalibration::set_k(int index, double value) {
  _internal_mutable_k()->Set(index, value);
  // @@protoc_insertion_point(field_set:kevin.CameraCalibration.K)
}
inline void CameraCalibration::add_k(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_k()->Add(value);
  // @@protoc_insertion_point(field_add:kevin.CameraCalibration.K)
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::k() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kevin.CameraCalibration.K)
  return _internal_k();
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::mutable_k()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kevin.CameraCalibration.K)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_k();
}
inline const ::google::protobuf::RepeatedField<double>&
CameraCalibration::_internal_k() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.k_;
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::_internal_mutable_k() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.k_;
}

// repeated double R = 7;
inline int CameraCalibration::_internal_r_size() const {
  return _internal_r().size();
}
inline int CameraCalibration::r_size() const {
  return _internal_r_size();
}
inline void CameraCalibration::clear_r() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.r_.Clear();
}
inline double CameraCalibration::r(int index) const {
  // @@protoc_insertion_point(field_get:kevin.CameraCalibration.R)
  return _internal_r().Get(index);
}
inline void CameraCalibration::set_r(int index, double value) {
  _internal_mutable_r()->Set(index, value);
  // @@protoc_insertion_point(field_set:kevin.CameraCalibration.R)
}
inline void CameraCalibration::add_r(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_r()->Add(value);
  // @@protoc_insertion_point(field_add:kevin.CameraCalibration.R)
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::r() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kevin.CameraCalibration.R)
  return _internal_r();
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::mutable_r()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kevin.CameraCalibration.R)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_r();
}
inline const ::google::protobuf::RepeatedField<double>&
CameraCalibration::_internal_r() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.r_;
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::_internal_mutable_r() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.r_;
}

// repeated double P = 8;
inline int CameraCalibration::_internal_p_size() const {
  return _internal_p().size();
}
inline int CameraCalibration::p_size() const {
  return _internal_p_size();
}
inline void CameraCalibration::clear_p() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.p_.Clear();
}
inline double CameraCalibration::p(int index) const {
  // @@protoc_insertion_point(field_get:kevin.CameraCalibration.P)
  return _internal_p().Get(index);
}
inline void CameraCalibration::set_p(int index, double value) {
  _internal_mutable_p()->Set(index, value);
  // @@protoc_insertion_point(field_set:kevin.CameraCalibration.P)
}
inline void CameraCalibration::add_p(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_p()->Add(value);
  // @@protoc_insertion_point(field_add:kevin.CameraCalibration.P)
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::p() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kevin.CameraCalibration.P)
  return _internal_p();
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::mutable_p()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kevin.CameraCalibration.P)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_p();
}
inline const ::google::protobuf::RepeatedField<double>&
CameraCalibration::_internal_p() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.p_;
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::_internal_mutable_p() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.p_;
}

// -------------------------------------------------------------------

// DisparityImage

// .kevin.Header header = 1;
inline bool DisparityImage::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& DisparityImage::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& DisparityImage::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.DisparityImage.header)
  return _internal_header();
}
inline void DisparityImage::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.DisparityImage.header)
}
inline ::kevin::Header* DisparityImage::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* DisparityImage::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.DisparityImage.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* DisparityImage::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* DisparityImage::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.DisparityImage.header)
  return _msg;
}
inline void DisparityImage::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.DisparityImage.header)
}

// .kevin.ImageRaw image = 2;
inline bool DisparityImage::has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline void DisparityImage::clear_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::kevin::ImageRaw& DisparityImage::_internal_image() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::ImageRaw* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::ImageRaw&>(::kevin::_ImageRaw_default_instance_);
}
inline const ::kevin::ImageRaw& DisparityImage::image() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.DisparityImage.image)
  return _internal_image();
}
inline void DisparityImage::unsafe_arena_set_allocated_image(::kevin::ImageRaw* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = reinterpret_cast<::kevin::ImageRaw*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.DisparityImage.image)
}
inline ::kevin::ImageRaw* DisparityImage::release_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::ImageRaw* released = _impl_.image_;
  _impl_.image_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::ImageRaw* DisparityImage::unsafe_arena_release_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.DisparityImage.image)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::ImageRaw* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::kevin::ImageRaw* DisparityImage::_internal_mutable_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.image_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::ImageRaw>(GetArena());
    _impl_.image_ = reinterpret_cast<::kevin::ImageRaw*>(p);
  }
  return _impl_.image_;
}
inline ::kevin::ImageRaw* DisparityImage::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::ImageRaw* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:kevin.DisparityImage.image)
  return _msg;
}
inline void DisparityImage::set_allocated_image(::kevin::ImageRaw* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.image_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.image_ = reinterpret_cast<::kevin::ImageRaw*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.DisparityImage.image)
}

// float f = 3;
inline void DisparityImage::clear_f() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_ = 0;
}
inline float DisparityImage::f() const {
  // @@protoc_insertion_point(field_get:kevin.DisparityImage.f)
  return _internal_f();
}
inline void DisparityImage::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:kevin.DisparityImage.f)
}
inline float DisparityImage::_internal_f() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_;
}
inline void DisparityImage::_internal_set_f(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_ = value;
}

// float t = 4;
inline void DisparityImage::clear_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_ = 0;
}
inline float DisparityImage::t() const {
  // @@protoc_insertion_point(field_get:kevin.DisparityImage.t)
  return _internal_t();
}
inline void DisparityImage::set_t(float value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:kevin.DisparityImage.t)
}
inline float DisparityImage::_internal_t() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.t_;
}
inline void DisparityImage::_internal_set_t(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_ = value;
}

// float min_disparity = 5;
inline void DisparityImage::clear_min_disparity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_disparity_ = 0;
}
inline float DisparityImage::min_disparity() const {
  // @@protoc_insertion_point(field_get:kevin.DisparityImage.min_disparity)
  return _internal_min_disparity();
}
inline void DisparityImage::set_min_disparity(float value) {
  _internal_set_min_disparity(value);
  // @@protoc_insertion_point(field_set:kevin.DisparityImage.min_disparity)
}
inline float DisparityImage::_internal_min_disparity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_disparity_;
}
inline void DisparityImage::_internal_set_min_disparity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_disparity_ = value;
}

// float max_disparity = 6;
inline void DisparityImage::clear_max_disparity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_disparity_ = 0;
}
inline float DisparityImage::max_disparity() const {
  // @@protoc_insertion_point(field_get:kevin.DisparityImage.max_disparity)
  return _internal_max_disparity();
}
inline void DisparityImage::set_max_disparity(float value) {
  _internal_set_max_disparity(value);
  // @@protoc_insertion_point(field_set:kevin.DisparityImage.max_disparity)
}
inline float DisparityImage::_internal_max_disparity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_disparity_;
}
inline void DisparityImage::_internal_set_max_disparity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_disparity_ = value;
}

// float delta_d = 7;
inline void DisparityImage::clear_delta_d() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_d_ = 0;
}
inline float DisparityImage::delta_d() const {
  // @@protoc_insertion_point(field_get:kevin.DisparityImage.delta_d)
  return _internal_delta_d();
}
inline void DisparityImage::set_delta_d(float value) {
  _internal_set_delta_d(value);
  // @@protoc_insertion_point(field_set:kevin.DisparityImage.delta_d)
}
inline float DisparityImage::_internal_delta_d() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delta_d_;
}
inline void DisparityImage::_internal_set_delta_d(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_d_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // camera_5fmsgs_2eproto_2epb_2eh
