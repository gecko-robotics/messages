// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: foxglove_msgs.proto
// Protobuf C++ Version: 5.29.3

#include "foxglove_msgs.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace foxglove {

inline constexpr Vector3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vector3::Vector3(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;

inline constexpr Quaternion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        w_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Quaternion::Quaternion(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;

inline constexpr RawImage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        encoding_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        width_{0u},
        height_{0u},
        step_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR RawImage::RawImage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RawImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawImageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawImageDefaultTypeInternal() {}
  union {
    RawImage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawImageDefaultTypeInternal _RawImage_default_instance_;

inline constexpr Pose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        orientation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Pose::Pose(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;

inline constexpr LocationFix::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_covariance_{},
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        latitude_{0},
        longitude_{0},
        altitude_{0},
        position_covariance_type_{static_cast< ::foxglove::LocationFix_PositionCovarianceType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LocationFix::LocationFix(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LocationFixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationFixDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationFixDefaultTypeInternal() {}
  union {
    LocationFix _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationFixDefaultTypeInternal _LocationFix_default_instance_;

inline constexpr FrameTransform::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        parent_frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        child_frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        translation_{nullptr},
        rotation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FrameTransform::FrameTransform(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FrameTransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTransformDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTransformDefaultTypeInternal() {}
  union {
    FrameTransform _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTransformDefaultTypeInternal _FrameTransform_default_instance_;

inline constexpr CompressedVideo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        format_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CompressedVideo::CompressedVideo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CompressedVideoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompressedVideoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompressedVideoDefaultTypeInternal() {}
  union {
    CompressedVideo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompressedVideoDefaultTypeInternal _CompressedVideo_default_instance_;

inline constexpr CompressedImage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        format_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CompressedImage::CompressedImage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CompressedImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompressedImageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompressedImageDefaultTypeInternal() {}
  union {
    CompressedImage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompressedImageDefaultTypeInternal _CompressedImage_default_instance_;

inline constexpr CameraCalibration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        d_{},
        k_{},
        r_{},
        p_{},
        distortion_model_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        width_{0u},
        height_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CameraCalibration::CameraCalibration(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CameraCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraCalibrationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraCalibrationDefaultTypeInternal() {}
  union {
    CameraCalibration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraCalibrationDefaultTypeInternal _CameraCalibration_default_instance_;

inline constexpr LaserScan::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ranges_{},
        intensities_{},
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        pose_{nullptr},
        start_angle_{0},
        end_angle_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LaserScan::LaserScan(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaserScanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaserScanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaserScanDefaultTypeInternal() {}
  union {
    LaserScan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaserScanDefaultTypeInternal _LaserScan_default_instance_;

inline constexpr FrameTransforms::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : transforms_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FrameTransforms::FrameTransforms(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FrameTransformsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTransformsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTransformsDefaultTypeInternal() {}
  union {
    FrameTransforms _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTransformsDefaultTypeInternal _FrameTransforms_default_instance_;
}  // namespace foxglove
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_foxglove_5fmsgs_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_foxglove_5fmsgs_2eproto = nullptr;
const ::uint32_t
    TableStruct_foxglove_5fmsgs_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::foxglove::Quaternion, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::Quaternion, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::foxglove::Quaternion, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::foxglove::Quaternion, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::foxglove::Quaternion, _impl_.w_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::foxglove::Vector3, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::Vector3, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::foxglove::Vector3, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::foxglove::Vector3, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::foxglove::Pose, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::foxglove::Pose, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::Pose, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::foxglove::Pose, _impl_.orientation_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::foxglove::LaserScan, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LaserScan, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::LaserScan, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LaserScan, _impl_.frame_id_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LaserScan, _impl_.pose_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LaserScan, _impl_.start_angle_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LaserScan, _impl_.end_angle_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LaserScan, _impl_.ranges_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LaserScan, _impl_.intensities_),
        0,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.frame_id_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.distortion_model_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.d_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.k_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.r_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CameraCalibration, _impl_.p_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedImage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedImage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedImage, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedImage, _impl_.frame_id_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedImage, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedImage, _impl_.format_),
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::foxglove::RawImage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::foxglove::RawImage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::RawImage, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::foxglove::RawImage, _impl_.frame_id_),
        PROTOBUF_FIELD_OFFSET(::foxglove::RawImage, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::foxglove::RawImage, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::foxglove::RawImage, _impl_.encoding_),
        PROTOBUF_FIELD_OFFSET(::foxglove::RawImage, _impl_.step_),
        PROTOBUF_FIELD_OFFSET(::foxglove::RawImage, _impl_.data_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_.frame_id_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_.format_),
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::foxglove::LocationFix, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LocationFix, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::LocationFix, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LocationFix, _impl_.frame_id_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LocationFix, _impl_.latitude_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LocationFix, _impl_.longitude_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LocationFix, _impl_.altitude_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LocationFix, _impl_.position_covariance_),
        PROTOBUF_FIELD_OFFSET(::foxglove::LocationFix, _impl_.position_covariance_type_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::foxglove::FrameTransform, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::foxglove::FrameTransform, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::FrameTransform, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::foxglove::FrameTransform, _impl_.parent_frame_id_),
        PROTOBUF_FIELD_OFFSET(::foxglove::FrameTransform, _impl_.child_frame_id_),
        PROTOBUF_FIELD_OFFSET(::foxglove::FrameTransform, _impl_.translation_),
        PROTOBUF_FIELD_OFFSET(::foxglove::FrameTransform, _impl_.rotation_),
        0,
        ~0u,
        ~0u,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::foxglove::FrameTransforms, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::foxglove::FrameTransforms, _impl_.transforms_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::foxglove::Quaternion)},
        {12, -1, -1, sizeof(::foxglove::Vector3)},
        {23, 33, -1, sizeof(::foxglove::Pose)},
        {35, 50, -1, sizeof(::foxglove::LaserScan)},
        {57, 74, -1, sizeof(::foxglove::CameraCalibration)},
        {83, 95, -1, sizeof(::foxglove::CompressedImage)},
        {99, 114, -1, sizeof(::foxglove::RawImage)},
        {121, 133, -1, sizeof(::foxglove::CompressedVideo)},
        {137, 152, -1, sizeof(::foxglove::LocationFix)},
        {159, 172, -1, sizeof(::foxglove::FrameTransform)},
        {177, -1, -1, sizeof(::foxglove::FrameTransforms)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::foxglove::_Quaternion_default_instance_._instance,
    &::foxglove::_Vector3_default_instance_._instance,
    &::foxglove::_Pose_default_instance_._instance,
    &::foxglove::_LaserScan_default_instance_._instance,
    &::foxglove::_CameraCalibration_default_instance_._instance,
    &::foxglove::_CompressedImage_default_instance_._instance,
    &::foxglove::_RawImage_default_instance_._instance,
    &::foxglove::_CompressedVideo_default_instance_._instance,
    &::foxglove::_LocationFix_default_instance_._instance,
    &::foxglove::_FrameTransform_default_instance_._instance,
    &::foxglove::_FrameTransforms_default_instance_._instance,
};
const char descriptor_table_protodef_foxglove_5fmsgs_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023foxglove_msgs.proto\022\010foxglove\032\037google/"
    "protobuf/timestamp.proto\"8\n\nQuaternion\022\t"
    "\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001"
    "(\001\"*\n\007Vector3\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z"
    "\030\003 \001(\001\"V\n\004Pose\022#\n\010position\030\001 \001(\0132\021.foxgl"
    "ove.Vector3\022)\n\013orientation\030\002 \001(\0132\024.foxgl"
    "ove.Quaternion\"\267\001\n\tLaserScan\022-\n\ttimestam"
    "p\030\001 \001(\0132\032.google.protobuf.Timestamp\022\020\n\010f"
    "rame_id\030\002 \001(\t\022\034\n\004pose\030\003 \001(\0132\016.foxglove.P"
    "ose\022\023\n\013start_angle\030\004 \001(\001\022\021\n\tend_angle\030\005 "
    "\001(\001\022\016\n\006ranges\030\006 \003(\001\022\023\n\013intensities\030\007 \003(\001"
    "\"\271\001\n\021CameraCalibration\022-\n\ttimestamp\030\001 \001("
    "\0132\032.google.protobuf.Timestamp\022\020\n\010frame_i"
    "d\030\t \001(\t\022\r\n\005width\030\002 \001(\007\022\016\n\006height\030\003 \001(\007\022\030"
    "\n\020distortion_model\030\004 \001(\t\022\t\n\001D\030\005 \003(\001\022\t\n\001K"
    "\030\006 \003(\001\022\t\n\001R\030\007 \003(\001\022\t\n\001P\030\010 \003(\001\"p\n\017Compress"
    "edImage\022-\n\ttimestamp\030\001 \001(\0132\032.google.prot"
    "obuf.Timestamp\022\020\n\010frame_id\030\004 \001(\t\022\014\n\004data"
    "\030\002 \001(\014\022\016\n\006format\030\003 \001(\t\"\230\001\n\010RawImage\022-\n\tt"
    "imestamp\030\001 \001(\0132\032.google.protobuf.Timesta"
    "mp\022\020\n\010frame_id\030\007 \001(\t\022\r\n\005width\030\002 \001(\007\022\016\n\006h"
    "eight\030\003 \001(\007\022\020\n\010encoding\030\004 \001(\t\022\014\n\004step\030\005 "
    "\001(\007\022\014\n\004data\030\006 \001(\014\"p\n\017CompressedVideo\022-\n\t"
    "timestamp\030\001 \001(\0132\032.google.protobuf.Timest"
    "amp\022\020\n\010frame_id\030\002 \001(\t\022\014\n\004data\030\003 \001(\014\022\016\n\006f"
    "ormat\030\004 \001(\t\"\312\002\n\013LocationFix\022-\n\ttimestamp"
    "\030\006 \001(\0132\032.google.protobuf.Timestamp\022\020\n\010fr"
    "ame_id\030\007 \001(\t\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongit"
    "ude\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\001\022\033\n\023position_"
    "covariance\030\004 \003(\001\022N\n\030position_covariance_"
    "type\030\005 \001(\0162,.foxglove.LocationFix.Positi"
    "onCovarianceType\"V\n\026PositionCovarianceTy"
    "pe\022\013\n\007UNKNOWN\020\000\022\020\n\014APPROXIMATED\020\001\022\022\n\016DIA"
    "GONAL_KNOWN\020\002\022\t\n\005KNOWN\020\003\"\300\001\n\016FrameTransf"
    "orm\022-\n\ttimestamp\030\001 \001(\0132\032.google.protobuf"
    ".Timestamp\022\027\n\017parent_frame_id\030\002 \001(\t\022\026\n\016c"
    "hild_frame_id\030\003 \001(\t\022&\n\013translation\030\004 \001(\013"
    "2\021.foxglove.Vector3\022&\n\010rotation\030\005 \001(\0132\024."
    "foxglove.Quaternion\"\?\n\017FrameTransforms\022,"
    "\n\ntransforms\030\001 \003(\0132\030.foxglove.FrameTrans"
    "formb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_5fmsgs_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_foxglove_5fmsgs_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_foxglove_5fmsgs_2eproto = {
    false,
    false,
    1612,
    descriptor_table_protodef_foxglove_5fmsgs_2eproto,
    "foxglove_msgs.proto",
    &descriptor_table_foxglove_5fmsgs_2eproto_once,
    descriptor_table_foxglove_5fmsgs_2eproto_deps,
    1,
    11,
    schemas,
    file_default_instances,
    TableStruct_foxglove_5fmsgs_2eproto::offsets,
    file_level_enum_descriptors_foxglove_5fmsgs_2eproto,
    file_level_service_descriptors_foxglove_5fmsgs_2eproto,
};
namespace foxglove {
const ::google::protobuf::EnumDescriptor* LocationFix_PositionCovarianceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_foxglove_5fmsgs_2eproto);
  return file_level_enum_descriptors_foxglove_5fmsgs_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t LocationFix_PositionCovarianceType_internal_data_[] = {
    262144u, 0u, };
bool LocationFix_PositionCovarianceType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LocationFix_PositionCovarianceType LocationFix::UNKNOWN;
constexpr LocationFix_PositionCovarianceType LocationFix::APPROXIMATED;
constexpr LocationFix_PositionCovarianceType LocationFix::DIAGONAL_KNOWN;
constexpr LocationFix_PositionCovarianceType LocationFix::KNOWN;
constexpr LocationFix_PositionCovarianceType LocationFix::PositionCovarianceType_MIN;
constexpr LocationFix_PositionCovarianceType LocationFix::PositionCovarianceType_MAX;
constexpr int LocationFix::PositionCovarianceType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.Quaternion)
}
Quaternion::Quaternion(
    ::google::protobuf::Arena* arena, const Quaternion& from)
    : Quaternion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Quaternion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Quaternion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, w_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::w_));
}
Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:foxglove.Quaternion)
  SharedDtor(*this);
}
inline void Quaternion::SharedDtor(MessageLite& self) {
  Quaternion& this_ = static_cast<Quaternion&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Quaternion::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Quaternion(arena);
}
constexpr auto Quaternion::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Quaternion),
                                            alignof(Quaternion));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Quaternion::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Quaternion_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Quaternion::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Quaternion>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Quaternion::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Quaternion>(), &Quaternion::ByteSizeLong,
            &Quaternion::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Quaternion, _impl_._cached_size_),
        false,
    },
    &Quaternion::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Quaternion::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Quaternion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::Quaternion>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double w = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double w = 4;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.Quaternion)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Quaternion::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Quaternion& this_ = static_cast<const Quaternion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Quaternion::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Quaternion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.Quaternion)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double x = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_x(), target);
          }

          // double y = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_y(), target);
          }

          // double z = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_z(), target);
          }

          // double w = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_w()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_w(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.Quaternion)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Quaternion::ByteSizeLong(const MessageLite& base) {
          const Quaternion& this_ = static_cast<const Quaternion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Quaternion::ByteSizeLong() const {
          const Quaternion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.Quaternion)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double x = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_x()) != 0) {
              total_size += 9;
            }
            // double y = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_y()) != 0) {
              total_size += 9;
            }
            // double z = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_z()) != 0) {
              total_size += 9;
            }
            // double w = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_w()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Quaternion::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.Quaternion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_w()) != 0) {
    _this->_impl_.w_ = from._impl_.w_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Quaternion::InternalSwap(Quaternion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)
      + sizeof(Quaternion::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.Vector3)
}
Vector3::Vector3(
    ::google::protobuf::Arena* arena, const Vector3& from)
    : Vector3(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Vector3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Vector3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:foxglove.Vector3)
  SharedDtor(*this);
}
inline void Vector3::SharedDtor(MessageLite& self) {
  Vector3& this_ = static_cast<Vector3&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Vector3::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Vector3(arena);
}
constexpr auto Vector3::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Vector3),
                                            alignof(Vector3));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Vector3::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Vector3_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Vector3::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Vector3>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Vector3::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Vector3>(), &Vector3::ByteSizeLong,
            &Vector3::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Vector3, _impl_._cached_size_),
        false,
    },
    &Vector3::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Vector3::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Vector3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::Vector3>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.Vector3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Vector3::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Vector3& this_ = static_cast<const Vector3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Vector3::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Vector3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.Vector3)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double x = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_x(), target);
          }

          // double y = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_y(), target);
          }

          // double z = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.Vector3)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Vector3::ByteSizeLong(const MessageLite& base) {
          const Vector3& this_ = static_cast<const Vector3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Vector3::ByteSizeLong() const {
          const Vector3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.Vector3)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double x = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_x()) != 0) {
              total_size += 9;
            }
            // double y = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_y()) != 0) {
              total_size += 9;
            }
            // double z = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_z()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Vector3::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.Vector3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Vector3::InternalSwap(Vector3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Pose::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Pose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_);
};

Pose::Pose(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::foxglove::Pose& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Pose::Pose(
    ::google::protobuf::Arena* arena,
    const Pose& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Pose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::foxglove::Vector3>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.orientation_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::foxglove::Quaternion>(
                              arena, *from._impl_.orientation_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:foxglove.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Pose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, orientation_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::orientation_));
}
Pose::~Pose() {
  // @@protoc_insertion_point(destructor:foxglove.Pose)
  SharedDtor(*this);
}
inline void Pose::SharedDtor(MessageLite& self) {
  Pose& this_ = static_cast<Pose&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.position_;
  delete this_._impl_.orientation_;
  this_._impl_.~Impl_();
}

inline void* Pose::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Pose(arena);
}
constexpr auto Pose::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Pose),
                                            alignof(Pose));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Pose::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Pose_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Pose::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Pose>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Pose::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Pose>(), &Pose::ByteSizeLong,
            &Pose::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Pose, _impl_._cached_size_),
        false,
    },
    &Pose::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Pose::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Pose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::Pose>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .foxglove.Quaternion orientation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_)}},
    // .foxglove.Vector3 position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .foxglove.Vector3 position = 1;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .foxglove.Quaternion orientation = 2;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::foxglove::Vector3>()},
    {::_pbi::TcParser::GetTable<::foxglove::Quaternion>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.Pose)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Pose::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Pose& this_ = static_cast<const Pose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Pose::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Pose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.Pose)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .foxglove.Vector3 position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // .foxglove.Quaternion orientation = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.orientation_, this_._impl_.orientation_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.Pose)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Pose::ByteSizeLong(const MessageLite& base) {
          const Pose& this_ = static_cast<const Pose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Pose::ByteSizeLong() const {
          const Pose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.Pose)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .foxglove.Vector3 position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
            // .foxglove.Quaternion orientation = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.orientation_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Pose::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Pose*>(&to_msg);
  auto& from = static_cast<const Pose&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.Pose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::foxglove::Vector3>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.orientation_ != nullptr);
      if (_this->_impl_.orientation_ == nullptr) {
        _this->_impl_.orientation_ =
            ::google::protobuf::Message::CopyConstruct<::foxglove::Quaternion>(arena, *from._impl_.orientation_);
      } else {
        _this->_impl_.orientation_->MergeFrom(*from._impl_.orientation_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Pose::InternalSwap(Pose* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_)
      + sizeof(Pose::_impl_.orientation_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaserScan::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LaserScan>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LaserScan, _impl_._has_bits_);
};

void LaserScan::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LaserScan::LaserScan(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.LaserScan)
}
inline PROTOBUF_NDEBUG_INLINE LaserScan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::foxglove::LaserScan& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ranges_{visibility, arena, from.ranges_},
        intensities_{visibility, arena, from.intensities_},
        frame_id_(arena, from.frame_id_) {}

LaserScan::LaserScan(
    ::google::protobuf::Arena* arena,
    const LaserScan& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaserScan* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  _impl_.pose_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::foxglove::Pose>(
                              arena, *from._impl_.pose_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_angle_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_angle_),
           offsetof(Impl_, end_angle_) -
               offsetof(Impl_, start_angle_) +
               sizeof(Impl_::end_angle_));

  // @@protoc_insertion_point(copy_constructor:foxglove.LaserScan)
}
inline PROTOBUF_NDEBUG_INLINE LaserScan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        ranges_{visibility, arena},
        intensities_{visibility, arena},
        frame_id_(arena) {}

inline void LaserScan::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, end_angle_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::end_angle_));
}
LaserScan::~LaserScan() {
  // @@protoc_insertion_point(destructor:foxglove.LaserScan)
  SharedDtor(*this);
}
inline void LaserScan::SharedDtor(MessageLite& self) {
  LaserScan& this_ = static_cast<LaserScan&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.frame_id_.Destroy();
  delete this_._impl_.timestamp_;
  delete this_._impl_.pose_;
  this_._impl_.~Impl_();
}

inline void* LaserScan::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LaserScan(arena);
}
constexpr auto LaserScan::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.ranges_) +
          decltype(LaserScan::_impl_.ranges_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.intensities_) +
          decltype(LaserScan::_impl_.intensities_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(LaserScan), alignof(LaserScan), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LaserScan::PlacementNew_,
                                 sizeof(LaserScan),
                                 alignof(LaserScan));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LaserScan::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LaserScan_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LaserScan::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LaserScan>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LaserScan::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LaserScan>(), &LaserScan::ByteSizeLong,
            &LaserScan::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LaserScan, _impl_._cached_size_),
        false,
    },
    &LaserScan::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LaserScan::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 35, 2> LaserScan::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaserScan, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::LaserScan>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.timestamp_)}},
    // string frame_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.frame_id_)}},
    // .foxglove.Pose pose = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.pose_)}},
    // double start_angle = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.start_angle_)}},
    // double end_angle = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.end_angle_)}},
    // repeated double ranges = 6;
    {::_pbi::TcParser::FastF64P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.ranges_)}},
    // repeated double intensities = 7;
    {::_pbi::TcParser::FastF64P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.intensities_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string frame_id = 2;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .foxglove.Pose pose = 3;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.pose_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double start_angle = 4;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.start_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double end_angle = 5;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.end_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated double ranges = 6;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.ranges_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double intensities = 7;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.intensities_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::foxglove::Pose>()},
  }}, {{
    "\22\0\10\0\0\0\0\0"
    "foxglove.LaserScan"
    "frame_id"
  }},
};

PROTOBUF_NOINLINE void LaserScan::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.LaserScan)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ranges_.Clear();
  _impl_.intensities_.Clear();
  _impl_.frame_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
  }
  ::memset(&_impl_.start_angle_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_angle_) -
      reinterpret_cast<char*>(&_impl_.start_angle_)) + sizeof(_impl_.end_angle_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LaserScan::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LaserScan& this_ = static_cast<const LaserScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LaserScan::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LaserScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.LaserScan)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // string frame_id = 2;
          if (!this_._internal_frame_id().empty()) {
            const std::string& _s = this_._internal_frame_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.LaserScan.frame_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .foxglove.Pose pose = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          // double start_angle = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_start_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_start_angle(), target);
          }

          // double end_angle = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_end_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_end_angle(), target);
          }

          // repeated double ranges = 6;
          if (this_._internal_ranges_size() > 0) {
            target = stream->WriteFixedPacked(6, this_._internal_ranges(), target);
          }

          // repeated double intensities = 7;
          if (this_._internal_intensities_size() > 0) {
            target = stream->WriteFixedPacked(7, this_._internal_intensities(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.LaserScan)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LaserScan::ByteSizeLong(const MessageLite& base) {
          const LaserScan& this_ = static_cast<const LaserScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LaserScan::ByteSizeLong() const {
          const LaserScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.LaserScan)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double ranges = 6;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_ranges_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double intensities = 7;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_intensities_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // string frame_id = 2;
            if (!this_._internal_frame_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_frame_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp timestamp = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
            // .foxglove.Pose pose = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
          }
           {
            // double start_angle = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_start_angle()) != 0) {
              total_size += 9;
            }
            // double end_angle = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_end_angle()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LaserScan::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaserScan*>(&to_msg);
  auto& from = static_cast<const LaserScan&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.LaserScan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ranges()->MergeFrom(from._internal_ranges());
  _this->_internal_mutable_intensities()->MergeFrom(from._internal_intensities());
  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.pose_ != nullptr);
      if (_this->_impl_.pose_ == nullptr) {
        _this->_impl_.pose_ =
            ::google::protobuf::Message::CopyConstruct<::foxglove::Pose>(arena, *from._impl_.pose_);
      } else {
        _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_start_angle()) != 0) {
    _this->_impl_.start_angle_ = from._impl_.start_angle_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_end_angle()) != 0) {
    _this->_impl_.end_angle_ = from._impl_.end_angle_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaserScan::CopyFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.LaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaserScan::InternalSwap(LaserScan* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ranges_.InternalSwap(&other->_impl_.ranges_);
  _impl_.intensities_.InternalSwap(&other->_impl_.intensities_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.end_angle_)
      + sizeof(LaserScan::_impl_.end_angle_)
      - PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata LaserScan::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CameraCalibration::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CameraCalibration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_._has_bits_);
};

void CameraCalibration::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CameraCalibration::CameraCalibration(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.CameraCalibration)
}
inline PROTOBUF_NDEBUG_INLINE CameraCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::foxglove::CameraCalibration& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        d_{visibility, arena, from.d_},
        k_{visibility, arena, from.k_},
        r_{visibility, arena, from.r_},
        p_{visibility, arena, from.p_},
        distortion_model_(arena, from.distortion_model_),
        frame_id_(arena, from.frame_id_) {}

CameraCalibration::CameraCalibration(
    ::google::protobuf::Arena* arena,
    const CameraCalibration& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CameraCalibration* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:foxglove.CameraCalibration)
}
inline PROTOBUF_NDEBUG_INLINE CameraCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        d_{visibility, arena},
        k_{visibility, arena},
        r_{visibility, arena},
        p_{visibility, arena},
        distortion_model_(arena),
        frame_id_(arena) {}

inline void CameraCalibration::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::height_));
}
CameraCalibration::~CameraCalibration() {
  // @@protoc_insertion_point(destructor:foxglove.CameraCalibration)
  SharedDtor(*this);
}
inline void CameraCalibration::SharedDtor(MessageLite& self) {
  CameraCalibration& this_ = static_cast<CameraCalibration&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.distortion_model_.Destroy();
  this_._impl_.frame_id_.Destroy();
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* CameraCalibration::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CameraCalibration(arena);
}
constexpr auto CameraCalibration::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.d_) +
          decltype(CameraCalibration::_impl_.d_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.k_) +
          decltype(CameraCalibration::_impl_.k_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.r_) +
          decltype(CameraCalibration::_impl_.r_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.p_) +
          decltype(CameraCalibration::_impl_.p_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CameraCalibration), alignof(CameraCalibration), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CameraCalibration::PlacementNew_,
                                 sizeof(CameraCalibration),
                                 alignof(CameraCalibration));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CameraCalibration::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CameraCalibration_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CameraCalibration::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CameraCalibration>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CameraCalibration::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CameraCalibration>(), &CameraCalibration::ByteSizeLong,
            &CameraCalibration::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_._cached_size_),
        false,
    },
    &CameraCalibration::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CameraCalibration::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 67, 2> CameraCalibration::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::CameraCalibration>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.timestamp_)}},
    // fixed32 width = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.width_)}},
    // fixed32 height = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.height_)}},
    // string distortion_model = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.distortion_model_)}},
    // repeated double D = 5;
    {::_pbi::TcParser::FastF64P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.d_)}},
    // repeated double K = 6;
    {::_pbi::TcParser::FastF64P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.k_)}},
    // repeated double R = 7;
    {::_pbi::TcParser::FastF64P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.r_)}},
    // repeated double P = 8;
    {::_pbi::TcParser::FastF64P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.p_)}},
    // string frame_id = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.frame_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // fixed32 width = 2;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // fixed32 height = 3;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // string distortion_model = 4;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.distortion_model_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated double D = 5;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.d_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double K = 6;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.k_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double R = 7;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.r_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double P = 8;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.p_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // string frame_id = 9;
    {PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\32\0\0\0\20\0\0\0\0\10\0\0\0\0\0\0"
    "foxglove.CameraCalibration"
    "distortion_model"
    "frame_id"
  }},
};

PROTOBUF_NOINLINE void CameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.CameraCalibration)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.d_.Clear();
  _impl_.k_.Clear();
  _impl_.r_.Clear();
  _impl_.p_.Clear();
  _impl_.distortion_model_.ClearToEmpty();
  _impl_.frame_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CameraCalibration::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CameraCalibration& this_ = static_cast<const CameraCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CameraCalibration::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CameraCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.CameraCalibration)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // fixed32 width = 2;
          if (this_._internal_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                2, this_._internal_width(), target);
          }

          // fixed32 height = 3;
          if (this_._internal_height() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                3, this_._internal_height(), target);
          }

          // string distortion_model = 4;
          if (!this_._internal_distortion_model().empty()) {
            const std::string& _s = this_._internal_distortion_model();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.CameraCalibration.distortion_model");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // repeated double D = 5;
          if (this_._internal_d_size() > 0) {
            target = stream->WriteFixedPacked(5, this_._internal_d(), target);
          }

          // repeated double K = 6;
          if (this_._internal_k_size() > 0) {
            target = stream->WriteFixedPacked(6, this_._internal_k(), target);
          }

          // repeated double R = 7;
          if (this_._internal_r_size() > 0) {
            target = stream->WriteFixedPacked(7, this_._internal_r(), target);
          }

          // repeated double P = 8;
          if (this_._internal_p_size() > 0) {
            target = stream->WriteFixedPacked(8, this_._internal_p(), target);
          }

          // string frame_id = 9;
          if (!this_._internal_frame_id().empty()) {
            const std::string& _s = this_._internal_frame_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.CameraCalibration.frame_id");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.CameraCalibration)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CameraCalibration::ByteSizeLong(const MessageLite& base) {
          const CameraCalibration& this_ = static_cast<const CameraCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CameraCalibration::ByteSizeLong() const {
          const CameraCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.CameraCalibration)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double D = 5;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_d_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double K = 6;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_k_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double R = 7;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_r_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double P = 8;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_p_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // string distortion_model = 4;
            if (!this_._internal_distortion_model().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_distortion_model());
            }
            // string frame_id = 9;
            if (!this_._internal_frame_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_frame_id());
            }
          }
           {
            // .google.protobuf.Timestamp timestamp = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // fixed32 width = 2;
            if (this_._internal_width() != 0) {
              total_size += 5;
            }
            // fixed32 height = 3;
            if (this_._internal_height() != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CameraCalibration::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CameraCalibration*>(&to_msg);
  auto& from = static_cast<const CameraCalibration&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.CameraCalibration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_d()->MergeFrom(from._internal_d());
  _this->_internal_mutable_k()->MergeFrom(from._internal_k());
  _this->_internal_mutable_r()->MergeFrom(from._internal_r());
  _this->_internal_mutable_p()->MergeFrom(from._internal_p());
  if (!from._internal_distortion_model().empty()) {
    _this->_internal_set_distortion_model(from._internal_distortion_model());
  }
  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  if (from._internal_width() != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CameraCalibration::CopyFrom(const CameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.CameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CameraCalibration::InternalSwap(CameraCalibration* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.d_.InternalSwap(&other->_impl_.d_);
  _impl_.k_.InternalSwap(&other->_impl_.k_);
  _impl_.r_.InternalSwap(&other->_impl_.r_);
  _impl_.p_.InternalSwap(&other->_impl_.p_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.distortion_model_, &other->_impl_.distortion_model_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.height_)
      + sizeof(CameraCalibration::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(CameraCalibration, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata CameraCalibration::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CompressedImage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CompressedImage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_._has_bits_);
};

void CompressedImage::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CompressedImage::CompressedImage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.CompressedImage)
}
inline PROTOBUF_NDEBUG_INLINE CompressedImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::foxglove::CompressedImage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_(arena, from.data_),
        format_(arena, from.format_),
        frame_id_(arena, from.frame_id_) {}

CompressedImage::CompressedImage(
    ::google::protobuf::Arena* arena,
    const CompressedImage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CompressedImage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:foxglove.CompressedImage)
}
inline PROTOBUF_NDEBUG_INLINE CompressedImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        data_(arena),
        format_(arena),
        frame_id_(arena) {}

inline void CompressedImage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timestamp_ = {};
}
CompressedImage::~CompressedImage() {
  // @@protoc_insertion_point(destructor:foxglove.CompressedImage)
  SharedDtor(*this);
}
inline void CompressedImage::SharedDtor(MessageLite& self) {
  CompressedImage& this_ = static_cast<CompressedImage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.data_.Destroy();
  this_._impl_.format_.Destroy();
  this_._impl_.frame_id_.Destroy();
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* CompressedImage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CompressedImage(arena);
}
constexpr auto CompressedImage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CompressedImage),
                                            alignof(CompressedImage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CompressedImage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CompressedImage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CompressedImage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CompressedImage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CompressedImage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CompressedImage>(), &CompressedImage::ByteSizeLong,
            &CompressedImage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_._cached_size_),
        false,
    },
    &CompressedImage::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CompressedImage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 47, 2> CompressedImage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::CompressedImage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string frame_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_.frame_id_)}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_.timestamp_)}},
    // bytes data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_.data_)}},
    // string format = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_.format_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes data = 2;
    {PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string format = 3;
    {PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_.format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string frame_id = 4;
    {PROTOBUF_FIELD_OFFSET(CompressedImage, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\30\0\0\6\10\0\0\0"
    "foxglove.CompressedImage"
    "format"
    "frame_id"
  }},
};

PROTOBUF_NOINLINE void CompressedImage::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.CompressedImage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.format_.ClearToEmpty();
  _impl_.frame_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CompressedImage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CompressedImage& this_ = static_cast<const CompressedImage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CompressedImage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CompressedImage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.CompressedImage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // bytes data = 2;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          // string format = 3;
          if (!this_._internal_format().empty()) {
            const std::string& _s = this_._internal_format();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.CompressedImage.format");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string frame_id = 4;
          if (!this_._internal_frame_id().empty()) {
            const std::string& _s = this_._internal_frame_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.CompressedImage.frame_id");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.CompressedImage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CompressedImage::ByteSizeLong(const MessageLite& base) {
          const CompressedImage& this_ = static_cast<const CompressedImage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CompressedImage::ByteSizeLong() const {
          const CompressedImage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.CompressedImage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes data = 2;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
            // string format = 3;
            if (!this_._internal_format().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_format());
            }
            // string frame_id = 4;
            if (!this_._internal_frame_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_frame_id());
            }
          }
           {
            // .google.protobuf.Timestamp timestamp = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CompressedImage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CompressedImage*>(&to_msg);
  auto& from = static_cast<const CompressedImage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.CompressedImage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompressedImage::CopyFrom(const CompressedImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.CompressedImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CompressedImage::InternalSwap(CompressedImage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_, &other->_impl_.format_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::google::protobuf::Metadata CompressedImage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RawImage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RawImage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RawImage, _impl_._has_bits_);
};

void RawImage::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RawImage::RawImage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.RawImage)
}
inline PROTOBUF_NDEBUG_INLINE RawImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::foxglove::RawImage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        encoding_(arena, from.encoding_),
        data_(arena, from.data_),
        frame_id_(arena, from.frame_id_) {}

RawImage::RawImage(
    ::google::protobuf::Arena* arena,
    const RawImage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RawImage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, step_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::step_));

  // @@protoc_insertion_point(copy_constructor:foxglove.RawImage)
}
inline PROTOBUF_NDEBUG_INLINE RawImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        encoding_(arena),
        data_(arena),
        frame_id_(arena) {}

inline void RawImage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, step_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::step_));
}
RawImage::~RawImage() {
  // @@protoc_insertion_point(destructor:foxglove.RawImage)
  SharedDtor(*this);
}
inline void RawImage::SharedDtor(MessageLite& self) {
  RawImage& this_ = static_cast<RawImage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encoding_.Destroy();
  this_._impl_.data_.Destroy();
  this_._impl_.frame_id_.Destroy();
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* RawImage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RawImage(arena);
}
constexpr auto RawImage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RawImage),
                                            alignof(RawImage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RawImage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RawImage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RawImage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RawImage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RawImage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RawImage>(), &RawImage::ByteSizeLong,
            &RawImage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RawImage, _impl_._cached_size_),
        false,
    },
    &RawImage::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RawImage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 42, 2> RawImage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RawImage, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::RawImage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RawImage, _impl_.timestamp_)}},
    // fixed32 width = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(RawImage, _impl_.width_)}},
    // fixed32 height = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(RawImage, _impl_.height_)}},
    // string encoding = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RawImage, _impl_.encoding_)}},
    // fixed32 step = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(RawImage, _impl_.step_)}},
    // bytes data = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(RawImage, _impl_.data_)}},
    // string frame_id = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(RawImage, _impl_.frame_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(RawImage, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // fixed32 width = 2;
    {PROTOBUF_FIELD_OFFSET(RawImage, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // fixed32 height = 3;
    {PROTOBUF_FIELD_OFFSET(RawImage, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // string encoding = 4;
    {PROTOBUF_FIELD_OFFSET(RawImage, _impl_.encoding_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // fixed32 step = 5;
    {PROTOBUF_FIELD_OFFSET(RawImage, _impl_.step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // bytes data = 6;
    {PROTOBUF_FIELD_OFFSET(RawImage, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string frame_id = 7;
    {PROTOBUF_FIELD_OFFSET(RawImage, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\21\0\0\0\10\0\0\10"
    "foxglove.RawImage"
    "encoding"
    "frame_id"
  }},
};

PROTOBUF_NOINLINE void RawImage::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.RawImage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoding_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.frame_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.step_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.step_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RawImage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RawImage& this_ = static_cast<const RawImage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RawImage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RawImage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.RawImage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // fixed32 width = 2;
          if (this_._internal_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                2, this_._internal_width(), target);
          }

          // fixed32 height = 3;
          if (this_._internal_height() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                3, this_._internal_height(), target);
          }

          // string encoding = 4;
          if (!this_._internal_encoding().empty()) {
            const std::string& _s = this_._internal_encoding();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.RawImage.encoding");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // fixed32 step = 5;
          if (this_._internal_step() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                5, this_._internal_step(), target);
          }

          // bytes data = 6;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(6, _s, target);
          }

          // string frame_id = 7;
          if (!this_._internal_frame_id().empty()) {
            const std::string& _s = this_._internal_frame_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.RawImage.frame_id");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.RawImage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RawImage::ByteSizeLong(const MessageLite& base) {
          const RawImage& this_ = static_cast<const RawImage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RawImage::ByteSizeLong() const {
          const RawImage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.RawImage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string encoding = 4;
            if (!this_._internal_encoding().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_encoding());
            }
            // bytes data = 6;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
            // string frame_id = 7;
            if (!this_._internal_frame_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_frame_id());
            }
          }
           {
            // .google.protobuf.Timestamp timestamp = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // fixed32 width = 2;
            if (this_._internal_width() != 0) {
              total_size += 5;
            }
            // fixed32 height = 3;
            if (this_._internal_height() != 0) {
              total_size += 5;
            }
            // fixed32 step = 5;
            if (this_._internal_step() != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RawImage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RawImage*>(&to_msg);
  auto& from = static_cast<const RawImage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.RawImage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoding().empty()) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  if (from._internal_width() != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_step() != 0) {
    _this->_impl_.step_ = from._impl_.step_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RawImage::CopyFrom(const RawImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.RawImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RawImage::InternalSwap(RawImage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encoding_, &other->_impl_.encoding_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawImage, _impl_.step_)
      + sizeof(RawImage::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(RawImage, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata RawImage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CompressedVideo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CompressedVideo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_._has_bits_);
};

void CompressedVideo::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CompressedVideo::CompressedVideo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.CompressedVideo)
}
inline PROTOBUF_NDEBUG_INLINE CompressedVideo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::foxglove::CompressedVideo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        frame_id_(arena, from.frame_id_),
        data_(arena, from.data_),
        format_(arena, from.format_) {}

CompressedVideo::CompressedVideo(
    ::google::protobuf::Arena* arena,
    const CompressedVideo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CompressedVideo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:foxglove.CompressedVideo)
}
inline PROTOBUF_NDEBUG_INLINE CompressedVideo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        frame_id_(arena),
        data_(arena),
        format_(arena) {}

inline void CompressedVideo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timestamp_ = {};
}
CompressedVideo::~CompressedVideo() {
  // @@protoc_insertion_point(destructor:foxglove.CompressedVideo)
  SharedDtor(*this);
}
inline void CompressedVideo::SharedDtor(MessageLite& self) {
  CompressedVideo& this_ = static_cast<CompressedVideo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.frame_id_.Destroy();
  this_._impl_.data_.Destroy();
  this_._impl_.format_.Destroy();
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* CompressedVideo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CompressedVideo(arena);
}
constexpr auto CompressedVideo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CompressedVideo),
                                            alignof(CompressedVideo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CompressedVideo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CompressedVideo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CompressedVideo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CompressedVideo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CompressedVideo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CompressedVideo>(), &CompressedVideo::ByteSizeLong,
            &CompressedVideo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_._cached_size_),
        false,
    },
    &CompressedVideo::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CompressedVideo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 47, 2> CompressedVideo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::CompressedVideo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string format = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.format_)}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.timestamp_)}},
    // string frame_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.frame_id_)}},
    // bytes data = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string frame_id = 2;
    {PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes data = 3;
    {PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string format = 4;
    {PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\30\0\10\0\6\0\0\0"
    "foxglove.CompressedVideo"
    "frame_id"
    "format"
  }},
};

PROTOBUF_NOINLINE void CompressedVideo::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.CompressedVideo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frame_id_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.format_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CompressedVideo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CompressedVideo& this_ = static_cast<const CompressedVideo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CompressedVideo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CompressedVideo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.CompressedVideo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // string frame_id = 2;
          if (!this_._internal_frame_id().empty()) {
            const std::string& _s = this_._internal_frame_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.CompressedVideo.frame_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bytes data = 3;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(3, _s, target);
          }

          // string format = 4;
          if (!this_._internal_format().empty()) {
            const std::string& _s = this_._internal_format();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.CompressedVideo.format");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.CompressedVideo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CompressedVideo::ByteSizeLong(const MessageLite& base) {
          const CompressedVideo& this_ = static_cast<const CompressedVideo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CompressedVideo::ByteSizeLong() const {
          const CompressedVideo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.CompressedVideo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string frame_id = 2;
            if (!this_._internal_frame_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_frame_id());
            }
            // bytes data = 3;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
            // string format = 4;
            if (!this_._internal_format().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_format());
            }
          }
           {
            // .google.protobuf.Timestamp timestamp = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CompressedVideo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CompressedVideo*>(&to_msg);
  auto& from = static_cast<const CompressedVideo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.CompressedVideo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompressedVideo::CopyFrom(const CompressedVideo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.CompressedVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CompressedVideo::InternalSwap(CompressedVideo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_, &other->_impl_.format_, arena);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::google::protobuf::Metadata CompressedVideo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LocationFix::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LocationFix>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LocationFix, _impl_._has_bits_);
};

void LocationFix::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LocationFix::LocationFix(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.LocationFix)
}
inline PROTOBUF_NDEBUG_INLINE LocationFix::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::foxglove::LocationFix& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        position_covariance_{visibility, arena, from.position_covariance_},
        frame_id_(arena, from.frame_id_) {}

LocationFix::LocationFix(
    ::google::protobuf::Arena* arena,
    const LocationFix& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LocationFix* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latitude_),
           offsetof(Impl_, position_covariance_type_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::position_covariance_type_));

  // @@protoc_insertion_point(copy_constructor:foxglove.LocationFix)
}
inline PROTOBUF_NDEBUG_INLINE LocationFix::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        position_covariance_{visibility, arena},
        frame_id_(arena) {}

inline void LocationFix::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, position_covariance_type_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::position_covariance_type_));
}
LocationFix::~LocationFix() {
  // @@protoc_insertion_point(destructor:foxglove.LocationFix)
  SharedDtor(*this);
}
inline void LocationFix::SharedDtor(MessageLite& self) {
  LocationFix& this_ = static_cast<LocationFix&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.frame_id_.Destroy();
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* LocationFix::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LocationFix(arena);
}
constexpr auto LocationFix::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.position_covariance_) +
          decltype(LocationFix::_impl_.position_covariance_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(LocationFix), alignof(LocationFix), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LocationFix::PlacementNew_,
                                 sizeof(LocationFix),
                                 alignof(LocationFix));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LocationFix::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LocationFix_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LocationFix::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LocationFix>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LocationFix::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LocationFix>(), &LocationFix::ByteSizeLong,
            &LocationFix::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LocationFix, _impl_._cached_size_),
        false,
    },
    &LocationFix::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LocationFix::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 37, 2> LocationFix::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LocationFix, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::LocationFix>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double latitude = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.latitude_)}},
    // double longitude = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.longitude_)}},
    // double altitude = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.altitude_)}},
    // repeated double position_covariance = 4;
    {::_pbi::TcParser::FastF64P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.position_covariance_)}},
    // .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocationFix, _impl_.position_covariance_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.position_covariance_type_)}},
    // .google.protobuf.Timestamp timestamp = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.timestamp_)}},
    // string frame_id = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.frame_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double latitude = 1;
    {PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.latitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude = 2;
    {PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.longitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double altitude = 3;
    {PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.altitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated double position_covariance = 4;
    {PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.position_covariance_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
    {PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.position_covariance_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string frame_id = 7;
    {PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\24\0\0\0\0\0\0\10"
    "foxglove.LocationFix"
    "frame_id"
  }},
};

PROTOBUF_NOINLINE void LocationFix::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.LocationFix)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.position_covariance_.Clear();
  _impl_.frame_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.position_covariance_type_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.position_covariance_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LocationFix::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LocationFix& this_ = static_cast<const LocationFix&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LocationFix::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LocationFix& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.LocationFix)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double latitude = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_latitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_latitude(), target);
          }

          // double longitude = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_longitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_longitude(), target);
          }

          // double altitude = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_altitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_altitude(), target);
          }

          // repeated double position_covariance = 4;
          if (this_._internal_position_covariance_size() > 0) {
            target = stream->WriteFixedPacked(4, this_._internal_position_covariance(), target);
          }

          // .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
          if (this_._internal_position_covariance_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_position_covariance_type(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // string frame_id = 7;
          if (!this_._internal_frame_id().empty()) {
            const std::string& _s = this_._internal_frame_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.LocationFix.frame_id");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.LocationFix)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LocationFix::ByteSizeLong(const MessageLite& base) {
          const LocationFix& this_ = static_cast<const LocationFix&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LocationFix::ByteSizeLong() const {
          const LocationFix& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.LocationFix)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double position_covariance = 4;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_position_covariance_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // string frame_id = 7;
            if (!this_._internal_frame_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_frame_id());
            }
          }
           {
            // .google.protobuf.Timestamp timestamp = 6;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // double latitude = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_latitude()) != 0) {
              total_size += 9;
            }
            // double longitude = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_longitude()) != 0) {
              total_size += 9;
            }
            // double altitude = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_altitude()) != 0) {
              total_size += 9;
            }
            // .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
            if (this_._internal_position_covariance_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_position_covariance_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LocationFix::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LocationFix*>(&to_msg);
  auto& from = static_cast<const LocationFix&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.LocationFix)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_position_covariance()->MergeFrom(from._internal_position_covariance());
  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_latitude()) != 0) {
    _this->_impl_.latitude_ = from._impl_.latitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_longitude()) != 0) {
    _this->_impl_.longitude_ = from._impl_.longitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_altitude()) != 0) {
    _this->_impl_.altitude_ = from._impl_.altitude_;
  }
  if (from._internal_position_covariance_type() != 0) {
    _this->_impl_.position_covariance_type_ = from._impl_.position_covariance_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LocationFix::CopyFrom(const LocationFix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.LocationFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LocationFix::InternalSwap(LocationFix* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.position_covariance_.InternalSwap(&other->_impl_.position_covariance_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.position_covariance_type_)
      + sizeof(LocationFix::_impl_.position_covariance_type_)
      - PROTOBUF_FIELD_OFFSET(LocationFix, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata LocationFix::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FrameTransform::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FrameTransform>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_._has_bits_);
};

void FrameTransform::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FrameTransform::FrameTransform(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.FrameTransform)
}
inline PROTOBUF_NDEBUG_INLINE FrameTransform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::foxglove::FrameTransform& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        parent_frame_id_(arena, from.parent_frame_id_),
        child_frame_id_(arena, from.child_frame_id_) {}

FrameTransform::FrameTransform(
    ::google::protobuf::Arena* arena,
    const FrameTransform& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FrameTransform* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  _impl_.translation_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::foxglove::Vector3>(
                              arena, *from._impl_.translation_)
                        : nullptr;
  _impl_.rotation_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::foxglove::Quaternion>(
                              arena, *from._impl_.rotation_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:foxglove.FrameTransform)
}
inline PROTOBUF_NDEBUG_INLINE FrameTransform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        parent_frame_id_(arena),
        child_frame_id_(arena) {}

inline void FrameTransform::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, rotation_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::rotation_));
}
FrameTransform::~FrameTransform() {
  // @@protoc_insertion_point(destructor:foxglove.FrameTransform)
  SharedDtor(*this);
}
inline void FrameTransform::SharedDtor(MessageLite& self) {
  FrameTransform& this_ = static_cast<FrameTransform&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.parent_frame_id_.Destroy();
  this_._impl_.child_frame_id_.Destroy();
  delete this_._impl_.timestamp_;
  delete this_._impl_.translation_;
  delete this_._impl_.rotation_;
  this_._impl_.~Impl_();
}

inline void* FrameTransform::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FrameTransform(arena);
}
constexpr auto FrameTransform::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FrameTransform),
                                            alignof(FrameTransform));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FrameTransform::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FrameTransform_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FrameTransform::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FrameTransform>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FrameTransform::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FrameTransform>(), &FrameTransform::ByteSizeLong,
            &FrameTransform::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_._cached_size_),
        false,
    },
    &FrameTransform::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FrameTransform::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 61, 2> FrameTransform::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::FrameTransform>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.timestamp_)}},
    // string parent_frame_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.parent_frame_id_)}},
    // string child_frame_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.child_frame_id_)}},
    // .foxglove.Vector3 translation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.translation_)}},
    // .foxglove.Quaternion rotation = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.rotation_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string parent_frame_id = 2;
    {PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.parent_frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string child_frame_id = 3;
    {PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.child_frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .foxglove.Vector3 translation = 4;
    {PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.translation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .foxglove.Quaternion rotation = 5;
    {PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.rotation_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::foxglove::Vector3>()},
    {::_pbi::TcParser::GetTable<::foxglove::Quaternion>()},
  }}, {{
    "\27\0\17\16\0\0\0\0"
    "foxglove.FrameTransform"
    "parent_frame_id"
    "child_frame_id"
  }},
};

PROTOBUF_NOINLINE void FrameTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.FrameTransform)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parent_frame_id_.ClearToEmpty();
  _impl_.child_frame_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.translation_ != nullptr);
      _impl_.translation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FrameTransform::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FrameTransform& this_ = static_cast<const FrameTransform&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FrameTransform::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FrameTransform& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.FrameTransform)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // string parent_frame_id = 2;
          if (!this_._internal_parent_frame_id().empty()) {
            const std::string& _s = this_._internal_parent_frame_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.FrameTransform.parent_frame_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string child_frame_id = 3;
          if (!this_._internal_child_frame_id().empty()) {
            const std::string& _s = this_._internal_child_frame_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.FrameTransform.child_frame_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .foxglove.Vector3 translation = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.translation_, this_._impl_.translation_->GetCachedSize(), target,
                stream);
          }

          // .foxglove.Quaternion rotation = 5;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.rotation_, this_._impl_.rotation_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.FrameTransform)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FrameTransform::ByteSizeLong(const MessageLite& base) {
          const FrameTransform& this_ = static_cast<const FrameTransform&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FrameTransform::ByteSizeLong() const {
          const FrameTransform& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.FrameTransform)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string parent_frame_id = 2;
            if (!this_._internal_parent_frame_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_parent_frame_id());
            }
            // string child_frame_id = 3;
            if (!this_._internal_child_frame_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_child_frame_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .google.protobuf.Timestamp timestamp = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
            // .foxglove.Vector3 translation = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.translation_);
            }
            // .foxglove.Quaternion rotation = 5;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rotation_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FrameTransform::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FrameTransform*>(&to_msg);
  auto& from = static_cast<const FrameTransform&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.FrameTransform)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent_frame_id().empty()) {
    _this->_internal_set_parent_frame_id(from._internal_parent_frame_id());
  }
  if (!from._internal_child_frame_id().empty()) {
    _this->_internal_set_child_frame_id(from._internal_child_frame_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.translation_ != nullptr);
      if (_this->_impl_.translation_ == nullptr) {
        _this->_impl_.translation_ =
            ::google::protobuf::Message::CopyConstruct<::foxglove::Vector3>(arena, *from._impl_.translation_);
      } else {
        _this->_impl_.translation_->MergeFrom(*from._impl_.translation_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.rotation_ != nullptr);
      if (_this->_impl_.rotation_ == nullptr) {
        _this->_impl_.rotation_ =
            ::google::protobuf::Message::CopyConstruct<::foxglove::Quaternion>(arena, *from._impl_.rotation_);
      } else {
        _this->_impl_.rotation_->MergeFrom(*from._impl_.rotation_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTransform::CopyFrom(const FrameTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.FrameTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FrameTransform::InternalSwap(FrameTransform* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_frame_id_, &other->_impl_.parent_frame_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.child_frame_id_, &other->_impl_.child_frame_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.rotation_)
      + sizeof(FrameTransform::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(FrameTransform, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata FrameTransform::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FrameTransforms::_Internal {
 public:
};

FrameTransforms::FrameTransforms(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.FrameTransforms)
}
inline PROTOBUF_NDEBUG_INLINE FrameTransforms::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::foxglove::FrameTransforms& from_msg)
      : transforms_{visibility, arena, from.transforms_},
        _cached_size_{0} {}

FrameTransforms::FrameTransforms(
    ::google::protobuf::Arena* arena,
    const FrameTransforms& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FrameTransforms* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:foxglove.FrameTransforms)
}
inline PROTOBUF_NDEBUG_INLINE FrameTransforms::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : transforms_{visibility, arena},
        _cached_size_{0} {}

inline void FrameTransforms::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FrameTransforms::~FrameTransforms() {
  // @@protoc_insertion_point(destructor:foxglove.FrameTransforms)
  SharedDtor(*this);
}
inline void FrameTransforms::SharedDtor(MessageLite& self) {
  FrameTransforms& this_ = static_cast<FrameTransforms&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* FrameTransforms::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FrameTransforms(arena);
}
constexpr auto FrameTransforms::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(FrameTransforms, _impl_.transforms_) +
          decltype(FrameTransforms::_impl_.transforms_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(FrameTransforms), alignof(FrameTransforms), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&FrameTransforms::PlacementNew_,
                                 sizeof(FrameTransforms),
                                 alignof(FrameTransforms));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FrameTransforms::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FrameTransforms_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FrameTransforms::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FrameTransforms>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FrameTransforms::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FrameTransforms>(), &FrameTransforms::ByteSizeLong,
            &FrameTransforms::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FrameTransforms, _impl_._cached_size_),
        false,
    },
    &FrameTransforms::kDescriptorMethods,
    &descriptor_table_foxglove_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FrameTransforms::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FrameTransforms::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::foxglove::FrameTransforms>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .foxglove.FrameTransform transforms = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FrameTransforms, _impl_.transforms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .foxglove.FrameTransform transforms = 1;
    {PROTOBUF_FIELD_OFFSET(FrameTransforms, _impl_.transforms_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::foxglove::FrameTransform>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void FrameTransforms::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.FrameTransforms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transforms_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FrameTransforms::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FrameTransforms& this_ = static_cast<const FrameTransforms&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FrameTransforms::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FrameTransforms& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:foxglove.FrameTransforms)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .foxglove.FrameTransform transforms = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_transforms_size());
               i < n; i++) {
            const auto& repfield = this_._internal_transforms().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:foxglove.FrameTransforms)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FrameTransforms::ByteSizeLong(const MessageLite& base) {
          const FrameTransforms& this_ = static_cast<const FrameTransforms&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FrameTransforms::ByteSizeLong() const {
          const FrameTransforms& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:foxglove.FrameTransforms)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .foxglove.FrameTransform transforms = 1;
            {
              total_size += 1UL * this_._internal_transforms_size();
              for (const auto& msg : this_._internal_transforms()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FrameTransforms::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FrameTransforms*>(&to_msg);
  auto& from = static_cast<const FrameTransforms&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.FrameTransforms)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_transforms()->MergeFrom(
      from._internal_transforms());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTransforms::CopyFrom(const FrameTransforms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.FrameTransforms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FrameTransforms::InternalSwap(FrameTransforms* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transforms_.InternalSwap(&other->_impl_.transforms_);
}

::google::protobuf::Metadata FrameTransforms::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_foxglove_5fmsgs_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
