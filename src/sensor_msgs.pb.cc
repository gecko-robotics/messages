// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensor_msgs.proto
// Protobuf C++ Version: 5.29.3

#include "sensor_msgs.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kevin {

inline constexpr SatNav_NavSatStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : status_{static_cast< ::kevin::SatNav_StatusFix >(0)},
        service_{static_cast< ::kevin::SatNav_ServiceType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SatNav_NavSatStatus::SatNav_NavSatStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SatNav_NavSatStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SatNav_NavSatStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SatNav_NavSatStatusDefaultTypeInternal() {}
  union {
    SatNav_NavSatStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SatNav_NavSatStatusDefaultTypeInternal _SatNav_NavSatStatus_default_instance_;

inline constexpr ImuInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        accel_cov_{nullptr},
        gyro_cov_{nullptr},
        mag_cov_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ImuInfo::ImuInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImuInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuInfoDefaultTypeInternal() {}
  union {
    ImuInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuInfoDefaultTypeInternal _ImuInfo_default_instance_;

inline constexpr Temperature::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        temperature_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Temperature::Temperature(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TemperatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemperatureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemperatureDefaultTypeInternal() {}
  union {
    Temperature _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemperatureDefaultTypeInternal _Temperature_default_instance_;

inline constexpr SatNav::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        status_{nullptr},
        position_covariance_{nullptr},
        latitude_{0},
        longitude_{0},
        altitude_{0},
        type_{static_cast< ::kevin::PositionCovariance >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR SatNav::SatNav(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SatNavDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SatNavDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SatNavDefaultTypeInternal() {}
  union {
    SatNav _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SatNavDefaultTypeInternal _SatNav_default_instance_;

inline constexpr Range::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        radiation_type_{static_cast< ::kevin::Range_RangeType >(0)},
        field_of_view_{0},
        min_range_{0},
        max_range_{0},
        range_{0},
        variance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Range::Range(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeDefaultTypeInternal _Range_default_instance_;

inline constexpr PressureTemperature::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        pressure_{0},
        temperature_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PressureTemperature::PressureTemperature(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PressureTemperatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PressureTemperatureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PressureTemperatureDefaultTypeInternal() {}
  union {
    PressureTemperature _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PressureTemperatureDefaultTypeInternal _PressureTemperature_default_instance_;

inline constexpr Pressure::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        pressure_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Pressure::Pressure(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PressureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PressureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PressureDefaultTypeInternal() {}
  union {
    Pressure _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PressureDefaultTypeInternal _Pressure_default_instance_;

inline constexpr Odometry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        child_frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        header_{nullptr},
        pose_{nullptr},
        twist_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Odometry::Odometry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OdometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryDefaultTypeInternal _Odometry_default_instance_;

inline constexpr MagneticField::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        magnetic_field_{nullptr},
        covariance_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MagneticField::MagneticField(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MagneticFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MagneticFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MagneticFieldDefaultTypeInternal() {}
  union {
    MagneticField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MagneticFieldDefaultTypeInternal _MagneticField_default_instance_;

inline constexpr LaserScan::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ranges_{},
        intensities_{},
        header_{nullptr},
        pose_{nullptr},
        start_angle_{0},
        end_angle_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LaserScan::LaserScan(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaserScanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaserScanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaserScanDefaultTypeInternal() {}
  union {
    LaserScan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaserScanDefaultTypeInternal _LaserScan_default_instance_;

inline constexpr Imu::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        linear_acceleration_{nullptr},
        angular_velocity_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Imu::Imu(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuDefaultTypeInternal() {}
  union {
    Imu _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuDefaultTypeInternal _Imu_default_instance_;

inline constexpr HighResolutionImu::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        linear_acceleration_{nullptr},
        angular_velocity_{nullptr},
        orientation_{nullptr},
        magnetic_field_{nullptr},
        pressure_{0},
        temperature_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HighResolutionImu::HighResolutionImu(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HighResolutionImuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HighResolutionImuDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HighResolutionImuDefaultTypeInternal() {}
  union {
    HighResolutionImu _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HighResolutionImuDefaultTypeInternal _HighResolutionImu_default_instance_;
}  // namespace kevin
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensor_5fmsgs_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensor_5fmsgs_2eproto = nullptr;
const ::uint32_t
    TableStruct_sensor_5fmsgs_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.linear_acceleration_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.angular_velocity_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::kevin::HighResolutionImu, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::HighResolutionImu, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::HighResolutionImu, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::HighResolutionImu, _impl_.linear_acceleration_),
        PROTOBUF_FIELD_OFFSET(::kevin::HighResolutionImu, _impl_.angular_velocity_),
        PROTOBUF_FIELD_OFFSET(::kevin::HighResolutionImu, _impl_.orientation_),
        PROTOBUF_FIELD_OFFSET(::kevin::HighResolutionImu, _impl_.magnetic_field_),
        PROTOBUF_FIELD_OFFSET(::kevin::HighResolutionImu, _impl_.pressure_),
        PROTOBUF_FIELD_OFFSET(::kevin::HighResolutionImu, _impl_.temperature_),
        0,
        1,
        2,
        3,
        4,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kevin::ImuInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImuInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::ImuInfo, _impl_.accel_cov_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImuInfo, _impl_.gyro_cov_),
        PROTOBUF_FIELD_OFFSET(::kevin::ImuInfo, _impl_.mag_cov_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _impl_.magnetic_field_),
        PROTOBUF_FIELD_OFFSET(::kevin::MagneticField, _impl_.covariance_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::kevin::Range, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::Range, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::Range, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::Range, _impl_.radiation_type_),
        PROTOBUF_FIELD_OFFSET(::kevin::Range, _impl_.field_of_view_),
        PROTOBUF_FIELD_OFFSET(::kevin::Range, _impl_.min_range_),
        PROTOBUF_FIELD_OFFSET(::kevin::Range, _impl_.max_range_),
        PROTOBUF_FIELD_OFFSET(::kevin::Range, _impl_.range_),
        PROTOBUF_FIELD_OFFSET(::kevin::Range, _impl_.variance_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kevin::Pressure, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::Pressure, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::Pressure, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::Pressure, _impl_.pressure_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kevin::Temperature, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::Temperature, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::Temperature, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::Temperature, _impl_.temperature_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kevin::PressureTemperature, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::PressureTemperature, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::PressureTemperature, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::PressureTemperature, _impl_.pressure_),
        PROTOBUF_FIELD_OFFSET(::kevin::PressureTemperature, _impl_.temperature_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kevin::Odometry, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::Odometry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::Odometry, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::Odometry, _impl_.child_frame_id_),
        PROTOBUF_FIELD_OFFSET(::kevin::Odometry, _impl_.pose_),
        PROTOBUF_FIELD_OFFSET(::kevin::Odometry, _impl_.twist_),
        0,
        ~0u,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav_NavSatStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav_NavSatStatus, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav_NavSatStatus, _impl_.service_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.latitude_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.longitude_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.altitude_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.position_covariance_),
        PROTOBUF_FIELD_OFFSET(::kevin::SatNav, _impl_.type_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kevin::LaserScan, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::LaserScan, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::LaserScan, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::kevin::LaserScan, _impl_.pose_),
        PROTOBUF_FIELD_OFFSET(::kevin::LaserScan, _impl_.start_angle_),
        PROTOBUF_FIELD_OFFSET(::kevin::LaserScan, _impl_.end_angle_),
        PROTOBUF_FIELD_OFFSET(::kevin::LaserScan, _impl_.ranges_),
        PROTOBUF_FIELD_OFFSET(::kevin::LaserScan, _impl_.intensities_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::kevin::Imu)},
        {14, 29, -1, sizeof(::kevin::HighResolutionImu)},
        {36, 47, -1, sizeof(::kevin::ImuInfo)},
        {50, 61, -1, sizeof(::kevin::MagneticField)},
        {64, 79, -1, sizeof(::kevin::Range)},
        {86, 96, -1, sizeof(::kevin::Pressure)},
        {98, 108, -1, sizeof(::kevin::Temperature)},
        {110, 121, -1, sizeof(::kevin::PressureTemperature)},
        {124, 136, -1, sizeof(::kevin::Odometry)},
        {140, -1, -1, sizeof(::kevin::SatNav_NavSatStatus)},
        {150, 165, -1, sizeof(::kevin::SatNav)},
        {172, 186, -1, sizeof(::kevin::LaserScan)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kevin::_Imu_default_instance_._instance,
    &::kevin::_HighResolutionImu_default_instance_._instance,
    &::kevin::_ImuInfo_default_instance_._instance,
    &::kevin::_MagneticField_default_instance_._instance,
    &::kevin::_Range_default_instance_._instance,
    &::kevin::_Pressure_default_instance_._instance,
    &::kevin::_Temperature_default_instance_._instance,
    &::kevin::_PressureTemperature_default_instance_._instance,
    &::kevin::_Odometry_default_instance_._instance,
    &::kevin::_SatNav_NavSatStatus_default_instance_._instance,
    &::kevin::_SatNav_default_instance_._instance,
    &::kevin::_LaserScan_default_instance_._instance,
};
const char descriptor_table_protodef_sensor_5fmsgs_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021sensor_msgs.proto\022\005kevin\032\023standard_msg"
    "s.proto\032\017math_msgs.proto\032\023geometry_msgs."
    "proto\"{\n\003Imu\022\035\n\006header\030\001 \001(\0132\r.kevin.Hea"
    "der\022+\n\023linear_acceleration\030\002 \001(\0132\016.kevin"
    ".Vector3\022(\n\020angular_velocity\030\003 \001(\0132\016.kev"
    "in.Vector3\"\200\002\n\021HighResolutionImu\022\035\n\006head"
    "er\030\001 \001(\0132\r.kevin.Header\022+\n\023linear_accele"
    "ration\030\002 \001(\0132\016.kevin.Vector3\022(\n\020angular_"
    "velocity\030\003 \001(\0132\016.kevin.Vector3\022&\n\013orient"
    "ation\030\004 \001(\0132\021.kevin.Quaternion\022&\n\016magnet"
    "ic_field\030\005 \001(\0132\016.kevin.Vector3\022\020\n\010pressu"
    "re\030\006 \001(\001\022\023\n\013temperature\030\007 \001(\001\"{\n\007ImuInfo"
    "\022%\n\taccel_cov\030\001 \001(\0132\022.kevin.Covariance6\022"
    "$\n\010gyro_cov\030\002 \001(\0132\022.kevin.Covariance6\022#\n"
    "\007mag_cov\030\003 \001(\0132\022.kevin.Covariance6\"~\n\rMa"
    "gneticField\022\035\n\006header\030\001 \001(\0132\r.kevin.Head"
    "er\022&\n\016magnetic_field\030\002 \001(\0132\016.kevin.Vecto"
    "r3\022&\n\ncovariance\030\003 \001(\0132\022.kevin.Covarianc"
    "e6\"\352\001\n\005Range\022\035\n\006header\030\001 \001(\0132\r.kevin.Hea"
    "der\022.\n\016radiation_type\030\002 \001(\0162\026.kevin.Rang"
    "e.RangeType\022\025\n\rfield_of_view\030\003 \001(\002\022\021\n\tmi"
    "n_range\030\004 \001(\002\022\021\n\tmax_range\030\005 \001(\002\022\r\n\005rang"
    "e\030\006 \001(\002\022\020\n\010variance\030\007 \001(\002\"4\n\tRangeType\022\016"
    "\n\nULTRASOUND\020\000\022\014\n\010INFRARED\020\001\022\t\n\005LASER\020\002\""
    ";\n\010Pressure\022\035\n\006header\030\001 \001(\0132\r.kevin.Head"
    "er\022\020\n\010pressure\030\002 \001(\001\"A\n\013Temperature\022\035\n\006h"
    "eader\030\001 \001(\0132\r.kevin.Header\022\023\n\013temperatur"
    "e\030\002 \001(\001\"[\n\023PressureTemperature\022\035\n\006header"
    "\030\001 \001(\0132\r.kevin.Header\022\020\n\010pressure\030\002 \001(\001\022"
    "\023\n\013temperature\030\003 \001(\001\"y\n\010Odometry\022\035\n\006head"
    "er\030\001 \001(\0132\r.kevin.Header\022\026\n\016child_frame_i"
    "d\030\002 \001(\t\022\031\n\004pose\030\003 \001(\0132\013.kevin.Pose\022\033\n\005tw"
    "ist\030\004 \001(\0132\014.kevin.Twist\"\204\004\n\006SatNav\022\035\n\006he"
    "ader\030\001 \001(\0132\r.kevin.Header\022*\n\006status\030\002 \001("
    "\0132\032.kevin.SatNav.NavSatStatus\022\020\n\010latitud"
    "e\030\003 \001(\001\022\021\n\tlongitude\030\004 \001(\001\022\020\n\010altitude\030\005"
    " \001(\001\022/\n\023position_covariance\030\006 \001(\0132\022.kevi"
    "n.Covariance6\022\'\n\004type\030\007 \001(\0162\031.kevin.Posi"
    "tionCovariance\032c\n\014NavSatStatus\022\'\n\006status"
    "\030\001 \001(\0162\027.kevin.SatNav.StatusFix\022*\n\007servi"
    "ce\030\002 \001(\0162\031.kevin.SatNav.ServiceType\"E\n\tS"
    "tatusFix\022\016\n\nSTATUS_FIX\020\000\022\023\n\017STATUS_SBAS_"
    "FIX\020\001\022\023\n\017STATUS_GBAS_FIX\020\002\"r\n\013ServiceTyp"
    "e\022\023\n\017SERVICE_UNKNOWN\020\000\022\017\n\013SERVICE_GPS\020\001\022"
    "\023\n\017SERVICE_GLONASS\020\002\022\023\n\017SERVICE_COMPASS\020"
    "\004\022\023\n\017SERVICE_GALILEO\020\010\"\222\001\n\tLaserScan\022\035\n\006"
    "header\030\001 \001(\0132\r.kevin.Header\022\031\n\004pose\030\002 \001("
    "\0132\013.kevin.Pose\022\023\n\013start_angle\030\003 \001(\001\022\021\n\te"
    "nd_angle\030\004 \001(\001\022\016\n\006ranges\030\005 \003(\001\022\023\n\013intens"
    "ities\030\006 \003(\001*\222\001\n\022PositionCovariance\022\033\n\027CO"
    "VARIANCE_TYPE_UNKNOWN\020\000\022 \n\034COVARIANCE_TY"
    "PE_APPROXIMATED\020\001\022\"\n\036COVARIANCE_TYPE_DIA"
    "GONAL_KNOWN\020\002\022\031\n\025COVARIANCE_TYPE_KNOWN\020\003"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensor_5fmsgs_2eproto_deps[3] =
    {
        &::descriptor_table_geometry_5fmsgs_2eproto,
        &::descriptor_table_math_5fmsgs_2eproto,
        &::descriptor_table_standard_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_sensor_5fmsgs_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sensor_5fmsgs_2eproto = {
    false,
    false,
    2128,
    descriptor_table_protodef_sensor_5fmsgs_2eproto,
    "sensor_msgs.proto",
    &descriptor_table_sensor_5fmsgs_2eproto_once,
    descriptor_table_sensor_5fmsgs_2eproto_deps,
    3,
    12,
    schemas,
    file_default_instances,
    TableStruct_sensor_5fmsgs_2eproto::offsets,
    file_level_enum_descriptors_sensor_5fmsgs_2eproto,
    file_level_service_descriptors_sensor_5fmsgs_2eproto,
};
namespace kevin {
const ::google::protobuf::EnumDescriptor* Range_RangeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensor_5fmsgs_2eproto);
  return file_level_enum_descriptors_sensor_5fmsgs_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Range_RangeType_internal_data_[] = {
    196608u, 0u, };
bool Range_RangeType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Range_RangeType Range::ULTRASOUND;
constexpr Range_RangeType Range::INFRARED;
constexpr Range_RangeType Range::LASER;
constexpr Range_RangeType Range::RangeType_MIN;
constexpr Range_RangeType Range::RangeType_MAX;
constexpr int Range::RangeType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SatNav_StatusFix_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensor_5fmsgs_2eproto);
  return file_level_enum_descriptors_sensor_5fmsgs_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t SatNav_StatusFix_internal_data_[] = {
    196608u, 0u, };
bool SatNav_StatusFix_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SatNav_StatusFix SatNav::STATUS_FIX;
constexpr SatNav_StatusFix SatNav::STATUS_SBAS_FIX;
constexpr SatNav_StatusFix SatNav::STATUS_GBAS_FIX;
constexpr SatNav_StatusFix SatNav::StatusFix_MIN;
constexpr SatNav_StatusFix SatNav::StatusFix_MAX;
constexpr int SatNav::StatusFix_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SatNav_ServiceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensor_5fmsgs_2eproto);
  return file_level_enum_descriptors_sensor_5fmsgs_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t SatNav_ServiceType_internal_data_[] = {
    196608u, 32u, 34u, };
bool SatNav_ServiceType_IsValid(int value) {
  return 0 <= value && value <= 8 && ((279u >> value) & 1) != 0;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SatNav_ServiceType SatNav::SERVICE_UNKNOWN;
constexpr SatNav_ServiceType SatNav::SERVICE_GPS;
constexpr SatNav_ServiceType SatNav::SERVICE_GLONASS;
constexpr SatNav_ServiceType SatNav::SERVICE_COMPASS;
constexpr SatNav_ServiceType SatNav::SERVICE_GALILEO;
constexpr SatNav_ServiceType SatNav::ServiceType_MIN;
constexpr SatNav_ServiceType SatNav::ServiceType_MAX;
constexpr int SatNav::ServiceType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* PositionCovariance_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensor_5fmsgs_2eproto);
  return file_level_enum_descriptors_sensor_5fmsgs_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t PositionCovariance_internal_data_[] = {
    262144u, 0u, };
bool PositionCovariance_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class Imu::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Imu>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Imu, _impl_._has_bits_);
};

void Imu::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Imu::clear_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_ != nullptr) _impl_.linear_acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Imu::clear_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Imu::Imu(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.Imu)
}
inline PROTOBUF_NDEBUG_INLINE Imu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::Imu& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Imu::Imu(
    ::google::protobuf::Arena* arena,
    const Imu& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Imu* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.linear_acceleration_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.linear_acceleration_)
                        : nullptr;
  _impl_.angular_velocity_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.angular_velocity_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.Imu)
}
inline PROTOBUF_NDEBUG_INLINE Imu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Imu::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, angular_velocity_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::angular_velocity_));
}
Imu::~Imu() {
  // @@protoc_insertion_point(destructor:kevin.Imu)
  SharedDtor(*this);
}
inline void Imu::SharedDtor(MessageLite& self) {
  Imu& this_ = static_cast<Imu&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.linear_acceleration_;
  delete this_._impl_.angular_velocity_;
  this_._impl_.~Impl_();
}

inline void* Imu::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Imu(arena);
}
constexpr auto Imu::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Imu),
                                            alignof(Imu));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Imu::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Imu_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Imu::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Imu>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Imu::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Imu>(), &Imu::ByteSizeLong,
            &Imu::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Imu, _impl_._cached_size_),
        false,
    },
    &Imu::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Imu::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Imu::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Imu, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::Imu>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.header_)}},
    // .kevin.Vector3 linear_acceleration = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Imu, _impl_.linear_acceleration_)}},
    // .kevin.Vector3 angular_velocity = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Imu, _impl_.angular_velocity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 linear_acceleration = 2;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.linear_acceleration_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 angular_velocity = 3;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.angular_velocity_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.Imu)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.linear_acceleration_ != nullptr);
      _impl_.linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Imu::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Imu& this_ = static_cast<const Imu&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Imu::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Imu& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.Imu)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 linear_acceleration = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.linear_acceleration_, this_._impl_.linear_acceleration_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 angular_velocity = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.angular_velocity_, this_._impl_.angular_velocity_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.Imu)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Imu::ByteSizeLong(const MessageLite& base) {
          const Imu& this_ = static_cast<const Imu&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Imu::ByteSizeLong() const {
          const Imu& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.Imu)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.Vector3 linear_acceleration = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.linear_acceleration_);
            }
            // .kevin.Vector3 angular_velocity = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.angular_velocity_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Imu::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Imu*>(&to_msg);
  auto& from = static_cast<const Imu&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.Imu)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.linear_acceleration_ != nullptr);
      if (_this->_impl_.linear_acceleration_ == nullptr) {
        _this->_impl_.linear_acceleration_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.linear_acceleration_);
      } else {
        _this->_impl_.linear_acceleration_->MergeFrom(*from._impl_.linear_acceleration_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.angular_velocity_ != nullptr);
      if (_this->_impl_.angular_velocity_ == nullptr) {
        _this->_impl_.angular_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.angular_velocity_);
      } else {
        _this->_impl_.angular_velocity_->MergeFrom(*from._impl_.angular_velocity_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Imu::InternalSwap(Imu* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Imu, _impl_.angular_velocity_)
      + sizeof(Imu::_impl_.angular_velocity_)
      - PROTOBUF_FIELD_OFFSET(Imu, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HighResolutionImu::_Internal {
 public:
  using HasBits =
      decltype(std::declval<HighResolutionImu>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_._has_bits_);
};

void HighResolutionImu::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HighResolutionImu::clear_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_ != nullptr) _impl_.linear_acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void HighResolutionImu::clear_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void HighResolutionImu::clear_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void HighResolutionImu::clear_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.magnetic_field_ != nullptr) _impl_.magnetic_field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
HighResolutionImu::HighResolutionImu(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.HighResolutionImu)
}
inline PROTOBUF_NDEBUG_INLINE HighResolutionImu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::HighResolutionImu& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HighResolutionImu::HighResolutionImu(
    ::google::protobuf::Arena* arena,
    const HighResolutionImu& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HighResolutionImu* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.linear_acceleration_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.linear_acceleration_)
                        : nullptr;
  _impl_.angular_velocity_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.angular_velocity_)
                        : nullptr;
  _impl_.orientation_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Quaternion>(
                              arena, *from._impl_.orientation_)
                        : nullptr;
  _impl_.magnetic_field_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.magnetic_field_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pressure_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pressure_),
           offsetof(Impl_, temperature_) -
               offsetof(Impl_, pressure_) +
               sizeof(Impl_::temperature_));

  // @@protoc_insertion_point(copy_constructor:kevin.HighResolutionImu)
}
inline PROTOBUF_NDEBUG_INLINE HighResolutionImu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HighResolutionImu::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, temperature_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::temperature_));
}
HighResolutionImu::~HighResolutionImu() {
  // @@protoc_insertion_point(destructor:kevin.HighResolutionImu)
  SharedDtor(*this);
}
inline void HighResolutionImu::SharedDtor(MessageLite& self) {
  HighResolutionImu& this_ = static_cast<HighResolutionImu&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.linear_acceleration_;
  delete this_._impl_.angular_velocity_;
  delete this_._impl_.orientation_;
  delete this_._impl_.magnetic_field_;
  this_._impl_.~Impl_();
}

inline void* HighResolutionImu::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HighResolutionImu(arena);
}
constexpr auto HighResolutionImu::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(HighResolutionImu),
                                            alignof(HighResolutionImu));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HighResolutionImu::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HighResolutionImu_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HighResolutionImu::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HighResolutionImu>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HighResolutionImu::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HighResolutionImu>(), &HighResolutionImu::ByteSizeLong,
            &HighResolutionImu::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_._cached_size_),
        false,
    },
    &HighResolutionImu::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HighResolutionImu::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 0, 2> HighResolutionImu::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::HighResolutionImu>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.header_)}},
    // .kevin.Vector3 linear_acceleration = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.linear_acceleration_)}},
    // .kevin.Vector3 angular_velocity = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.angular_velocity_)}},
    // .kevin.Quaternion orientation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.orientation_)}},
    // .kevin.Vector3 magnetic_field = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.magnetic_field_)}},
    // double pressure = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.pressure_)}},
    // double temperature = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.temperature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 linear_acceleration = 2;
    {PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.linear_acceleration_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 angular_velocity = 3;
    {PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.angular_velocity_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Quaternion orientation = 4;
    {PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.orientation_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 magnetic_field = 5;
    {PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.magnetic_field_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double pressure = 6;
    {PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.pressure_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double temperature = 7;
    {PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.temperature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Quaternion>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void HighResolutionImu::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.HighResolutionImu)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.linear_acceleration_ != nullptr);
      _impl_.linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.magnetic_field_ != nullptr);
      _impl_.magnetic_field_->Clear();
    }
  }
  ::memset(&_impl_.pressure_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.temperature_) -
      reinterpret_cast<char*>(&_impl_.pressure_)) + sizeof(_impl_.temperature_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HighResolutionImu::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HighResolutionImu& this_ = static_cast<const HighResolutionImu&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HighResolutionImu::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HighResolutionImu& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.HighResolutionImu)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 linear_acceleration = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.linear_acceleration_, this_._impl_.linear_acceleration_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 angular_velocity = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.angular_velocity_, this_._impl_.angular_velocity_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Quaternion orientation = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.orientation_, this_._impl_.orientation_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 magnetic_field = 5;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.magnetic_field_, this_._impl_.magnetic_field_->GetCachedSize(), target,
                stream);
          }

          // double pressure = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_pressure()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_pressure(), target);
          }

          // double temperature = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_temperature()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_temperature(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.HighResolutionImu)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HighResolutionImu::ByteSizeLong(const MessageLite& base) {
          const HighResolutionImu& this_ = static_cast<const HighResolutionImu&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HighResolutionImu::ByteSizeLong() const {
          const HighResolutionImu& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.HighResolutionImu)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.Vector3 linear_acceleration = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.linear_acceleration_);
            }
            // .kevin.Vector3 angular_velocity = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.angular_velocity_);
            }
            // .kevin.Quaternion orientation = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.orientation_);
            }
            // .kevin.Vector3 magnetic_field = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.magnetic_field_);
            }
          }
           {
            // double pressure = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_pressure()) != 0) {
              total_size += 9;
            }
            // double temperature = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_temperature()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HighResolutionImu::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HighResolutionImu*>(&to_msg);
  auto& from = static_cast<const HighResolutionImu&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.HighResolutionImu)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.linear_acceleration_ != nullptr);
      if (_this->_impl_.linear_acceleration_ == nullptr) {
        _this->_impl_.linear_acceleration_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.linear_acceleration_);
      } else {
        _this->_impl_.linear_acceleration_->MergeFrom(*from._impl_.linear_acceleration_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.angular_velocity_ != nullptr);
      if (_this->_impl_.angular_velocity_ == nullptr) {
        _this->_impl_.angular_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.angular_velocity_);
      } else {
        _this->_impl_.angular_velocity_->MergeFrom(*from._impl_.angular_velocity_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.orientation_ != nullptr);
      if (_this->_impl_.orientation_ == nullptr) {
        _this->_impl_.orientation_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Quaternion>(arena, *from._impl_.orientation_);
      } else {
        _this->_impl_.orientation_->MergeFrom(*from._impl_.orientation_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.magnetic_field_ != nullptr);
      if (_this->_impl_.magnetic_field_ == nullptr) {
        _this->_impl_.magnetic_field_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.magnetic_field_);
      } else {
        _this->_impl_.magnetic_field_->MergeFrom(*from._impl_.magnetic_field_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_pressure()) != 0) {
    _this->_impl_.pressure_ = from._impl_.pressure_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_temperature()) != 0) {
    _this->_impl_.temperature_ = from._impl_.temperature_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HighResolutionImu::CopyFrom(const HighResolutionImu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.HighResolutionImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HighResolutionImu::InternalSwap(HighResolutionImu* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.temperature_)
      + sizeof(HighResolutionImu::_impl_.temperature_)
      - PROTOBUF_FIELD_OFFSET(HighResolutionImu, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata HighResolutionImu::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ImuInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ImuInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_._has_bits_);
};

void ImuInfo::clear_accel_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.accel_cov_ != nullptr) _impl_.accel_cov_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ImuInfo::clear_gyro_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gyro_cov_ != nullptr) _impl_.gyro_cov_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ImuInfo::clear_mag_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mag_cov_ != nullptr) _impl_.mag_cov_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ImuInfo::ImuInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.ImuInfo)
}
inline PROTOBUF_NDEBUG_INLINE ImuInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::ImuInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ImuInfo::ImuInfo(
    ::google::protobuf::Arena* arena,
    const ImuInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ImuInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.accel_cov_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(
                              arena, *from._impl_.accel_cov_)
                        : nullptr;
  _impl_.gyro_cov_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(
                              arena, *from._impl_.gyro_cov_)
                        : nullptr;
  _impl_.mag_cov_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(
                              arena, *from._impl_.mag_cov_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.ImuInfo)
}
inline PROTOBUF_NDEBUG_INLINE ImuInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ImuInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, accel_cov_),
           0,
           offsetof(Impl_, mag_cov_) -
               offsetof(Impl_, accel_cov_) +
               sizeof(Impl_::mag_cov_));
}
ImuInfo::~ImuInfo() {
  // @@protoc_insertion_point(destructor:kevin.ImuInfo)
  SharedDtor(*this);
}
inline void ImuInfo::SharedDtor(MessageLite& self) {
  ImuInfo& this_ = static_cast<ImuInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.accel_cov_;
  delete this_._impl_.gyro_cov_;
  delete this_._impl_.mag_cov_;
  this_._impl_.~Impl_();
}

inline void* ImuInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ImuInfo(arena);
}
constexpr auto ImuInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ImuInfo),
                                            alignof(ImuInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ImuInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ImuInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ImuInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ImuInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ImuInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ImuInfo>(), &ImuInfo::ByteSizeLong,
            &ImuInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_._cached_size_),
        false,
    },
    &ImuInfo::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ImuInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> ImuInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::ImuInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Covariance6 accel_cov = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_.accel_cov_)}},
    // .kevin.Covariance6 gyro_cov = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_.gyro_cov_)}},
    // .kevin.Covariance6 mag_cov = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_.mag_cov_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Covariance6 accel_cov = 1;
    {PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_.accel_cov_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Covariance6 gyro_cov = 2;
    {PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_.gyro_cov_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Covariance6 mag_cov = 3;
    {PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_.mag_cov_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Covariance6>()},
    {::_pbi::TcParser::GetTable<::kevin::Covariance6>()},
    {::_pbi::TcParser::GetTable<::kevin::Covariance6>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ImuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.ImuInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.accel_cov_ != nullptr);
      _impl_.accel_cov_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.gyro_cov_ != nullptr);
      _impl_.gyro_cov_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.mag_cov_ != nullptr);
      _impl_.mag_cov_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ImuInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ImuInfo& this_ = static_cast<const ImuInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ImuInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ImuInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.ImuInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Covariance6 accel_cov = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.accel_cov_, this_._impl_.accel_cov_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Covariance6 gyro_cov = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.gyro_cov_, this_._impl_.gyro_cov_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Covariance6 mag_cov = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.mag_cov_, this_._impl_.mag_cov_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.ImuInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ImuInfo::ByteSizeLong(const MessageLite& base) {
          const ImuInfo& this_ = static_cast<const ImuInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ImuInfo::ByteSizeLong() const {
          const ImuInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.ImuInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kevin.Covariance6 accel_cov = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.accel_cov_);
            }
            // .kevin.Covariance6 gyro_cov = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.gyro_cov_);
            }
            // .kevin.Covariance6 mag_cov = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mag_cov_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ImuInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ImuInfo*>(&to_msg);
  auto& from = static_cast<const ImuInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.ImuInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.accel_cov_ != nullptr);
      if (_this->_impl_.accel_cov_ == nullptr) {
        _this->_impl_.accel_cov_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(arena, *from._impl_.accel_cov_);
      } else {
        _this->_impl_.accel_cov_->MergeFrom(*from._impl_.accel_cov_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.gyro_cov_ != nullptr);
      if (_this->_impl_.gyro_cov_ == nullptr) {
        _this->_impl_.gyro_cov_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(arena, *from._impl_.gyro_cov_);
      } else {
        _this->_impl_.gyro_cov_->MergeFrom(*from._impl_.gyro_cov_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.mag_cov_ != nullptr);
      if (_this->_impl_.mag_cov_ == nullptr) {
        _this->_impl_.mag_cov_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(arena, *from._impl_.mag_cov_);
      } else {
        _this->_impl_.mag_cov_->MergeFrom(*from._impl_.mag_cov_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImuInfo::CopyFrom(const ImuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.ImuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ImuInfo::InternalSwap(ImuInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_.mag_cov_)
      + sizeof(ImuInfo::_impl_.mag_cov_)
      - PROTOBUF_FIELD_OFFSET(ImuInfo, _impl_.accel_cov_)>(
          reinterpret_cast<char*>(&_impl_.accel_cov_),
          reinterpret_cast<char*>(&other->_impl_.accel_cov_));
}

::google::protobuf::Metadata ImuInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MagneticField::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MagneticField>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MagneticField, _impl_._has_bits_);
};

void MagneticField::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MagneticField::clear_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.magnetic_field_ != nullptr) _impl_.magnetic_field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MagneticField::clear_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.covariance_ != nullptr) _impl_.covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
MagneticField::MagneticField(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.MagneticField)
}
inline PROTOBUF_NDEBUG_INLINE MagneticField::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::MagneticField& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MagneticField::MagneticField(
    ::google::protobuf::Arena* arena,
    const MagneticField& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MagneticField* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.magnetic_field_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(
                              arena, *from._impl_.magnetic_field_)
                        : nullptr;
  _impl_.covariance_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(
                              arena, *from._impl_.covariance_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.MagneticField)
}
inline PROTOBUF_NDEBUG_INLINE MagneticField::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MagneticField::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, covariance_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::covariance_));
}
MagneticField::~MagneticField() {
  // @@protoc_insertion_point(destructor:kevin.MagneticField)
  SharedDtor(*this);
}
inline void MagneticField::SharedDtor(MessageLite& self) {
  MagneticField& this_ = static_cast<MagneticField&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.magnetic_field_;
  delete this_._impl_.covariance_;
  this_._impl_.~Impl_();
}

inline void* MagneticField::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MagneticField(arena);
}
constexpr auto MagneticField::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MagneticField),
                                            alignof(MagneticField));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MagneticField::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MagneticField_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MagneticField::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MagneticField>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MagneticField::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MagneticField>(), &MagneticField::ByteSizeLong,
            &MagneticField::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MagneticField, _impl_._cached_size_),
        false,
    },
    &MagneticField::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MagneticField::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> MagneticField::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MagneticField, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::MagneticField>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.header_)}},
    // .kevin.Vector3 magnetic_field = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.magnetic_field_)}},
    // .kevin.Covariance6 covariance = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.covariance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Vector3 magnetic_field = 2;
    {PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.magnetic_field_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Covariance6 covariance = 3;
    {PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.covariance_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::Vector3>()},
    {::_pbi::TcParser::GetTable<::kevin::Covariance6>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MagneticField::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.MagneticField)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.magnetic_field_ != nullptr);
      _impl_.magnetic_field_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.covariance_ != nullptr);
      _impl_.covariance_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MagneticField::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MagneticField& this_ = static_cast<const MagneticField&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MagneticField::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MagneticField& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.MagneticField)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Vector3 magnetic_field = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.magnetic_field_, this_._impl_.magnetic_field_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Covariance6 covariance = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.covariance_, this_._impl_.covariance_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.MagneticField)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MagneticField::ByteSizeLong(const MessageLite& base) {
          const MagneticField& this_ = static_cast<const MagneticField&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MagneticField::ByteSizeLong() const {
          const MagneticField& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.MagneticField)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.Vector3 magnetic_field = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.magnetic_field_);
            }
            // .kevin.Covariance6 covariance = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.covariance_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MagneticField::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MagneticField*>(&to_msg);
  auto& from = static_cast<const MagneticField&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.MagneticField)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.magnetic_field_ != nullptr);
      if (_this->_impl_.magnetic_field_ == nullptr) {
        _this->_impl_.magnetic_field_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Vector3>(arena, *from._impl_.magnetic_field_);
      } else {
        _this->_impl_.magnetic_field_->MergeFrom(*from._impl_.magnetic_field_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.covariance_ != nullptr);
      if (_this->_impl_.covariance_ == nullptr) {
        _this->_impl_.covariance_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(arena, *from._impl_.covariance_);
      } else {
        _this->_impl_.covariance_->MergeFrom(*from._impl_.covariance_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MagneticField::CopyFrom(const MagneticField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.MagneticField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MagneticField::InternalSwap(MagneticField* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.covariance_)
      + sizeof(MagneticField::_impl_.covariance_)
      - PROTOBUF_FIELD_OFFSET(MagneticField, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata MagneticField::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Range::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Range>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Range, _impl_._has_bits_);
};

void Range::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Range::Range(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.Range)
}
inline PROTOBUF_NDEBUG_INLINE Range::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::Range& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Range::Range(
    ::google::protobuf::Arena* arena,
    const Range& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Range* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, radiation_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, radiation_type_),
           offsetof(Impl_, variance_) -
               offsetof(Impl_, radiation_type_) +
               sizeof(Impl_::variance_));

  // @@protoc_insertion_point(copy_constructor:kevin.Range)
}
inline PROTOBUF_NDEBUG_INLINE Range::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Range::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, variance_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::variance_));
}
Range::~Range() {
  // @@protoc_insertion_point(destructor:kevin.Range)
  SharedDtor(*this);
}
inline void Range::SharedDtor(MessageLite& self) {
  Range& this_ = static_cast<Range&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  this_._impl_.~Impl_();
}

inline void* Range::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Range(arena);
}
constexpr auto Range::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Range),
                                            alignof(Range));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Range::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Range_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Range::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Range>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Range::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Range>(), &Range::ByteSizeLong,
            &Range::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Range, _impl_._cached_size_),
        false,
    },
    &Range::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Range::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 2> Range::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Range, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::Range>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Range, _impl_.header_)}},
    // .kevin.Range.RangeType radiation_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Range, _impl_.radiation_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Range, _impl_.radiation_type_)}},
    // float field_of_view = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Range, _impl_.field_of_view_)}},
    // float min_range = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Range, _impl_.min_range_)}},
    // float max_range = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Range, _impl_.max_range_)}},
    // float range = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Range, _impl_.range_)}},
    // float variance = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(Range, _impl_.variance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(Range, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Range.RangeType radiation_type = 2;
    {PROTOBUF_FIELD_OFFSET(Range, _impl_.radiation_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float field_of_view = 3;
    {PROTOBUF_FIELD_OFFSET(Range, _impl_.field_of_view_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_range = 4;
    {PROTOBUF_FIELD_OFFSET(Range, _impl_.min_range_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_range = 5;
    {PROTOBUF_FIELD_OFFSET(Range, _impl_.max_range_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float range = 6;
    {PROTOBUF_FIELD_OFFSET(Range, _impl_.range_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float variance = 7;
    {PROTOBUF_FIELD_OFFSET(Range, _impl_.variance_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.Range)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  ::memset(&_impl_.radiation_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.variance_) -
      reinterpret_cast<char*>(&_impl_.radiation_type_)) + sizeof(_impl_.variance_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Range::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Range& this_ = static_cast<const Range&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Range::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Range& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.Range)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Range.RangeType radiation_type = 2;
          if (this_._internal_radiation_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_radiation_type(), target);
          }

          // float field_of_view = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_field_of_view()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_field_of_view(), target);
          }

          // float min_range = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_range()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_min_range(), target);
          }

          // float max_range = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_range()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_max_range(), target);
          }

          // float range = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_range()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_range(), target);
          }

          // float variance = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_variance()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_variance(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.Range)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Range::ByteSizeLong(const MessageLite& base) {
          const Range& this_ = static_cast<const Range&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Range::ByteSizeLong() const {
          const Range& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.Range)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .kevin.Header header = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
          }
           {
            // .kevin.Range.RangeType radiation_type = 2;
            if (this_._internal_radiation_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_radiation_type());
            }
            // float field_of_view = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_field_of_view()) != 0) {
              total_size += 5;
            }
            // float min_range = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_range()) != 0) {
              total_size += 5;
            }
            // float max_range = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_range()) != 0) {
              total_size += 5;
            }
            // float range = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_range()) != 0) {
              total_size += 5;
            }
            // float variance = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_variance()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Range::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Range*>(&to_msg);
  auto& from = static_cast<const Range&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.Range)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.header_ != nullptr);
    if (_this->_impl_.header_ == nullptr) {
      _this->_impl_.header_ =
          ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
    } else {
      _this->_impl_.header_->MergeFrom(*from._impl_.header_);
    }
  }
  if (from._internal_radiation_type() != 0) {
    _this->_impl_.radiation_type_ = from._impl_.radiation_type_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_field_of_view()) != 0) {
    _this->_impl_.field_of_view_ = from._impl_.field_of_view_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_range()) != 0) {
    _this->_impl_.min_range_ = from._impl_.min_range_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_range()) != 0) {
    _this->_impl_.max_range_ = from._impl_.max_range_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_range()) != 0) {
    _this->_impl_.range_ = from._impl_.range_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_variance()) != 0) {
    _this->_impl_.variance_ = from._impl_.variance_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Range::InternalSwap(Range* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Range, _impl_.variance_)
      + sizeof(Range::_impl_.variance_)
      - PROTOBUF_FIELD_OFFSET(Range, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata Range::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Pressure::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Pressure>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Pressure, _impl_._has_bits_);
};

void Pressure::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Pressure::Pressure(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.Pressure)
}
inline PROTOBUF_NDEBUG_INLINE Pressure::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::Pressure& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Pressure::Pressure(
    ::google::protobuf::Arena* arena,
    const Pressure& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Pressure* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.pressure_ = from._impl_.pressure_;

  // @@protoc_insertion_point(copy_constructor:kevin.Pressure)
}
inline PROTOBUF_NDEBUG_INLINE Pressure::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Pressure::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, pressure_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::pressure_));
}
Pressure::~Pressure() {
  // @@protoc_insertion_point(destructor:kevin.Pressure)
  SharedDtor(*this);
}
inline void Pressure::SharedDtor(MessageLite& self) {
  Pressure& this_ = static_cast<Pressure&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  this_._impl_.~Impl_();
}

inline void* Pressure::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Pressure(arena);
}
constexpr auto Pressure::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Pressure),
                                            alignof(Pressure));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Pressure::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Pressure_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Pressure::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Pressure>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Pressure::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Pressure>(), &Pressure::ByteSizeLong,
            &Pressure::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Pressure, _impl_._cached_size_),
        false,
    },
    &Pressure::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Pressure::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Pressure::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Pressure, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::Pressure>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double pressure = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Pressure, _impl_.pressure_)}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Pressure, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(Pressure, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double pressure = 2;
    {PROTOBUF_FIELD_OFFSET(Pressure, _impl_.pressure_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Pressure::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.Pressure)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_.pressure_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Pressure::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Pressure& this_ = static_cast<const Pressure&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Pressure::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Pressure& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.Pressure)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // double pressure = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_pressure()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_pressure(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.Pressure)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Pressure::ByteSizeLong(const MessageLite& base) {
          const Pressure& this_ = static_cast<const Pressure&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Pressure::ByteSizeLong() const {
          const Pressure& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.Pressure)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .kevin.Header header = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
          }
           {
            // double pressure = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_pressure()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Pressure::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Pressure*>(&to_msg);
  auto& from = static_cast<const Pressure&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.Pressure)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.header_ != nullptr);
    if (_this->_impl_.header_ == nullptr) {
      _this->_impl_.header_ =
          ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
    } else {
      _this->_impl_.header_->MergeFrom(*from._impl_.header_);
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_pressure()) != 0) {
    _this->_impl_.pressure_ = from._impl_.pressure_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pressure::CopyFrom(const Pressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.Pressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Pressure::InternalSwap(Pressure* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pressure, _impl_.pressure_)
      + sizeof(Pressure::_impl_.pressure_)
      - PROTOBUF_FIELD_OFFSET(Pressure, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata Pressure::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Temperature::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Temperature>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Temperature, _impl_._has_bits_);
};

void Temperature::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Temperature::Temperature(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.Temperature)
}
inline PROTOBUF_NDEBUG_INLINE Temperature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::Temperature& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Temperature::Temperature(
    ::google::protobuf::Arena* arena,
    const Temperature& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Temperature* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.temperature_ = from._impl_.temperature_;

  // @@protoc_insertion_point(copy_constructor:kevin.Temperature)
}
inline PROTOBUF_NDEBUG_INLINE Temperature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Temperature::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, temperature_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::temperature_));
}
Temperature::~Temperature() {
  // @@protoc_insertion_point(destructor:kevin.Temperature)
  SharedDtor(*this);
}
inline void Temperature::SharedDtor(MessageLite& self) {
  Temperature& this_ = static_cast<Temperature&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  this_._impl_.~Impl_();
}

inline void* Temperature::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Temperature(arena);
}
constexpr auto Temperature::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Temperature),
                                            alignof(Temperature));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Temperature::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Temperature_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Temperature::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Temperature>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Temperature::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Temperature>(), &Temperature::ByteSizeLong,
            &Temperature::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Temperature, _impl_._cached_size_),
        false,
    },
    &Temperature::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Temperature::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Temperature::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Temperature, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::Temperature>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double temperature = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Temperature, _impl_.temperature_)}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Temperature, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(Temperature, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double temperature = 2;
    {PROTOBUF_FIELD_OFFSET(Temperature, _impl_.temperature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Temperature::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.Temperature)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_.temperature_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Temperature::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Temperature& this_ = static_cast<const Temperature&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Temperature::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Temperature& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.Temperature)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // double temperature = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_temperature()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_temperature(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.Temperature)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Temperature::ByteSizeLong(const MessageLite& base) {
          const Temperature& this_ = static_cast<const Temperature&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Temperature::ByteSizeLong() const {
          const Temperature& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.Temperature)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .kevin.Header header = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
          }
           {
            // double temperature = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_temperature()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Temperature::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Temperature*>(&to_msg);
  auto& from = static_cast<const Temperature&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.Temperature)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.header_ != nullptr);
    if (_this->_impl_.header_ == nullptr) {
      _this->_impl_.header_ =
          ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
    } else {
      _this->_impl_.header_->MergeFrom(*from._impl_.header_);
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_temperature()) != 0) {
    _this->_impl_.temperature_ = from._impl_.temperature_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Temperature::CopyFrom(const Temperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.Temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Temperature::InternalSwap(Temperature* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Temperature, _impl_.temperature_)
      + sizeof(Temperature::_impl_.temperature_)
      - PROTOBUF_FIELD_OFFSET(Temperature, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata Temperature::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PressureTemperature::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PressureTemperature>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_._has_bits_);
};

void PressureTemperature::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PressureTemperature::PressureTemperature(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.PressureTemperature)
}
inline PROTOBUF_NDEBUG_INLINE PressureTemperature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::PressureTemperature& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PressureTemperature::PressureTemperature(
    ::google::protobuf::Arena* arena,
    const PressureTemperature& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PressureTemperature* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pressure_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pressure_),
           offsetof(Impl_, temperature_) -
               offsetof(Impl_, pressure_) +
               sizeof(Impl_::temperature_));

  // @@protoc_insertion_point(copy_constructor:kevin.PressureTemperature)
}
inline PROTOBUF_NDEBUG_INLINE PressureTemperature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PressureTemperature::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, temperature_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::temperature_));
}
PressureTemperature::~PressureTemperature() {
  // @@protoc_insertion_point(destructor:kevin.PressureTemperature)
  SharedDtor(*this);
}
inline void PressureTemperature::SharedDtor(MessageLite& self) {
  PressureTemperature& this_ = static_cast<PressureTemperature&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  this_._impl_.~Impl_();
}

inline void* PressureTemperature::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PressureTemperature(arena);
}
constexpr auto PressureTemperature::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PressureTemperature),
                                            alignof(PressureTemperature));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PressureTemperature::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PressureTemperature_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PressureTemperature::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PressureTemperature>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PressureTemperature::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PressureTemperature>(), &PressureTemperature::ByteSizeLong,
            &PressureTemperature::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_._cached_size_),
        false,
    },
    &PressureTemperature::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PressureTemperature::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> PressureTemperature::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::PressureTemperature>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_.header_)}},
    // double pressure = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_.pressure_)}},
    // double temperature = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_.temperature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double pressure = 2;
    {PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_.pressure_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double temperature = 3;
    {PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_.temperature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PressureTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.PressureTemperature)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  ::memset(&_impl_.pressure_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.temperature_) -
      reinterpret_cast<char*>(&_impl_.pressure_)) + sizeof(_impl_.temperature_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PressureTemperature::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PressureTemperature& this_ = static_cast<const PressureTemperature&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PressureTemperature::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PressureTemperature& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.PressureTemperature)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // double pressure = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_pressure()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_pressure(), target);
          }

          // double temperature = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_temperature()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_temperature(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.PressureTemperature)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PressureTemperature::ByteSizeLong(const MessageLite& base) {
          const PressureTemperature& this_ = static_cast<const PressureTemperature&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PressureTemperature::ByteSizeLong() const {
          const PressureTemperature& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.PressureTemperature)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .kevin.Header header = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
          }
           {
            // double pressure = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_pressure()) != 0) {
              total_size += 9;
            }
            // double temperature = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_temperature()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PressureTemperature::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PressureTemperature*>(&to_msg);
  auto& from = static_cast<const PressureTemperature&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.PressureTemperature)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.header_ != nullptr);
    if (_this->_impl_.header_ == nullptr) {
      _this->_impl_.header_ =
          ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
    } else {
      _this->_impl_.header_->MergeFrom(*from._impl_.header_);
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_pressure()) != 0) {
    _this->_impl_.pressure_ = from._impl_.pressure_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_temperature()) != 0) {
    _this->_impl_.temperature_ = from._impl_.temperature_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PressureTemperature::CopyFrom(const PressureTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.PressureTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PressureTemperature::InternalSwap(PressureTemperature* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_.temperature_)
      + sizeof(PressureTemperature::_impl_.temperature_)
      - PROTOBUF_FIELD_OFFSET(PressureTemperature, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata PressureTemperature::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Odometry::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Odometry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_);
};

void Odometry::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Odometry::clear_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Odometry::clear_twist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.twist_ != nullptr) _impl_.twist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Odometry::Odometry(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::Odometry& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        child_frame_id_(arena, from.child_frame_id_) {}

Odometry::Odometry(
    ::google::protobuf::Arena* arena,
    const Odometry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Odometry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.pose_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Pose>(
                              arena, *from._impl_.pose_)
                        : nullptr;
  _impl_.twist_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Twist>(
                              arena, *from._impl_.twist_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kevin.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        child_frame_id_(arena) {}

inline void Odometry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, twist_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::twist_));
}
Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:kevin.Odometry)
  SharedDtor(*this);
}
inline void Odometry::SharedDtor(MessageLite& self) {
  Odometry& this_ = static_cast<Odometry&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.child_frame_id_.Destroy();
  delete this_._impl_.header_;
  delete this_._impl_.pose_;
  delete this_._impl_.twist_;
  this_._impl_.~Impl_();
}

inline void* Odometry::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Odometry(arena);
}
constexpr auto Odometry::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Odometry),
                                            alignof(Odometry));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Odometry::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Odometry_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Odometry::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Odometry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Odometry::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Odometry>(), &Odometry::ByteSizeLong,
            &Odometry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Odometry, _impl_._cached_size_),
        false,
    },
    &Odometry::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Odometry::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 37, 2> Odometry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::Odometry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kevin.Twist twist = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_)}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.header_)}},
    // string child_frame_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.child_frame_id_)}},
    // .kevin.Pose pose = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string child_frame_id = 2;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.child_frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kevin.Pose pose = 3;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Twist twist = 4;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::Pose>()},
    {::_pbi::TcParser::GetTable<::kevin::Twist>()},
  }}, {{
    "\16\0\16\0\0\0\0\0"
    "kevin.Odometry"
    "child_frame_id"
  }},
};

PROTOBUF_NOINLINE void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.Odometry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.child_frame_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.twist_ != nullptr);
      _impl_.twist_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Odometry::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Odometry& this_ = static_cast<const Odometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Odometry::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Odometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.Odometry)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // string child_frame_id = 2;
          if (!this_._internal_child_frame_id().empty()) {
            const std::string& _s = this_._internal_child_frame_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kevin.Odometry.child_frame_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .kevin.Pose pose = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Twist twist = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.twist_, this_._impl_.twist_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.Odometry)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Odometry::ByteSizeLong(const MessageLite& base) {
          const Odometry& this_ = static_cast<const Odometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Odometry::ByteSizeLong() const {
          const Odometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.Odometry)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string child_frame_id = 2;
            if (!this_._internal_child_frame_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_child_frame_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.Pose pose = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
            // .kevin.Twist twist = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.twist_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Odometry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Odometry*>(&to_msg);
  auto& from = static_cast<const Odometry&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.Odometry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_child_frame_id().empty()) {
    _this->_internal_set_child_frame_id(from._internal_child_frame_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.pose_ != nullptr);
      if (_this->_impl_.pose_ == nullptr) {
        _this->_impl_.pose_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Pose>(arena, *from._impl_.pose_);
      } else {
        _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.twist_ != nullptr);
      if (_this->_impl_.twist_ == nullptr) {
        _this->_impl_.twist_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Twist>(arena, *from._impl_.twist_);
      } else {
        _this->_impl_.twist_->MergeFrom(*from._impl_.twist_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Odometry::InternalSwap(Odometry* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.child_frame_id_, &other->_impl_.child_frame_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_)
      + sizeof(Odometry::_impl_.twist_)
      - PROTOBUF_FIELD_OFFSET(Odometry, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SatNav_NavSatStatus::_Internal {
 public:
};

SatNav_NavSatStatus::SatNav_NavSatStatus(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.SatNav.NavSatStatus)
}
SatNav_NavSatStatus::SatNav_NavSatStatus(
    ::google::protobuf::Arena* arena, const SatNav_NavSatStatus& from)
    : SatNav_NavSatStatus(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SatNav_NavSatStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SatNav_NavSatStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           0,
           offsetof(Impl_, service_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::service_));
}
SatNav_NavSatStatus::~SatNav_NavSatStatus() {
  // @@protoc_insertion_point(destructor:kevin.SatNav.NavSatStatus)
  SharedDtor(*this);
}
inline void SatNav_NavSatStatus::SharedDtor(MessageLite& self) {
  SatNav_NavSatStatus& this_ = static_cast<SatNav_NavSatStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SatNav_NavSatStatus::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SatNav_NavSatStatus(arena);
}
constexpr auto SatNav_NavSatStatus::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SatNav_NavSatStatus),
                                            alignof(SatNav_NavSatStatus));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SatNav_NavSatStatus::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SatNav_NavSatStatus_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SatNav_NavSatStatus::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SatNav_NavSatStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SatNav_NavSatStatus::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SatNav_NavSatStatus>(), &SatNav_NavSatStatus::ByteSizeLong,
            &SatNav_NavSatStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SatNav_NavSatStatus, _impl_._cached_size_),
        false,
    },
    &SatNav_NavSatStatus::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SatNav_NavSatStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SatNav_NavSatStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::SatNav_NavSatStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kevin.SatNav.ServiceType service = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SatNav_NavSatStatus, _impl_.service_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav_NavSatStatus, _impl_.service_)}},
    // .kevin.SatNav.StatusFix status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SatNav_NavSatStatus, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav_NavSatStatus, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.SatNav.StatusFix status = 1;
    {PROTOBUF_FIELD_OFFSET(SatNav_NavSatStatus, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .kevin.SatNav.ServiceType service = 2;
    {PROTOBUF_FIELD_OFFSET(SatNav_NavSatStatus, _impl_.service_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SatNav_NavSatStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.SatNav.NavSatStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.service_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.service_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SatNav_NavSatStatus::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SatNav_NavSatStatus& this_ = static_cast<const SatNav_NavSatStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SatNav_NavSatStatus::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SatNav_NavSatStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.SatNav.NavSatStatus)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .kevin.SatNav.StatusFix status = 1;
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_status(), target);
          }

          // .kevin.SatNav.ServiceType service = 2;
          if (this_._internal_service() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_service(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.SatNav.NavSatStatus)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SatNav_NavSatStatus::ByteSizeLong(const MessageLite& base) {
          const SatNav_NavSatStatus& this_ = static_cast<const SatNav_NavSatStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SatNav_NavSatStatus::ByteSizeLong() const {
          const SatNav_NavSatStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.SatNav.NavSatStatus)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .kevin.SatNav.StatusFix status = 1;
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
            // .kevin.SatNav.ServiceType service = 2;
            if (this_._internal_service() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_service());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SatNav_NavSatStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SatNav_NavSatStatus*>(&to_msg);
  auto& from = static_cast<const SatNav_NavSatStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.SatNav.NavSatStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  if (from._internal_service() != 0) {
    _this->_impl_.service_ = from._impl_.service_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SatNav_NavSatStatus::CopyFrom(const SatNav_NavSatStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.SatNav.NavSatStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SatNav_NavSatStatus::InternalSwap(SatNav_NavSatStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SatNav_NavSatStatus, _impl_.service_)
      + sizeof(SatNav_NavSatStatus::_impl_.service_)
      - PROTOBUF_FIELD_OFFSET(SatNav_NavSatStatus, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::google::protobuf::Metadata SatNav_NavSatStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SatNav::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SatNav>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SatNav, _impl_._has_bits_);
};

void SatNav::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SatNav::clear_position_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_covariance_ != nullptr) _impl_.position_covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SatNav::SatNav(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.SatNav)
}
inline PROTOBUF_NDEBUG_INLINE SatNav::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::SatNav& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SatNav::SatNav(
    ::google::protobuf::Arena* arena,
    const SatNav& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SatNav* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.status_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::SatNav_NavSatStatus>(
                              arena, *from._impl_.status_)
                        : nullptr;
  _impl_.position_covariance_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(
                              arena, *from._impl_.position_covariance_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latitude_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:kevin.SatNav)
}
inline PROTOBUF_NDEBUG_INLINE SatNav::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SatNav::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::type_));
}
SatNav::~SatNav() {
  // @@protoc_insertion_point(destructor:kevin.SatNav)
  SharedDtor(*this);
}
inline void SatNav::SharedDtor(MessageLite& self) {
  SatNav& this_ = static_cast<SatNav&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.status_;
  delete this_._impl_.position_covariance_;
  this_._impl_.~Impl_();
}

inline void* SatNav::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SatNav(arena);
}
constexpr auto SatNav::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SatNav),
                                            alignof(SatNav));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SatNav::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SatNav_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SatNav::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SatNav>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SatNav::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SatNav>(), &SatNav::ByteSizeLong,
            &SatNav::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SatNav, _impl_._cached_size_),
        false,
    },
    &SatNav::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SatNav::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 3, 0, 2> SatNav::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SatNav, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::SatNav>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.header_)}},
    // .kevin.SatNav.NavSatStatus status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.status_)}},
    // double latitude = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.latitude_)}},
    // double longitude = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.longitude_)}},
    // double altitude = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.altitude_)}},
    // .kevin.Covariance6 position_covariance = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.position_covariance_)}},
    // .kevin.PositionCovariance type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SatNav, _impl_.type_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(SatNav, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.SatNav.NavSatStatus status = 2;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double latitude = 3;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.latitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude = 4;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.longitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double altitude = 5;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.altitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .kevin.Covariance6 position_covariance = 6;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.position_covariance_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.PositionCovariance type = 7;
    {PROTOBUF_FIELD_OFFSET(SatNav, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::SatNav_NavSatStatus>()},
    {::_pbi::TcParser::GetTable<::kevin::Covariance6>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SatNav::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.SatNav)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.position_covariance_ != nullptr);
      _impl_.position_covariance_->Clear();
    }
  }
  ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SatNav::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SatNav& this_ = static_cast<const SatNav&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SatNav::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SatNav& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.SatNav)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.SatNav.NavSatStatus status = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.status_, this_._impl_.status_->GetCachedSize(), target,
                stream);
          }

          // double latitude = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_latitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_latitude(), target);
          }

          // double longitude = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_longitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_longitude(), target);
          }

          // double altitude = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_altitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_altitude(), target);
          }

          // .kevin.Covariance6 position_covariance = 6;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.position_covariance_, this_._impl_.position_covariance_->GetCachedSize(), target,
                stream);
          }

          // .kevin.PositionCovariance type = 7;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.SatNav)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SatNav::ByteSizeLong(const MessageLite& base) {
          const SatNav& this_ = static_cast<const SatNav&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SatNav::ByteSizeLong() const {
          const SatNav& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.SatNav)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.SatNav.NavSatStatus status = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_);
            }
            // .kevin.Covariance6 position_covariance = 6;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_covariance_);
            }
          }
           {
            // double latitude = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_latitude()) != 0) {
              total_size += 9;
            }
            // double longitude = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_longitude()) != 0) {
              total_size += 9;
            }
            // double altitude = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_altitude()) != 0) {
              total_size += 9;
            }
            // .kevin.PositionCovariance type = 7;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SatNav::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SatNav*>(&to_msg);
  auto& from = static_cast<const SatNav&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.SatNav)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.status_ != nullptr);
      if (_this->_impl_.status_ == nullptr) {
        _this->_impl_.status_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::SatNav_NavSatStatus>(arena, *from._impl_.status_);
      } else {
        _this->_impl_.status_->MergeFrom(*from._impl_.status_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.position_covariance_ != nullptr);
      if (_this->_impl_.position_covariance_ == nullptr) {
        _this->_impl_.position_covariance_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Covariance6>(arena, *from._impl_.position_covariance_);
      } else {
        _this->_impl_.position_covariance_->MergeFrom(*from._impl_.position_covariance_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_latitude()) != 0) {
    _this->_impl_.latitude_ = from._impl_.latitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_longitude()) != 0) {
    _this->_impl_.longitude_ = from._impl_.longitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_altitude()) != 0) {
    _this->_impl_.altitude_ = from._impl_.altitude_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SatNav::CopyFrom(const SatNav& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.SatNav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SatNav::InternalSwap(SatNav* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SatNav, _impl_.type_)
      + sizeof(SatNav::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SatNav, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata SatNav::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaserScan::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LaserScan>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LaserScan, _impl_._has_bits_);
};

void LaserScan::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaserScan::clear_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LaserScan::LaserScan(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.LaserScan)
}
inline PROTOBUF_NDEBUG_INLINE LaserScan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::LaserScan& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ranges_{visibility, arena, from.ranges_},
        intensities_{visibility, arena, from.intensities_} {}

LaserScan::LaserScan(
    ::google::protobuf::Arena* arena,
    const LaserScan& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaserScan* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.pose_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kevin::Pose>(
                              arena, *from._impl_.pose_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_angle_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_angle_),
           offsetof(Impl_, end_angle_) -
               offsetof(Impl_, start_angle_) +
               sizeof(Impl_::end_angle_));

  // @@protoc_insertion_point(copy_constructor:kevin.LaserScan)
}
inline PROTOBUF_NDEBUG_INLINE LaserScan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        ranges_{visibility, arena},
        intensities_{visibility, arena} {}

inline void LaserScan::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, end_angle_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::end_angle_));
}
LaserScan::~LaserScan() {
  // @@protoc_insertion_point(destructor:kevin.LaserScan)
  SharedDtor(*this);
}
inline void LaserScan::SharedDtor(MessageLite& self) {
  LaserScan& this_ = static_cast<LaserScan&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.pose_;
  this_._impl_.~Impl_();
}

inline void* LaserScan::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LaserScan(arena);
}
constexpr auto LaserScan::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.ranges_) +
          decltype(LaserScan::_impl_.ranges_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.intensities_) +
          decltype(LaserScan::_impl_.intensities_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(LaserScan), alignof(LaserScan), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LaserScan::PlacementNew_,
                                 sizeof(LaserScan),
                                 alignof(LaserScan));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LaserScan::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LaserScan_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LaserScan::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LaserScan>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LaserScan::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LaserScan>(), &LaserScan::ByteSizeLong,
            &LaserScan::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LaserScan, _impl_._cached_size_),
        false,
    },
    &LaserScan::kDescriptorMethods,
    &descriptor_table_sensor_5fmsgs_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LaserScan::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 0, 2> LaserScan::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaserScan, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::LaserScan>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kevin.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.header_)}},
    // .kevin.Pose pose = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.pose_)}},
    // double start_angle = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.start_angle_)}},
    // double end_angle = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.end_angle_)}},
    // repeated double ranges = 5;
    {::_pbi::TcParser::FastF64P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.ranges_)}},
    // repeated double intensities = 6;
    {::_pbi::TcParser::FastF64P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.intensities_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .kevin.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kevin.Pose pose = 2;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.pose_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double start_angle = 3;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.start_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double end_angle = 4;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.end_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated double ranges = 5;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.ranges_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double intensities = 6;
    {PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.intensities_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kevin::Header>()},
    {::_pbi::TcParser::GetTable<::kevin::Pose>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LaserScan::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.LaserScan)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ranges_.Clear();
  _impl_.intensities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
  }
  ::memset(&_impl_.start_angle_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_angle_) -
      reinterpret_cast<char*>(&_impl_.start_angle_)) + sizeof(_impl_.end_angle_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LaserScan::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LaserScan& this_ = static_cast<const LaserScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LaserScan::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LaserScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kevin.LaserScan)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kevin.Header header = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .kevin.Pose pose = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          // double start_angle = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_start_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_start_angle(), target);
          }

          // double end_angle = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_end_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_end_angle(), target);
          }

          // repeated double ranges = 5;
          if (this_._internal_ranges_size() > 0) {
            target = stream->WriteFixedPacked(5, this_._internal_ranges(), target);
          }

          // repeated double intensities = 6;
          if (this_._internal_intensities_size() > 0) {
            target = stream->WriteFixedPacked(6, this_._internal_intensities(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kevin.LaserScan)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LaserScan::ByteSizeLong(const MessageLite& base) {
          const LaserScan& this_ = static_cast<const LaserScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LaserScan::ByteSizeLong() const {
          const LaserScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kevin.LaserScan)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double ranges = 5;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_ranges_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double intensities = 6;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_intensities_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kevin.Header header = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .kevin.Pose pose = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
          }
           {
            // double start_angle = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_start_angle()) != 0) {
              total_size += 9;
            }
            // double end_angle = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_end_angle()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LaserScan::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaserScan*>(&to_msg);
  auto& from = static_cast<const LaserScan&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.LaserScan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ranges()->MergeFrom(from._internal_ranges());
  _this->_internal_mutable_intensities()->MergeFrom(from._internal_intensities());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.pose_ != nullptr);
      if (_this->_impl_.pose_ == nullptr) {
        _this->_impl_.pose_ =
            ::google::protobuf::Message::CopyConstruct<::kevin::Pose>(arena, *from._impl_.pose_);
      } else {
        _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_start_angle()) != 0) {
    _this->_impl_.start_angle_ = from._impl_.start_angle_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_end_angle()) != 0) {
    _this->_impl_.end_angle_ = from._impl_.end_angle_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaserScan::CopyFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.LaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaserScan::InternalSwap(LaserScan* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ranges_.InternalSwap(&other->_impl_.ranges_);
  _impl_.intensities_.InternalSwap(&other->_impl_.intensities_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.end_angle_)
      + sizeof(LaserScan::_impl_.end_angle_)
      - PROTOBUF_FIELD_OFFSET(LaserScan, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata LaserScan::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_sensor_5fmsgs_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
