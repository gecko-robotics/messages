// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensor_msgs.proto
// Protobuf C++ Version: 5.29.3

#ifndef sensor_5fmsgs_2eproto_2epb_2eh
#define sensor_5fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "standard_msgs.pb.h"
#include "math_msgs.pb.h"
#include "geometry_msgs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensor_5fmsgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_5fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensor_5fmsgs_2eproto;
namespace kevin {
class HighResolutionImu;
struct HighResolutionImuDefaultTypeInternal;
extern HighResolutionImuDefaultTypeInternal _HighResolutionImu_default_instance_;
class Imu;
struct ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class ImuInfo;
struct ImuInfoDefaultTypeInternal;
extern ImuInfoDefaultTypeInternal _ImuInfo_default_instance_;
class LaserScan;
struct LaserScanDefaultTypeInternal;
extern LaserScanDefaultTypeInternal _LaserScan_default_instance_;
class MagneticField;
struct MagneticFieldDefaultTypeInternal;
extern MagneticFieldDefaultTypeInternal _MagneticField_default_instance_;
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class Pressure;
struct PressureDefaultTypeInternal;
extern PressureDefaultTypeInternal _Pressure_default_instance_;
class PressureTemperature;
struct PressureTemperatureDefaultTypeInternal;
extern PressureTemperatureDefaultTypeInternal _PressureTemperature_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class SatNav;
struct SatNavDefaultTypeInternal;
extern SatNavDefaultTypeInternal _SatNav_default_instance_;
class SatNav_NavSatStatus;
struct SatNav_NavSatStatusDefaultTypeInternal;
extern SatNav_NavSatStatusDefaultTypeInternal _SatNav_NavSatStatus_default_instance_;
class Temperature;
struct TemperatureDefaultTypeInternal;
extern TemperatureDefaultTypeInternal _Temperature_default_instance_;
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kevin {
enum Range_RangeType : int {
  Range_RangeType_ULTRASOUND = 0,
  Range_RangeType_INFRARED = 1,
  Range_RangeType_LASER = 2,
  Range_RangeType_Range_RangeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Range_RangeType_Range_RangeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Range_RangeType_IsValid(int value);
extern const uint32_t Range_RangeType_internal_data_[];
constexpr Range_RangeType Range_RangeType_RangeType_MIN = static_cast<Range_RangeType>(0);
constexpr Range_RangeType Range_RangeType_RangeType_MAX = static_cast<Range_RangeType>(2);
constexpr int Range_RangeType_RangeType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Range_RangeType_descriptor();
template <typename T>
const std::string& Range_RangeType_Name(T value) {
  static_assert(std::is_same<T, Range_RangeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RangeType_Name().");
  return Range_RangeType_Name(static_cast<Range_RangeType>(value));
}
template <>
inline const std::string& Range_RangeType_Name(Range_RangeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Range_RangeType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Range_RangeType_Parse(absl::string_view name, Range_RangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Range_RangeType>(
      Range_RangeType_descriptor(), name, value);
}
enum SatNav_StatusFix : int {
  SatNav_StatusFix_STATUS_FIX = 0,
  SatNav_StatusFix_STATUS_SBAS_FIX = 1,
  SatNav_StatusFix_STATUS_GBAS_FIX = 2,
  SatNav_StatusFix_SatNav_StatusFix_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SatNav_StatusFix_SatNav_StatusFix_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SatNav_StatusFix_IsValid(int value);
extern const uint32_t SatNav_StatusFix_internal_data_[];
constexpr SatNav_StatusFix SatNav_StatusFix_StatusFix_MIN = static_cast<SatNav_StatusFix>(0);
constexpr SatNav_StatusFix SatNav_StatusFix_StatusFix_MAX = static_cast<SatNav_StatusFix>(2);
constexpr int SatNav_StatusFix_StatusFix_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SatNav_StatusFix_descriptor();
template <typename T>
const std::string& SatNav_StatusFix_Name(T value) {
  static_assert(std::is_same<T, SatNav_StatusFix>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatusFix_Name().");
  return SatNav_StatusFix_Name(static_cast<SatNav_StatusFix>(value));
}
template <>
inline const std::string& SatNav_StatusFix_Name(SatNav_StatusFix value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SatNav_StatusFix_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SatNav_StatusFix_Parse(absl::string_view name, SatNav_StatusFix* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SatNav_StatusFix>(
      SatNav_StatusFix_descriptor(), name, value);
}
enum SatNav_ServiceType : int {
  SatNav_ServiceType_SERVICE_UNKNOWN = 0,
  SatNav_ServiceType_SERVICE_GPS = 1,
  SatNav_ServiceType_SERVICE_GLONASS = 2,
  SatNav_ServiceType_SERVICE_COMPASS = 4,
  SatNav_ServiceType_SERVICE_GALILEO = 8,
  SatNav_ServiceType_SatNav_ServiceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SatNav_ServiceType_SatNav_ServiceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SatNav_ServiceType_IsValid(int value);
extern const uint32_t SatNav_ServiceType_internal_data_[];
constexpr SatNav_ServiceType SatNav_ServiceType_ServiceType_MIN = static_cast<SatNav_ServiceType>(0);
constexpr SatNav_ServiceType SatNav_ServiceType_ServiceType_MAX = static_cast<SatNav_ServiceType>(8);
constexpr int SatNav_ServiceType_ServiceType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
SatNav_ServiceType_descriptor();
template <typename T>
const std::string& SatNav_ServiceType_Name(T value) {
  static_assert(std::is_same<T, SatNav_ServiceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ServiceType_Name().");
  return SatNav_ServiceType_Name(static_cast<SatNav_ServiceType>(value));
}
template <>
inline const std::string& SatNav_ServiceType_Name(SatNav_ServiceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SatNav_ServiceType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool SatNav_ServiceType_Parse(absl::string_view name, SatNav_ServiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SatNav_ServiceType>(
      SatNav_ServiceType_descriptor(), name, value);
}
enum PositionCovariance : int {
  COVARIANCE_TYPE_UNKNOWN = 0,
  COVARIANCE_TYPE_APPROXIMATED = 1,
  COVARIANCE_TYPE_DIAGONAL_KNOWN = 2,
  COVARIANCE_TYPE_KNOWN = 3,
  PositionCovariance_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PositionCovariance_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PositionCovariance_IsValid(int value);
extern const uint32_t PositionCovariance_internal_data_[];
constexpr PositionCovariance PositionCovariance_MIN = static_cast<PositionCovariance>(0);
constexpr PositionCovariance PositionCovariance_MAX = static_cast<PositionCovariance>(3);
constexpr int PositionCovariance_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
PositionCovariance_descriptor();
template <typename T>
const std::string& PositionCovariance_Name(T value) {
  static_assert(std::is_same<T, PositionCovariance>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PositionCovariance_Name().");
  return PositionCovariance_Name(static_cast<PositionCovariance>(value));
}
template <>
inline const std::string& PositionCovariance_Name(PositionCovariance value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PositionCovariance_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool PositionCovariance_Parse(absl::string_view name, PositionCovariance* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PositionCovariance>(
      PositionCovariance_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SatNav_NavSatStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.SatNav.NavSatStatus) */ {
 public:
  inline SatNav_NavSatStatus() : SatNav_NavSatStatus(nullptr) {}
  ~SatNav_NavSatStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SatNav_NavSatStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SatNav_NavSatStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SatNav_NavSatStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline SatNav_NavSatStatus(const SatNav_NavSatStatus& from) : SatNav_NavSatStatus(nullptr, from) {}
  inline SatNav_NavSatStatus(SatNav_NavSatStatus&& from) noexcept
      : SatNav_NavSatStatus(nullptr, std::move(from)) {}
  inline SatNav_NavSatStatus& operator=(const SatNav_NavSatStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SatNav_NavSatStatus& operator=(SatNav_NavSatStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SatNav_NavSatStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SatNav_NavSatStatus* internal_default_instance() {
    return reinterpret_cast<const SatNav_NavSatStatus*>(
        &_SatNav_NavSatStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SatNav_NavSatStatus& a, SatNav_NavSatStatus& b) { a.Swap(&b); }
  inline void Swap(SatNav_NavSatStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SatNav_NavSatStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SatNav_NavSatStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SatNav_NavSatStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SatNav_NavSatStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SatNav_NavSatStatus& from) { SatNav_NavSatStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SatNav_NavSatStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.SatNav.NavSatStatus"; }

 protected:
  explicit SatNav_NavSatStatus(::google::protobuf::Arena* arena);
  SatNav_NavSatStatus(::google::protobuf::Arena* arena, const SatNav_NavSatStatus& from);
  SatNav_NavSatStatus(::google::protobuf::Arena* arena, SatNav_NavSatStatus&& from) noexcept
      : SatNav_NavSatStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
    kServiceFieldNumber = 2,
  };
  // .kevin.SatNav.StatusFix status = 1;
  void clear_status() ;
  ::kevin::SatNav_StatusFix status() const;
  void set_status(::kevin::SatNav_StatusFix value);

  private:
  ::kevin::SatNav_StatusFix _internal_status() const;
  void _internal_set_status(::kevin::SatNav_StatusFix value);

  public:
  // .kevin.SatNav.ServiceType service = 2;
  void clear_service() ;
  ::kevin::SatNav_ServiceType service() const;
  void set_service(::kevin::SatNav_ServiceType value);

  private:
  ::kevin::SatNav_ServiceType _internal_service() const;
  void _internal_set_service(::kevin::SatNav_ServiceType value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.SatNav.NavSatStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SatNav_NavSatStatus& from_msg);
    int status_;
    int service_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ImuInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.ImuInfo) */ {
 public:
  inline ImuInfo() : ImuInfo(nullptr) {}
  ~ImuInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ImuInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ImuInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ImuInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ImuInfo(const ImuInfo& from) : ImuInfo(nullptr, from) {}
  inline ImuInfo(ImuInfo&& from) noexcept
      : ImuInfo(nullptr, std::move(from)) {}
  inline ImuInfo& operator=(const ImuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuInfo& operator=(ImuInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuInfo* internal_default_instance() {
    return reinterpret_cast<const ImuInfo*>(
        &_ImuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ImuInfo& a, ImuInfo& b) { a.Swap(&b); }
  inline void Swap(ImuInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ImuInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImuInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ImuInfo& from) { ImuInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ImuInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.ImuInfo"; }

 protected:
  explicit ImuInfo(::google::protobuf::Arena* arena);
  ImuInfo(::google::protobuf::Arena* arena, const ImuInfo& from);
  ImuInfo(::google::protobuf::Arena* arena, ImuInfo&& from) noexcept
      : ImuInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAccelCovFieldNumber = 1,
    kGyroCovFieldNumber = 2,
    kMagCovFieldNumber = 3,
  };
  // .kevin.Covariance6 accel_cov = 1;
  bool has_accel_cov() const;
  void clear_accel_cov() ;
  const ::kevin::Covariance6& accel_cov() const;
  PROTOBUF_NODISCARD ::kevin::Covariance6* release_accel_cov();
  ::kevin::Covariance6* mutable_accel_cov();
  void set_allocated_accel_cov(::kevin::Covariance6* value);
  void unsafe_arena_set_allocated_accel_cov(::kevin::Covariance6* value);
  ::kevin::Covariance6* unsafe_arena_release_accel_cov();

  private:
  const ::kevin::Covariance6& _internal_accel_cov() const;
  ::kevin::Covariance6* _internal_mutable_accel_cov();

  public:
  // .kevin.Covariance6 gyro_cov = 2;
  bool has_gyro_cov() const;
  void clear_gyro_cov() ;
  const ::kevin::Covariance6& gyro_cov() const;
  PROTOBUF_NODISCARD ::kevin::Covariance6* release_gyro_cov();
  ::kevin::Covariance6* mutable_gyro_cov();
  void set_allocated_gyro_cov(::kevin::Covariance6* value);
  void unsafe_arena_set_allocated_gyro_cov(::kevin::Covariance6* value);
  ::kevin::Covariance6* unsafe_arena_release_gyro_cov();

  private:
  const ::kevin::Covariance6& _internal_gyro_cov() const;
  ::kevin::Covariance6* _internal_mutable_gyro_cov();

  public:
  // .kevin.Covariance6 mag_cov = 3;
  bool has_mag_cov() const;
  void clear_mag_cov() ;
  const ::kevin::Covariance6& mag_cov() const;
  PROTOBUF_NODISCARD ::kevin::Covariance6* release_mag_cov();
  ::kevin::Covariance6* mutable_mag_cov();
  void set_allocated_mag_cov(::kevin::Covariance6* value);
  void unsafe_arena_set_allocated_mag_cov(::kevin::Covariance6* value);
  ::kevin::Covariance6* unsafe_arena_release_mag_cov();

  private:
  const ::kevin::Covariance6& _internal_mag_cov() const;
  ::kevin::Covariance6* _internal_mutable_mag_cov();

  public:
  // @@protoc_insertion_point(class_scope:kevin.ImuInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ImuInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Covariance6* accel_cov_;
    ::kevin::Covariance6* gyro_cov_;
    ::kevin::Covariance6* mag_cov_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Temperature final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Temperature) */ {
 public:
  inline Temperature() : Temperature(nullptr) {}
  ~Temperature() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Temperature* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Temperature));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Temperature(
      ::google::protobuf::internal::ConstantInitialized);

  inline Temperature(const Temperature& from) : Temperature(nullptr, from) {}
  inline Temperature(Temperature&& from) noexcept
      : Temperature(nullptr, std::move(from)) {}
  inline Temperature& operator=(const Temperature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Temperature& operator=(Temperature&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Temperature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Temperature* internal_default_instance() {
    return reinterpret_cast<const Temperature*>(
        &_Temperature_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Temperature& a, Temperature& b) { a.Swap(&b); }
  inline void Swap(Temperature* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Temperature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Temperature* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Temperature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Temperature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Temperature& from) { Temperature::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Temperature* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Temperature"; }

 protected:
  explicit Temperature(::google::protobuf::Arena* arena);
  Temperature(::google::protobuf::Arena* arena, const Temperature& from);
  Temperature(::google::protobuf::Arena* arena, Temperature&& from) noexcept
      : Temperature(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kTemperatureFieldNumber = 2,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // double temperature = 2;
  void clear_temperature() ;
  double temperature() const;
  void set_temperature(double value);

  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.Temperature)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Temperature& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    double temperature_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SatNav final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.SatNav) */ {
 public:
  inline SatNav() : SatNav(nullptr) {}
  ~SatNav() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SatNav* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SatNav));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SatNav(
      ::google::protobuf::internal::ConstantInitialized);

  inline SatNav(const SatNav& from) : SatNav(nullptr, from) {}
  inline SatNav(SatNav&& from) noexcept
      : SatNav(nullptr, std::move(from)) {}
  inline SatNav& operator=(const SatNav& from) {
    CopyFrom(from);
    return *this;
  }
  inline SatNav& operator=(SatNav&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SatNav& default_instance() {
    return *internal_default_instance();
  }
  static inline const SatNav* internal_default_instance() {
    return reinterpret_cast<const SatNav*>(
        &_SatNav_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SatNav& a, SatNav& b) { a.Swap(&b); }
  inline void Swap(SatNav* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SatNav* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SatNav* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SatNav>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SatNav& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SatNav& from) { SatNav::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SatNav* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.SatNav"; }

 protected:
  explicit SatNav(::google::protobuf::Arena* arena);
  SatNav(::google::protobuf::Arena* arena, const SatNav& from);
  SatNav(::google::protobuf::Arena* arena, SatNav&& from) noexcept
      : SatNav(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using NavSatStatus = SatNav_NavSatStatus;
  using StatusFix = SatNav_StatusFix;
  static constexpr StatusFix STATUS_FIX = SatNav_StatusFix_STATUS_FIX;
  static constexpr StatusFix STATUS_SBAS_FIX = SatNav_StatusFix_STATUS_SBAS_FIX;
  static constexpr StatusFix STATUS_GBAS_FIX = SatNav_StatusFix_STATUS_GBAS_FIX;
  static inline bool StatusFix_IsValid(int value) {
    return SatNav_StatusFix_IsValid(value);
  }
  static constexpr StatusFix StatusFix_MIN = SatNav_StatusFix_StatusFix_MIN;
  static constexpr StatusFix StatusFix_MAX = SatNav_StatusFix_StatusFix_MAX;
  static constexpr int StatusFix_ARRAYSIZE = SatNav_StatusFix_StatusFix_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* StatusFix_descriptor() {
    return SatNav_StatusFix_descriptor();
  }
  template <typename T>
  static inline const std::string& StatusFix_Name(T value) {
    return SatNav_StatusFix_Name(value);
  }
  static inline bool StatusFix_Parse(absl::string_view name, StatusFix* value) {
    return SatNav_StatusFix_Parse(name, value);
  }
  using ServiceType = SatNav_ServiceType;
  static constexpr ServiceType SERVICE_UNKNOWN = SatNav_ServiceType_SERVICE_UNKNOWN;
  static constexpr ServiceType SERVICE_GPS = SatNav_ServiceType_SERVICE_GPS;
  static constexpr ServiceType SERVICE_GLONASS = SatNav_ServiceType_SERVICE_GLONASS;
  static constexpr ServiceType SERVICE_COMPASS = SatNav_ServiceType_SERVICE_COMPASS;
  static constexpr ServiceType SERVICE_GALILEO = SatNav_ServiceType_SERVICE_GALILEO;
  static inline bool ServiceType_IsValid(int value) {
    return SatNav_ServiceType_IsValid(value);
  }
  static constexpr ServiceType ServiceType_MIN = SatNav_ServiceType_ServiceType_MIN;
  static constexpr ServiceType ServiceType_MAX = SatNav_ServiceType_ServiceType_MAX;
  static constexpr int ServiceType_ARRAYSIZE = SatNav_ServiceType_ServiceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ServiceType_descriptor() {
    return SatNav_ServiceType_descriptor();
  }
  template <typename T>
  static inline const std::string& ServiceType_Name(T value) {
    return SatNav_ServiceType_Name(value);
  }
  static inline bool ServiceType_Parse(absl::string_view name, ServiceType* value) {
    return SatNav_ServiceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kPositionCovarianceFieldNumber = 6,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kAltitudeFieldNumber = 5,
    kTypeFieldNumber = 7,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.SatNav.NavSatStatus status = 2;
  bool has_status() const;
  void clear_status() ;
  const ::kevin::SatNav_NavSatStatus& status() const;
  PROTOBUF_NODISCARD ::kevin::SatNav_NavSatStatus* release_status();
  ::kevin::SatNav_NavSatStatus* mutable_status();
  void set_allocated_status(::kevin::SatNav_NavSatStatus* value);
  void unsafe_arena_set_allocated_status(::kevin::SatNav_NavSatStatus* value);
  ::kevin::SatNav_NavSatStatus* unsafe_arena_release_status();

  private:
  const ::kevin::SatNav_NavSatStatus& _internal_status() const;
  ::kevin::SatNav_NavSatStatus* _internal_mutable_status();

  public:
  // .kevin.Covariance6 position_covariance = 6;
  bool has_position_covariance() const;
  void clear_position_covariance() ;
  const ::kevin::Covariance6& position_covariance() const;
  PROTOBUF_NODISCARD ::kevin::Covariance6* release_position_covariance();
  ::kevin::Covariance6* mutable_position_covariance();
  void set_allocated_position_covariance(::kevin::Covariance6* value);
  void unsafe_arena_set_allocated_position_covariance(::kevin::Covariance6* value);
  ::kevin::Covariance6* unsafe_arena_release_position_covariance();

  private:
  const ::kevin::Covariance6& _internal_position_covariance() const;
  ::kevin::Covariance6* _internal_mutable_position_covariance();

  public:
  // double latitude = 3;
  void clear_latitude() ;
  double latitude() const;
  void set_latitude(double value);

  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);

  public:
  // double longitude = 4;
  void clear_longitude() ;
  double longitude() const;
  void set_longitude(double value);

  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);

  public:
  // double altitude = 5;
  void clear_altitude() ;
  double altitude() const;
  void set_altitude(double value);

  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);

  public:
  // .kevin.PositionCovariance type = 7;
  void clear_type() ;
  ::kevin::PositionCovariance type() const;
  void set_type(::kevin::PositionCovariance value);

  private:
  ::kevin::PositionCovariance _internal_type() const;
  void _internal_set_type(::kevin::PositionCovariance value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.SatNav)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SatNav& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    ::kevin::SatNav_NavSatStatus* status_;
    ::kevin::Covariance6* position_covariance_;
    double latitude_;
    double longitude_;
    double altitude_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Range final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  ~Range() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Range* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Range));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Range(
      ::google::protobuf::internal::ConstantInitialized);

  inline Range(const Range& from) : Range(nullptr, from) {}
  inline Range(Range&& from) noexcept
      : Range(nullptr, std::move(from)) {}
  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
        &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Range& a, Range& b) { a.Swap(&b); }
  inline void Swap(Range* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Range* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Range>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Range& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Range& from) { Range::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Range* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Range"; }

 protected:
  explicit Range(::google::protobuf::Arena* arena);
  Range(::google::protobuf::Arena* arena, const Range& from);
  Range(::google::protobuf::Arena* arena, Range&& from) noexcept
      : Range(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using RangeType = Range_RangeType;
  static constexpr RangeType ULTRASOUND = Range_RangeType_ULTRASOUND;
  static constexpr RangeType INFRARED = Range_RangeType_INFRARED;
  static constexpr RangeType LASER = Range_RangeType_LASER;
  static inline bool RangeType_IsValid(int value) {
    return Range_RangeType_IsValid(value);
  }
  static constexpr RangeType RangeType_MIN = Range_RangeType_RangeType_MIN;
  static constexpr RangeType RangeType_MAX = Range_RangeType_RangeType_MAX;
  static constexpr int RangeType_ARRAYSIZE = Range_RangeType_RangeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* RangeType_descriptor() {
    return Range_RangeType_descriptor();
  }
  template <typename T>
  static inline const std::string& RangeType_Name(T value) {
    return Range_RangeType_Name(value);
  }
  static inline bool RangeType_Parse(absl::string_view name, RangeType* value) {
    return Range_RangeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kRadiationTypeFieldNumber = 2,
    kFieldOfViewFieldNumber = 3,
    kMinRangeFieldNumber = 4,
    kMaxRangeFieldNumber = 5,
    kRangeFieldNumber = 6,
    kVarianceFieldNumber = 7,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Range.RangeType radiation_type = 2;
  void clear_radiation_type() ;
  ::kevin::Range_RangeType radiation_type() const;
  void set_radiation_type(::kevin::Range_RangeType value);

  private:
  ::kevin::Range_RangeType _internal_radiation_type() const;
  void _internal_set_radiation_type(::kevin::Range_RangeType value);

  public:
  // float field_of_view = 3;
  void clear_field_of_view() ;
  float field_of_view() const;
  void set_field_of_view(float value);

  private:
  float _internal_field_of_view() const;
  void _internal_set_field_of_view(float value);

  public:
  // float min_range = 4;
  void clear_min_range() ;
  float min_range() const;
  void set_min_range(float value);

  private:
  float _internal_min_range() const;
  void _internal_set_min_range(float value);

  public:
  // float max_range = 5;
  void clear_max_range() ;
  float max_range() const;
  void set_max_range(float value);

  private:
  float _internal_max_range() const;
  void _internal_set_max_range(float value);

  public:
  // float range = 6;
  void clear_range() ;
  float range() const;
  void set_range(float value);

  private:
  float _internal_range() const;
  void _internal_set_range(float value);

  public:
  // float variance = 7;
  void clear_variance() ;
  float variance() const;
  void set_variance(float value);

  private:
  float _internal_variance() const;
  void _internal_set_variance(float value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.Range)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Range& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    int radiation_type_;
    float field_of_view_;
    float min_range_;
    float max_range_;
    float range_;
    float variance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PressureTemperature final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.PressureTemperature) */ {
 public:
  inline PressureTemperature() : PressureTemperature(nullptr) {}
  ~PressureTemperature() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PressureTemperature* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PressureTemperature));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PressureTemperature(
      ::google::protobuf::internal::ConstantInitialized);

  inline PressureTemperature(const PressureTemperature& from) : PressureTemperature(nullptr, from) {}
  inline PressureTemperature(PressureTemperature&& from) noexcept
      : PressureTemperature(nullptr, std::move(from)) {}
  inline PressureTemperature& operator=(const PressureTemperature& from) {
    CopyFrom(from);
    return *this;
  }
  inline PressureTemperature& operator=(PressureTemperature&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PressureTemperature& default_instance() {
    return *internal_default_instance();
  }
  static inline const PressureTemperature* internal_default_instance() {
    return reinterpret_cast<const PressureTemperature*>(
        &_PressureTemperature_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(PressureTemperature& a, PressureTemperature& b) { a.Swap(&b); }
  inline void Swap(PressureTemperature* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PressureTemperature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PressureTemperature* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PressureTemperature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PressureTemperature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PressureTemperature& from) { PressureTemperature::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PressureTemperature* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.PressureTemperature"; }

 protected:
  explicit PressureTemperature(::google::protobuf::Arena* arena);
  PressureTemperature(::google::protobuf::Arena* arena, const PressureTemperature& from);
  PressureTemperature(::google::protobuf::Arena* arena, PressureTemperature&& from) noexcept
      : PressureTemperature(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kPressureFieldNumber = 2,
    kTemperatureFieldNumber = 3,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // double pressure = 2;
  void clear_pressure() ;
  double pressure() const;
  void set_pressure(double value);

  private:
  double _internal_pressure() const;
  void _internal_set_pressure(double value);

  public:
  // double temperature = 3;
  void clear_temperature() ;
  double temperature() const;
  void set_temperature(double value);

  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.PressureTemperature)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PressureTemperature& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    double pressure_;
    double temperature_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Pressure final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Pressure) */ {
 public:
  inline Pressure() : Pressure(nullptr) {}
  ~Pressure() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Pressure* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Pressure));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Pressure(
      ::google::protobuf::internal::ConstantInitialized);

  inline Pressure(const Pressure& from) : Pressure(nullptr, from) {}
  inline Pressure(Pressure&& from) noexcept
      : Pressure(nullptr, std::move(from)) {}
  inline Pressure& operator=(const Pressure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pressure& operator=(Pressure&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pressure& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pressure* internal_default_instance() {
    return reinterpret_cast<const Pressure*>(
        &_Pressure_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Pressure& a, Pressure& b) { a.Swap(&b); }
  inline void Swap(Pressure* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pressure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pressure* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Pressure>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Pressure& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Pressure& from) { Pressure::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Pressure* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Pressure"; }

 protected:
  explicit Pressure(::google::protobuf::Arena* arena);
  Pressure(::google::protobuf::Arena* arena, const Pressure& from);
  Pressure(::google::protobuf::Arena* arena, Pressure&& from) noexcept
      : Pressure(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kPressureFieldNumber = 2,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // double pressure = 2;
  void clear_pressure() ;
  double pressure() const;
  void set_pressure(double value);

  private:
  double _internal_pressure() const;
  void _internal_set_pressure(double value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.Pressure)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Pressure& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    double pressure_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Odometry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Odometry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Odometry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Odometry(
      ::google::protobuf::internal::ConstantInitialized);

  inline Odometry(const Odometry& from) : Odometry(nullptr, from) {}
  inline Odometry(Odometry&& from) noexcept
      : Odometry(nullptr, std::move(from)) {}
  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
        &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Odometry& a, Odometry& b) { a.Swap(&b); }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odometry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Odometry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Odometry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Odometry& from) { Odometry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Odometry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Odometry"; }

 protected:
  explicit Odometry(::google::protobuf::Arena* arena);
  Odometry(::google::protobuf::Arena* arena, const Odometry& from);
  Odometry(::google::protobuf::Arena* arena, Odometry&& from) noexcept
      : Odometry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChildFrameIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 3,
    kTwistFieldNumber = 4,
  };
  // string child_frame_id = 2;
  void clear_child_frame_id() ;
  const std::string& child_frame_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_child_frame_id(Arg_&& arg, Args_... args);
  std::string* mutable_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* value);

  private:
  const std::string& _internal_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child_frame_id(
      const std::string& value);
  std::string* _internal_mutable_child_frame_id();

  public:
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Pose pose = 3;
  bool has_pose() const;
  void clear_pose() ;
  const ::kevin::Pose& pose() const;
  PROTOBUF_NODISCARD ::kevin::Pose* release_pose();
  ::kevin::Pose* mutable_pose();
  void set_allocated_pose(::kevin::Pose* value);
  void unsafe_arena_set_allocated_pose(::kevin::Pose* value);
  ::kevin::Pose* unsafe_arena_release_pose();

  private:
  const ::kevin::Pose& _internal_pose() const;
  ::kevin::Pose* _internal_mutable_pose();

  public:
  // .kevin.Twist twist = 4;
  bool has_twist() const;
  void clear_twist() ;
  const ::kevin::Twist& twist() const;
  PROTOBUF_NODISCARD ::kevin::Twist* release_twist();
  ::kevin::Twist* mutable_twist();
  void set_allocated_twist(::kevin::Twist* value);
  void unsafe_arena_set_allocated_twist(::kevin::Twist* value);
  ::kevin::Twist* unsafe_arena_release_twist();

  private:
  const ::kevin::Twist& _internal_twist() const;
  ::kevin::Twist* _internal_mutable_twist();

  public:
  // @@protoc_insertion_point(class_scope:kevin.Odometry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Odometry& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr child_frame_id_;
    ::kevin::Header* header_;
    ::kevin::Pose* pose_;
    ::kevin::Twist* twist_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MagneticField final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.MagneticField) */ {
 public:
  inline MagneticField() : MagneticField(nullptr) {}
  ~MagneticField() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MagneticField* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MagneticField));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MagneticField(
      ::google::protobuf::internal::ConstantInitialized);

  inline MagneticField(const MagneticField& from) : MagneticField(nullptr, from) {}
  inline MagneticField(MagneticField&& from) noexcept
      : MagneticField(nullptr, std::move(from)) {}
  inline MagneticField& operator=(const MagneticField& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagneticField& operator=(MagneticField&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MagneticField& default_instance() {
    return *internal_default_instance();
  }
  static inline const MagneticField* internal_default_instance() {
    return reinterpret_cast<const MagneticField*>(
        &_MagneticField_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MagneticField& a, MagneticField& b) { a.Swap(&b); }
  inline void Swap(MagneticField* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagneticField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MagneticField* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MagneticField>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MagneticField& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MagneticField& from) { MagneticField::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MagneticField* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.MagneticField"; }

 protected:
  explicit MagneticField(::google::protobuf::Arena* arena);
  MagneticField(::google::protobuf::Arena* arena, const MagneticField& from);
  MagneticField(::google::protobuf::Arena* arena, MagneticField&& from) noexcept
      : MagneticField(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kMagneticFieldFieldNumber = 2,
    kCovarianceFieldNumber = 3,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Vector3 magnetic_field = 2;
  bool has_magnetic_field() const;
  void clear_magnetic_field() ;
  const ::kevin::Vector3& magnetic_field() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_magnetic_field();
  ::kevin::Vector3* mutable_magnetic_field();
  void set_allocated_magnetic_field(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_magnetic_field(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_magnetic_field();

  private:
  const ::kevin::Vector3& _internal_magnetic_field() const;
  ::kevin::Vector3* _internal_mutable_magnetic_field();

  public:
  // .kevin.Covariance6 covariance = 3;
  bool has_covariance() const;
  void clear_covariance() ;
  const ::kevin::Covariance6& covariance() const;
  PROTOBUF_NODISCARD ::kevin::Covariance6* release_covariance();
  ::kevin::Covariance6* mutable_covariance();
  void set_allocated_covariance(::kevin::Covariance6* value);
  void unsafe_arena_set_allocated_covariance(::kevin::Covariance6* value);
  ::kevin::Covariance6* unsafe_arena_release_covariance();

  private:
  const ::kevin::Covariance6& _internal_covariance() const;
  ::kevin::Covariance6* _internal_mutable_covariance();

  public:
  // @@protoc_insertion_point(class_scope:kevin.MagneticField)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MagneticField& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    ::kevin::Vector3* magnetic_field_;
    ::kevin::Covariance6* covariance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class LaserScan final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.LaserScan) */ {
 public:
  inline LaserScan() : LaserScan(nullptr) {}
  ~LaserScan() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LaserScan* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LaserScan));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LaserScan(
      ::google::protobuf::internal::ConstantInitialized);

  inline LaserScan(const LaserScan& from) : LaserScan(nullptr, from) {}
  inline LaserScan(LaserScan&& from) noexcept
      : LaserScan(nullptr, std::move(from)) {}
  inline LaserScan& operator=(const LaserScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserScan& operator=(LaserScan&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaserScan& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaserScan* internal_default_instance() {
    return reinterpret_cast<const LaserScan*>(
        &_LaserScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(LaserScan& a, LaserScan& b) { a.Swap(&b); }
  inline void Swap(LaserScan* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserScan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaserScan* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LaserScan>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LaserScan& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LaserScan& from) { LaserScan::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LaserScan* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.LaserScan"; }

 protected:
  explicit LaserScan(::google::protobuf::Arena* arena);
  LaserScan(::google::protobuf::Arena* arena, const LaserScan& from);
  LaserScan(::google::protobuf::Arena* arena, LaserScan&& from) noexcept
      : LaserScan(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRangesFieldNumber = 5,
    kIntensitiesFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
    kStartAngleFieldNumber = 3,
    kEndAngleFieldNumber = 4,
  };
  // repeated double ranges = 5;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;

  public:
  void clear_ranges() ;
  double ranges(int index) const;
  void set_ranges(int index, double value);
  void add_ranges(double value);
  const ::google::protobuf::RepeatedField<double>& ranges() const;
  ::google::protobuf::RepeatedField<double>* mutable_ranges();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_ranges() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_ranges();

  public:
  // repeated double intensities = 6;
  int intensities_size() const;
  private:
  int _internal_intensities_size() const;

  public:
  void clear_intensities() ;
  double intensities(int index) const;
  void set_intensities(int index, double value);
  void add_intensities(double value);
  const ::google::protobuf::RepeatedField<double>& intensities() const;
  ::google::protobuf::RepeatedField<double>* mutable_intensities();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_intensities() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_intensities();

  public:
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Pose pose = 2;
  bool has_pose() const;
  void clear_pose() ;
  const ::kevin::Pose& pose() const;
  PROTOBUF_NODISCARD ::kevin::Pose* release_pose();
  ::kevin::Pose* mutable_pose();
  void set_allocated_pose(::kevin::Pose* value);
  void unsafe_arena_set_allocated_pose(::kevin::Pose* value);
  ::kevin::Pose* unsafe_arena_release_pose();

  private:
  const ::kevin::Pose& _internal_pose() const;
  ::kevin::Pose* _internal_mutable_pose();

  public:
  // double start_angle = 3;
  void clear_start_angle() ;
  double start_angle() const;
  void set_start_angle(double value);

  private:
  double _internal_start_angle() const;
  void _internal_set_start_angle(double value);

  public:
  // double end_angle = 4;
  void clear_end_angle() ;
  double end_angle() const;
  void set_end_angle(double value);

  private:
  double _internal_end_angle() const;
  void _internal_set_end_angle(double value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.LaserScan)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LaserScan& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> ranges_;
    ::google::protobuf::RepeatedField<double> intensities_;
    ::kevin::Header* header_;
    ::kevin::Pose* pose_;
    double start_angle_;
    double end_angle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Imu final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.Imu) */ {
 public:
  inline Imu() : Imu(nullptr) {}
  ~Imu() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Imu* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Imu));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Imu(
      ::google::protobuf::internal::ConstantInitialized);

  inline Imu(const Imu& from) : Imu(nullptr, from) {}
  inline Imu(Imu&& from) noexcept
      : Imu(nullptr, std::move(from)) {}
  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Imu& operator=(Imu&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Imu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
        &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Imu& a, Imu& b) { a.Swap(&b); }
  inline void Swap(Imu* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Imu* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Imu* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Imu>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Imu& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Imu& from) { Imu::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Imu* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.Imu"; }

 protected:
  explicit Imu(::google::protobuf::Arena* arena);
  Imu(::google::protobuf::Arena* arena, const Imu& from);
  Imu(::google::protobuf::Arena* arena, Imu&& from) noexcept
      : Imu(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kLinearAccelerationFieldNumber = 2,
    kAngularVelocityFieldNumber = 3,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Vector3 linear_acceleration = 2;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration() ;
  const ::kevin::Vector3& linear_acceleration() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_linear_acceleration();
  ::kevin::Vector3* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_linear_acceleration(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_linear_acceleration();

  private:
  const ::kevin::Vector3& _internal_linear_acceleration() const;
  ::kevin::Vector3* _internal_mutable_linear_acceleration();

  public:
  // .kevin.Vector3 angular_velocity = 3;
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  const ::kevin::Vector3& angular_velocity() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_angular_velocity();
  ::kevin::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_angular_velocity(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_angular_velocity();

  private:
  const ::kevin::Vector3& _internal_angular_velocity() const;
  ::kevin::Vector3* _internal_mutable_angular_velocity();

  public:
  // @@protoc_insertion_point(class_scope:kevin.Imu)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Imu& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    ::kevin::Vector3* linear_acceleration_;
    ::kevin::Vector3* angular_velocity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class HighResolutionImu final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kevin.HighResolutionImu) */ {
 public:
  inline HighResolutionImu() : HighResolutionImu(nullptr) {}
  ~HighResolutionImu() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HighResolutionImu* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HighResolutionImu));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HighResolutionImu(
      ::google::protobuf::internal::ConstantInitialized);

  inline HighResolutionImu(const HighResolutionImu& from) : HighResolutionImu(nullptr, from) {}
  inline HighResolutionImu(HighResolutionImu&& from) noexcept
      : HighResolutionImu(nullptr, std::move(from)) {}
  inline HighResolutionImu& operator=(const HighResolutionImu& from) {
    CopyFrom(from);
    return *this;
  }
  inline HighResolutionImu& operator=(HighResolutionImu&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HighResolutionImu& default_instance() {
    return *internal_default_instance();
  }
  static inline const HighResolutionImu* internal_default_instance() {
    return reinterpret_cast<const HighResolutionImu*>(
        &_HighResolutionImu_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(HighResolutionImu& a, HighResolutionImu& b) { a.Swap(&b); }
  inline void Swap(HighResolutionImu* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HighResolutionImu* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HighResolutionImu* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HighResolutionImu>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HighResolutionImu& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HighResolutionImu& from) { HighResolutionImu::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HighResolutionImu* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kevin.HighResolutionImu"; }

 protected:
  explicit HighResolutionImu(::google::protobuf::Arena* arena);
  HighResolutionImu(::google::protobuf::Arena* arena, const HighResolutionImu& from);
  HighResolutionImu(::google::protobuf::Arena* arena, HighResolutionImu&& from) noexcept
      : HighResolutionImu(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kLinearAccelerationFieldNumber = 2,
    kAngularVelocityFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kMagneticFieldFieldNumber = 5,
    kPressureFieldNumber = 6,
    kTemperatureFieldNumber = 7,
  };
  // .kevin.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::kevin::Header& header() const;
  PROTOBUF_NODISCARD ::kevin::Header* release_header();
  ::kevin::Header* mutable_header();
  void set_allocated_header(::kevin::Header* value);
  void unsafe_arena_set_allocated_header(::kevin::Header* value);
  ::kevin::Header* unsafe_arena_release_header();

  private:
  const ::kevin::Header& _internal_header() const;
  ::kevin::Header* _internal_mutable_header();

  public:
  // .kevin.Vector3 linear_acceleration = 2;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration() ;
  const ::kevin::Vector3& linear_acceleration() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_linear_acceleration();
  ::kevin::Vector3* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_linear_acceleration(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_linear_acceleration();

  private:
  const ::kevin::Vector3& _internal_linear_acceleration() const;
  ::kevin::Vector3* _internal_mutable_linear_acceleration();

  public:
  // .kevin.Vector3 angular_velocity = 3;
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  const ::kevin::Vector3& angular_velocity() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_angular_velocity();
  ::kevin::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_angular_velocity(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_angular_velocity();

  private:
  const ::kevin::Vector3& _internal_angular_velocity() const;
  ::kevin::Vector3* _internal_mutable_angular_velocity();

  public:
  // .kevin.Quaternion orientation = 4;
  bool has_orientation() const;
  void clear_orientation() ;
  const ::kevin::Quaternion& orientation() const;
  PROTOBUF_NODISCARD ::kevin::Quaternion* release_orientation();
  ::kevin::Quaternion* mutable_orientation();
  void set_allocated_orientation(::kevin::Quaternion* value);
  void unsafe_arena_set_allocated_orientation(::kevin::Quaternion* value);
  ::kevin::Quaternion* unsafe_arena_release_orientation();

  private:
  const ::kevin::Quaternion& _internal_orientation() const;
  ::kevin::Quaternion* _internal_mutable_orientation();

  public:
  // .kevin.Vector3 magnetic_field = 5;
  bool has_magnetic_field() const;
  void clear_magnetic_field() ;
  const ::kevin::Vector3& magnetic_field() const;
  PROTOBUF_NODISCARD ::kevin::Vector3* release_magnetic_field();
  ::kevin::Vector3* mutable_magnetic_field();
  void set_allocated_magnetic_field(::kevin::Vector3* value);
  void unsafe_arena_set_allocated_magnetic_field(::kevin::Vector3* value);
  ::kevin::Vector3* unsafe_arena_release_magnetic_field();

  private:
  const ::kevin::Vector3& _internal_magnetic_field() const;
  ::kevin::Vector3* _internal_mutable_magnetic_field();

  public:
  // double pressure = 6;
  void clear_pressure() ;
  double pressure() const;
  void set_pressure(double value);

  private:
  double _internal_pressure() const;
  void _internal_set_pressure(double value);

  public:
  // double temperature = 7;
  void clear_temperature() ;
  double temperature() const;
  void set_temperature(double value);

  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);

  public:
  // @@protoc_insertion_point(class_scope:kevin.HighResolutionImu)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HighResolutionImu& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kevin::Header* header_;
    ::kevin::Vector3* linear_acceleration_;
    ::kevin::Vector3* angular_velocity_;
    ::kevin::Quaternion* orientation_;
    ::kevin::Vector3* magnetic_field_;
    double pressure_;
    double temperature_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Imu

// .kevin.Header header = 1;
inline bool Imu::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& Imu::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& Imu::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Imu.header)
  return _internal_header();
}
inline void Imu::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Imu.header)
}
inline ::kevin::Header* Imu::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* Imu::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Imu.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* Imu::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* Imu::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.Imu.header)
  return _msg;
}
inline void Imu::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Imu.header)
}

// .kevin.Vector3 linear_acceleration = 2;
inline bool Imu::has_linear_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_acceleration_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& Imu::_internal_linear_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& Imu::linear_acceleration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Imu.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void Imu::unsafe_arena_set_allocated_linear_acceleration(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }
  _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Imu.linear_acceleration)
}
inline ::kevin::Vector3* Imu::release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* released = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* Imu::unsafe_arena_release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Imu.linear_acceleration)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* temp = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* Imu::_internal_mutable_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.linear_acceleration_;
}
inline ::kevin::Vector3* Imu::mutable_linear_acceleration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Vector3* _msg = _internal_mutable_linear_acceleration();
  // @@protoc_insertion_point(field_mutable:kevin.Imu.linear_acceleration)
  return _msg;
}
inline void Imu::set_allocated_linear_acceleration(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Imu.linear_acceleration)
}

// .kevin.Vector3 angular_velocity = 3;
inline bool Imu::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& Imu::_internal_angular_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& Imu::angular_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Imu.angular_velocity)
  return _internal_angular_velocity();
}
inline void Imu::unsafe_arena_set_allocated_angular_velocity(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Imu.angular_velocity)
}
inline ::kevin::Vector3* Imu::release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* released = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* Imu::unsafe_arena_release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Imu.angular_velocity)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* Imu::_internal_mutable_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.angular_velocity_;
}
inline ::kevin::Vector3* Imu::mutable_angular_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Vector3* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:kevin.Imu.angular_velocity)
  return _msg;
}
inline void Imu::set_allocated_angular_velocity(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Imu.angular_velocity)
}

// -------------------------------------------------------------------

// HighResolutionImu

// .kevin.Header header = 1;
inline bool HighResolutionImu::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& HighResolutionImu::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& HighResolutionImu::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.header)
  return _internal_header();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.header)
}
inline ::kevin::Header* HighResolutionImu::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* HighResolutionImu::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* HighResolutionImu::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* HighResolutionImu::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.header)
  return _msg;
}
inline void HighResolutionImu::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.header)
}

// .kevin.Vector3 linear_acceleration = 2;
inline bool HighResolutionImu::has_linear_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_acceleration_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& HighResolutionImu::_internal_linear_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& HighResolutionImu::linear_acceleration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_linear_acceleration(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }
  _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.linear_acceleration)
}
inline ::kevin::Vector3* HighResolutionImu::release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* released = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* HighResolutionImu::unsafe_arena_release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.linear_acceleration)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* temp = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* HighResolutionImu::_internal_mutable_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.linear_acceleration_;
}
inline ::kevin::Vector3* HighResolutionImu::mutable_linear_acceleration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Vector3* _msg = _internal_mutable_linear_acceleration();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.linear_acceleration)
  return _msg;
}
inline void HighResolutionImu::set_allocated_linear_acceleration(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.linear_acceleration_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.linear_acceleration)
}

// .kevin.Vector3 angular_velocity = 3;
inline bool HighResolutionImu::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& HighResolutionImu::_internal_angular_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& HighResolutionImu::angular_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.angular_velocity)
  return _internal_angular_velocity();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_angular_velocity(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.angular_velocity)
}
inline ::kevin::Vector3* HighResolutionImu::release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* released = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* HighResolutionImu::unsafe_arena_release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.angular_velocity)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Vector3* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* HighResolutionImu::_internal_mutable_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.angular_velocity_;
}
inline ::kevin::Vector3* HighResolutionImu::mutable_angular_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Vector3* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.angular_velocity)
  return _msg;
}
inline void HighResolutionImu::set_allocated_angular_velocity(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.angular_velocity_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.angular_velocity)
}

// .kevin.Quaternion orientation = 4;
inline bool HighResolutionImu::has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline const ::kevin::Quaternion& HighResolutionImu::_internal_orientation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Quaternion* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Quaternion&>(::kevin::_Quaternion_default_instance_);
}
inline const ::kevin::Quaternion& HighResolutionImu::orientation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.orientation)
  return _internal_orientation();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_orientation(::kevin::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = reinterpret_cast<::kevin::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.orientation)
}
inline ::kevin::Quaternion* HighResolutionImu::release_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::kevin::Quaternion* released = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Quaternion* HighResolutionImu::unsafe_arena_release_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.orientation)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::kevin::Quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::kevin::Quaternion* HighResolutionImu::_internal_mutable_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orientation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Quaternion>(GetArena());
    _impl_.orientation_ = reinterpret_cast<::kevin::Quaternion*>(p);
  }
  return _impl_.orientation_;
}
inline ::kevin::Quaternion* HighResolutionImu::mutable_orientation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::kevin::Quaternion* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.orientation)
  return _msg;
}
inline void HighResolutionImu::set_allocated_orientation(::kevin::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.orientation_ = reinterpret_cast<::kevin::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.orientation)
}

// .kevin.Vector3 magnetic_field = 5;
inline bool HighResolutionImu::has_magnetic_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.magnetic_field_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& HighResolutionImu::_internal_magnetic_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.magnetic_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& HighResolutionImu::magnetic_field() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.magnetic_field)
  return _internal_magnetic_field();
}
inline void HighResolutionImu::unsafe_arena_set_allocated_magnetic_field(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.magnetic_field_);
  }
  _impl_.magnetic_field_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.HighResolutionImu.magnetic_field)
}
inline ::kevin::Vector3* HighResolutionImu::release_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::kevin::Vector3* released = _impl_.magnetic_field_;
  _impl_.magnetic_field_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* HighResolutionImu::unsafe_arena_release_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.HighResolutionImu.magnetic_field)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::kevin::Vector3* temp = _impl_.magnetic_field_;
  _impl_.magnetic_field_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* HighResolutionImu::_internal_mutable_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.magnetic_field_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.magnetic_field_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.magnetic_field_;
}
inline ::kevin::Vector3* HighResolutionImu::mutable_magnetic_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::kevin::Vector3* _msg = _internal_mutable_magnetic_field();
  // @@protoc_insertion_point(field_mutable:kevin.HighResolutionImu.magnetic_field)
  return _msg;
}
inline void HighResolutionImu::set_allocated_magnetic_field(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.magnetic_field_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.magnetic_field_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.HighResolutionImu.magnetic_field)
}

// double pressure = 6;
inline void HighResolutionImu::clear_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = 0;
}
inline double HighResolutionImu::pressure() const {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.pressure)
  return _internal_pressure();
}
inline void HighResolutionImu::set_pressure(double value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:kevin.HighResolutionImu.pressure)
}
inline double HighResolutionImu::_internal_pressure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pressure_;
}
inline void HighResolutionImu::_internal_set_pressure(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = value;
}

// double temperature = 7;
inline void HighResolutionImu::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline double HighResolutionImu::temperature() const {
  // @@protoc_insertion_point(field_get:kevin.HighResolutionImu.temperature)
  return _internal_temperature();
}
inline void HighResolutionImu::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:kevin.HighResolutionImu.temperature)
}
inline double HighResolutionImu::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void HighResolutionImu::_internal_set_temperature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// -------------------------------------------------------------------

// ImuInfo

// .kevin.Covariance6 accel_cov = 1;
inline bool ImuInfo::has_accel_cov() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accel_cov_ != nullptr);
  return value;
}
inline const ::kevin::Covariance6& ImuInfo::_internal_accel_cov() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Covariance6* p = _impl_.accel_cov_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Covariance6&>(::kevin::_Covariance6_default_instance_);
}
inline const ::kevin::Covariance6& ImuInfo::accel_cov() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImuInfo.accel_cov)
  return _internal_accel_cov();
}
inline void ImuInfo::unsafe_arena_set_allocated_accel_cov(::kevin::Covariance6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accel_cov_);
  }
  _impl_.accel_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.ImuInfo.accel_cov)
}
inline ::kevin::Covariance6* ImuInfo::release_accel_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Covariance6* released = _impl_.accel_cov_;
  _impl_.accel_cov_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Covariance6* ImuInfo::unsafe_arena_release_accel_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImuInfo.accel_cov)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Covariance6* temp = _impl_.accel_cov_;
  _impl_.accel_cov_ = nullptr;
  return temp;
}
inline ::kevin::Covariance6* ImuInfo::_internal_mutable_accel_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.accel_cov_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Covariance6>(GetArena());
    _impl_.accel_cov_ = reinterpret_cast<::kevin::Covariance6*>(p);
  }
  return _impl_.accel_cov_;
}
inline ::kevin::Covariance6* ImuInfo::mutable_accel_cov() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Covariance6* _msg = _internal_mutable_accel_cov();
  // @@protoc_insertion_point(field_mutable:kevin.ImuInfo.accel_cov)
  return _msg;
}
inline void ImuInfo::set_allocated_accel_cov(::kevin::Covariance6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accel_cov_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.accel_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.ImuInfo.accel_cov)
}

// .kevin.Covariance6 gyro_cov = 2;
inline bool ImuInfo::has_gyro_cov() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gyro_cov_ != nullptr);
  return value;
}
inline const ::kevin::Covariance6& ImuInfo::_internal_gyro_cov() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Covariance6* p = _impl_.gyro_cov_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Covariance6&>(::kevin::_Covariance6_default_instance_);
}
inline const ::kevin::Covariance6& ImuInfo::gyro_cov() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImuInfo.gyro_cov)
  return _internal_gyro_cov();
}
inline void ImuInfo::unsafe_arena_set_allocated_gyro_cov(::kevin::Covariance6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gyro_cov_);
  }
  _impl_.gyro_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.ImuInfo.gyro_cov)
}
inline ::kevin::Covariance6* ImuInfo::release_gyro_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Covariance6* released = _impl_.gyro_cov_;
  _impl_.gyro_cov_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Covariance6* ImuInfo::unsafe_arena_release_gyro_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImuInfo.gyro_cov)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Covariance6* temp = _impl_.gyro_cov_;
  _impl_.gyro_cov_ = nullptr;
  return temp;
}
inline ::kevin::Covariance6* ImuInfo::_internal_mutable_gyro_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gyro_cov_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Covariance6>(GetArena());
    _impl_.gyro_cov_ = reinterpret_cast<::kevin::Covariance6*>(p);
  }
  return _impl_.gyro_cov_;
}
inline ::kevin::Covariance6* ImuInfo::mutable_gyro_cov() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Covariance6* _msg = _internal_mutable_gyro_cov();
  // @@protoc_insertion_point(field_mutable:kevin.ImuInfo.gyro_cov)
  return _msg;
}
inline void ImuInfo::set_allocated_gyro_cov(::kevin::Covariance6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gyro_cov_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.gyro_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.ImuInfo.gyro_cov)
}

// .kevin.Covariance6 mag_cov = 3;
inline bool ImuInfo::has_mag_cov() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mag_cov_ != nullptr);
  return value;
}
inline const ::kevin::Covariance6& ImuInfo::_internal_mag_cov() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Covariance6* p = _impl_.mag_cov_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Covariance6&>(::kevin::_Covariance6_default_instance_);
}
inline const ::kevin::Covariance6& ImuInfo::mag_cov() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.ImuInfo.mag_cov)
  return _internal_mag_cov();
}
inline void ImuInfo::unsafe_arena_set_allocated_mag_cov(::kevin::Covariance6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mag_cov_);
  }
  _impl_.mag_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.ImuInfo.mag_cov)
}
inline ::kevin::Covariance6* ImuInfo::release_mag_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* released = _impl_.mag_cov_;
  _impl_.mag_cov_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Covariance6* ImuInfo::unsafe_arena_release_mag_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.ImuInfo.mag_cov)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* temp = _impl_.mag_cov_;
  _impl_.mag_cov_ = nullptr;
  return temp;
}
inline ::kevin::Covariance6* ImuInfo::_internal_mutable_mag_cov() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mag_cov_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Covariance6>(GetArena());
    _impl_.mag_cov_ = reinterpret_cast<::kevin::Covariance6*>(p);
  }
  return _impl_.mag_cov_;
}
inline ::kevin::Covariance6* ImuInfo::mutable_mag_cov() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Covariance6* _msg = _internal_mutable_mag_cov();
  // @@protoc_insertion_point(field_mutable:kevin.ImuInfo.mag_cov)
  return _msg;
}
inline void ImuInfo::set_allocated_mag_cov(::kevin::Covariance6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mag_cov_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.mag_cov_ = reinterpret_cast<::kevin::Covariance6*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.ImuInfo.mag_cov)
}

// -------------------------------------------------------------------

// MagneticField

// .kevin.Header header = 1;
inline bool MagneticField::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& MagneticField::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& MagneticField::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.MagneticField.header)
  return _internal_header();
}
inline void MagneticField::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.MagneticField.header)
}
inline ::kevin::Header* MagneticField::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* MagneticField::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.MagneticField.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* MagneticField::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* MagneticField::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.MagneticField.header)
  return _msg;
}
inline void MagneticField::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.MagneticField.header)
}

// .kevin.Vector3 magnetic_field = 2;
inline bool MagneticField::has_magnetic_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.magnetic_field_ != nullptr);
  return value;
}
inline const ::kevin::Vector3& MagneticField::_internal_magnetic_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Vector3* p = _impl_.magnetic_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Vector3&>(::kevin::_Vector3_default_instance_);
}
inline const ::kevin::Vector3& MagneticField::magnetic_field() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.MagneticField.magnetic_field)
  return _internal_magnetic_field();
}
inline void MagneticField::unsafe_arena_set_allocated_magnetic_field(::kevin::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.magnetic_field_);
  }
  _impl_.magnetic_field_ = reinterpret_cast<::kevin::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.MagneticField.magnetic_field)
}
inline ::kevin::Vector3* MagneticField::release_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* released = _impl_.magnetic_field_;
  _impl_.magnetic_field_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Vector3* MagneticField::unsafe_arena_release_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.MagneticField.magnetic_field)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Vector3* temp = _impl_.magnetic_field_;
  _impl_.magnetic_field_ = nullptr;
  return temp;
}
inline ::kevin::Vector3* MagneticField::_internal_mutable_magnetic_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.magnetic_field_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Vector3>(GetArena());
    _impl_.magnetic_field_ = reinterpret_cast<::kevin::Vector3*>(p);
  }
  return _impl_.magnetic_field_;
}
inline ::kevin::Vector3* MagneticField::mutable_magnetic_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Vector3* _msg = _internal_mutable_magnetic_field();
  // @@protoc_insertion_point(field_mutable:kevin.MagneticField.magnetic_field)
  return _msg;
}
inline void MagneticField::set_allocated_magnetic_field(::kevin::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.magnetic_field_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.magnetic_field_ = reinterpret_cast<::kevin::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.MagneticField.magnetic_field)
}

// .kevin.Covariance6 covariance = 3;
inline bool MagneticField::has_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.covariance_ != nullptr);
  return value;
}
inline const ::kevin::Covariance6& MagneticField::_internal_covariance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Covariance6* p = _impl_.covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Covariance6&>(::kevin::_Covariance6_default_instance_);
}
inline const ::kevin::Covariance6& MagneticField::covariance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.MagneticField.covariance)
  return _internal_covariance();
}
inline void MagneticField::unsafe_arena_set_allocated_covariance(::kevin::Covariance6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.covariance_);
  }
  _impl_.covariance_ = reinterpret_cast<::kevin::Covariance6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.MagneticField.covariance)
}
inline ::kevin::Covariance6* MagneticField::release_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* released = _impl_.covariance_;
  _impl_.covariance_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Covariance6* MagneticField::unsafe_arena_release_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.MagneticField.covariance)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* temp = _impl_.covariance_;
  _impl_.covariance_ = nullptr;
  return temp;
}
inline ::kevin::Covariance6* MagneticField::_internal_mutable_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.covariance_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Covariance6>(GetArena());
    _impl_.covariance_ = reinterpret_cast<::kevin::Covariance6*>(p);
  }
  return _impl_.covariance_;
}
inline ::kevin::Covariance6* MagneticField::mutable_covariance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Covariance6* _msg = _internal_mutable_covariance();
  // @@protoc_insertion_point(field_mutable:kevin.MagneticField.covariance)
  return _msg;
}
inline void MagneticField::set_allocated_covariance(::kevin::Covariance6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.covariance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.covariance_ = reinterpret_cast<::kevin::Covariance6*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.MagneticField.covariance)
}

// -------------------------------------------------------------------

// Range

// .kevin.Header header = 1;
inline bool Range::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& Range::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& Range::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Range.header)
  return _internal_header();
}
inline void Range::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Range.header)
}
inline ::kevin::Header* Range::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* Range::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Range.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* Range::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* Range::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.Range.header)
  return _msg;
}
inline void Range::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Range.header)
}

// .kevin.Range.RangeType radiation_type = 2;
inline void Range::clear_radiation_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radiation_type_ = 0;
}
inline ::kevin::Range_RangeType Range::radiation_type() const {
  // @@protoc_insertion_point(field_get:kevin.Range.radiation_type)
  return _internal_radiation_type();
}
inline void Range::set_radiation_type(::kevin::Range_RangeType value) {
  _internal_set_radiation_type(value);
  // @@protoc_insertion_point(field_set:kevin.Range.radiation_type)
}
inline ::kevin::Range_RangeType Range::_internal_radiation_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::Range_RangeType>(_impl_.radiation_type_);
}
inline void Range::_internal_set_radiation_type(::kevin::Range_RangeType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radiation_type_ = value;
}

// float field_of_view = 3;
inline void Range::clear_field_of_view() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_of_view_ = 0;
}
inline float Range::field_of_view() const {
  // @@protoc_insertion_point(field_get:kevin.Range.field_of_view)
  return _internal_field_of_view();
}
inline void Range::set_field_of_view(float value) {
  _internal_set_field_of_view(value);
  // @@protoc_insertion_point(field_set:kevin.Range.field_of_view)
}
inline float Range::_internal_field_of_view() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_of_view_;
}
inline void Range::_internal_set_field_of_view(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_of_view_ = value;
}

// float min_range = 4;
inline void Range::clear_min_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_range_ = 0;
}
inline float Range::min_range() const {
  // @@protoc_insertion_point(field_get:kevin.Range.min_range)
  return _internal_min_range();
}
inline void Range::set_min_range(float value) {
  _internal_set_min_range(value);
  // @@protoc_insertion_point(field_set:kevin.Range.min_range)
}
inline float Range::_internal_min_range() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_range_;
}
inline void Range::_internal_set_min_range(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_range_ = value;
}

// float max_range = 5;
inline void Range::clear_max_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_range_ = 0;
}
inline float Range::max_range() const {
  // @@protoc_insertion_point(field_get:kevin.Range.max_range)
  return _internal_max_range();
}
inline void Range::set_max_range(float value) {
  _internal_set_max_range(value);
  // @@protoc_insertion_point(field_set:kevin.Range.max_range)
}
inline float Range::_internal_max_range() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_range_;
}
inline void Range::_internal_set_max_range(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_range_ = value;
}

// float range = 6;
inline void Range::clear_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.range_ = 0;
}
inline float Range::range() const {
  // @@protoc_insertion_point(field_get:kevin.Range.range)
  return _internal_range();
}
inline void Range::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:kevin.Range.range)
}
inline float Range::_internal_range() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.range_;
}
inline void Range::_internal_set_range(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.range_ = value;
}

// float variance = 7;
inline void Range::clear_variance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variance_ = 0;
}
inline float Range::variance() const {
  // @@protoc_insertion_point(field_get:kevin.Range.variance)
  return _internal_variance();
}
inline void Range::set_variance(float value) {
  _internal_set_variance(value);
  // @@protoc_insertion_point(field_set:kevin.Range.variance)
}
inline float Range::_internal_variance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variance_;
}
inline void Range::_internal_set_variance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variance_ = value;
}

// -------------------------------------------------------------------

// Pressure

// .kevin.Header header = 1;
inline bool Pressure::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& Pressure::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& Pressure::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Pressure.header)
  return _internal_header();
}
inline void Pressure::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Pressure.header)
}
inline ::kevin::Header* Pressure::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* Pressure::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Pressure.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* Pressure::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* Pressure::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.Pressure.header)
  return _msg;
}
inline void Pressure::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Pressure.header)
}

// double pressure = 2;
inline void Pressure::clear_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = 0;
}
inline double Pressure::pressure() const {
  // @@protoc_insertion_point(field_get:kevin.Pressure.pressure)
  return _internal_pressure();
}
inline void Pressure::set_pressure(double value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:kevin.Pressure.pressure)
}
inline double Pressure::_internal_pressure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pressure_;
}
inline void Pressure::_internal_set_pressure(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = value;
}

// -------------------------------------------------------------------

// Temperature

// .kevin.Header header = 1;
inline bool Temperature::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& Temperature::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& Temperature::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Temperature.header)
  return _internal_header();
}
inline void Temperature::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Temperature.header)
}
inline ::kevin::Header* Temperature::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* Temperature::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Temperature.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* Temperature::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* Temperature::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.Temperature.header)
  return _msg;
}
inline void Temperature::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Temperature.header)
}

// double temperature = 2;
inline void Temperature::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline double Temperature::temperature() const {
  // @@protoc_insertion_point(field_get:kevin.Temperature.temperature)
  return _internal_temperature();
}
inline void Temperature::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:kevin.Temperature.temperature)
}
inline double Temperature::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void Temperature::_internal_set_temperature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// -------------------------------------------------------------------

// PressureTemperature

// .kevin.Header header = 1;
inline bool PressureTemperature::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& PressureTemperature::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& PressureTemperature::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.PressureTemperature.header)
  return _internal_header();
}
inline void PressureTemperature::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.PressureTemperature.header)
}
inline ::kevin::Header* PressureTemperature::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* PressureTemperature::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.PressureTemperature.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* PressureTemperature::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* PressureTemperature::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.PressureTemperature.header)
  return _msg;
}
inline void PressureTemperature::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.PressureTemperature.header)
}

// double pressure = 2;
inline void PressureTemperature::clear_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = 0;
}
inline double PressureTemperature::pressure() const {
  // @@protoc_insertion_point(field_get:kevin.PressureTemperature.pressure)
  return _internal_pressure();
}
inline void PressureTemperature::set_pressure(double value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:kevin.PressureTemperature.pressure)
}
inline double PressureTemperature::_internal_pressure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pressure_;
}
inline void PressureTemperature::_internal_set_pressure(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = value;
}

// double temperature = 3;
inline void PressureTemperature::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline double PressureTemperature::temperature() const {
  // @@protoc_insertion_point(field_get:kevin.PressureTemperature.temperature)
  return _internal_temperature();
}
inline void PressureTemperature::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:kevin.PressureTemperature.temperature)
}
inline double PressureTemperature::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void PressureTemperature::_internal_set_temperature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// -------------------------------------------------------------------

// Odometry

// .kevin.Header header = 1;
inline bool Odometry::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& Odometry::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& Odometry::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Odometry.header)
  return _internal_header();
}
inline void Odometry::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Odometry.header)
}
inline ::kevin::Header* Odometry::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* Odometry::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Odometry.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* Odometry::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* Odometry::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.Odometry.header)
  return _msg;
}
inline void Odometry::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Odometry.header)
}

// string child_frame_id = 2;
inline void Odometry::clear_child_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_.ClearToEmpty();
}
inline const std::string& Odometry::child_frame_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Odometry.child_frame_id)
  return _internal_child_frame_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Odometry::set_child_frame_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kevin.Odometry.child_frame_id)
}
inline std::string* Odometry::mutable_child_frame_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_child_frame_id();
  // @@protoc_insertion_point(field_mutable:kevin.Odometry.child_frame_id)
  return _s;
}
inline const std::string& Odometry::_internal_child_frame_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.child_frame_id_.Get();
}
inline void Odometry::_internal_set_child_frame_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_.Set(value, GetArena());
}
inline std::string* Odometry::_internal_mutable_child_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.child_frame_id_.Mutable( GetArena());
}
inline std::string* Odometry::release_child_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Odometry.child_frame_id)
  return _impl_.child_frame_id_.Release();
}
inline void Odometry::set_allocated_child_frame_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.child_frame_id_.IsDefault()) {
    _impl_.child_frame_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kevin.Odometry.child_frame_id)
}

// .kevin.Pose pose = 3;
inline bool Odometry::has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline const ::kevin::Pose& Odometry::_internal_pose() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Pose&>(::kevin::_Pose_default_instance_);
}
inline const ::kevin::Pose& Odometry::pose() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Odometry.pose)
  return _internal_pose();
}
inline void Odometry::unsafe_arena_set_allocated_pose(::kevin::Pose* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = reinterpret_cast<::kevin::Pose*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Odometry.pose)
}
inline ::kevin::Pose* Odometry::release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Pose* released = _impl_.pose_;
  _impl_.pose_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Pose* Odometry::unsafe_arena_release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Odometry.pose)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::kevin::Pose* Odometry::_internal_mutable_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Pose>(GetArena());
    _impl_.pose_ = reinterpret_cast<::kevin::Pose*>(p);
  }
  return _impl_.pose_;
}
inline ::kevin::Pose* Odometry::mutable_pose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:kevin.Odometry.pose)
  return _msg;
}
inline void Odometry::set_allocated_pose(::kevin::Pose* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.pose_ = reinterpret_cast<::kevin::Pose*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Odometry.pose)
}

// .kevin.Twist twist = 4;
inline bool Odometry::has_twist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.twist_ != nullptr);
  return value;
}
inline const ::kevin::Twist& Odometry::_internal_twist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Twist* p = _impl_.twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Twist&>(::kevin::_Twist_default_instance_);
}
inline const ::kevin::Twist& Odometry::twist() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.Odometry.twist)
  return _internal_twist();
}
inline void Odometry::unsafe_arena_set_allocated_twist(::kevin::Twist* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.twist_);
  }
  _impl_.twist_ = reinterpret_cast<::kevin::Twist*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.Odometry.twist)
}
inline ::kevin::Twist* Odometry::release_twist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Twist* released = _impl_.twist_;
  _impl_.twist_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Twist* Odometry::unsafe_arena_release_twist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.Odometry.twist)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Twist* temp = _impl_.twist_;
  _impl_.twist_ = nullptr;
  return temp;
}
inline ::kevin::Twist* Odometry::_internal_mutable_twist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.twist_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Twist>(GetArena());
    _impl_.twist_ = reinterpret_cast<::kevin::Twist*>(p);
  }
  return _impl_.twist_;
}
inline ::kevin::Twist* Odometry::mutable_twist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Twist* _msg = _internal_mutable_twist();
  // @@protoc_insertion_point(field_mutable:kevin.Odometry.twist)
  return _msg;
}
inline void Odometry::set_allocated_twist(::kevin::Twist* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.twist_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.twist_ = reinterpret_cast<::kevin::Twist*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.Odometry.twist)
}

// -------------------------------------------------------------------

// SatNav_NavSatStatus

// .kevin.SatNav.StatusFix status = 1;
inline void SatNav_NavSatStatus::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::kevin::SatNav_StatusFix SatNav_NavSatStatus::status() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.NavSatStatus.status)
  return _internal_status();
}
inline void SatNav_NavSatStatus::set_status(::kevin::SatNav_StatusFix value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.NavSatStatus.status)
}
inline ::kevin::SatNav_StatusFix SatNav_NavSatStatus::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::SatNav_StatusFix>(_impl_.status_);
}
inline void SatNav_NavSatStatus::_internal_set_status(::kevin::SatNav_StatusFix value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// .kevin.SatNav.ServiceType service = 2;
inline void SatNav_NavSatStatus::clear_service() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_ = 0;
}
inline ::kevin::SatNav_ServiceType SatNav_NavSatStatus::service() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.NavSatStatus.service)
  return _internal_service();
}
inline void SatNav_NavSatStatus::set_service(::kevin::SatNav_ServiceType value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.NavSatStatus.service)
}
inline ::kevin::SatNav_ServiceType SatNav_NavSatStatus::_internal_service() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::SatNav_ServiceType>(_impl_.service_);
}
inline void SatNav_NavSatStatus::_internal_set_service(::kevin::SatNav_ServiceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_ = value;
}

// -------------------------------------------------------------------

// SatNav

// .kevin.Header header = 1;
inline bool SatNav::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& SatNav::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& SatNav::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.SatNav.header)
  return _internal_header();
}
inline void SatNav::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.SatNav.header)
}
inline ::kevin::Header* SatNav::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* SatNav::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.SatNav.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* SatNav::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* SatNav::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.SatNav.header)
  return _msg;
}
inline void SatNav::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.SatNav.header)
}

// .kevin.SatNav.NavSatStatus status = 2;
inline bool SatNav::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline void SatNav::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::kevin::SatNav_NavSatStatus& SatNav::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::SatNav_NavSatStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::SatNav_NavSatStatus&>(::kevin::_SatNav_NavSatStatus_default_instance_);
}
inline const ::kevin::SatNav_NavSatStatus& SatNav::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.SatNav.status)
  return _internal_status();
}
inline void SatNav::unsafe_arena_set_allocated_status(::kevin::SatNav_NavSatStatus* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::kevin::SatNav_NavSatStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.SatNav.status)
}
inline ::kevin::SatNav_NavSatStatus* SatNav::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::SatNav_NavSatStatus* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::SatNav_NavSatStatus* SatNav::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.SatNav.status)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::SatNav_NavSatStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::kevin::SatNav_NavSatStatus* SatNav::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::SatNav_NavSatStatus>(GetArena());
    _impl_.status_ = reinterpret_cast<::kevin::SatNav_NavSatStatus*>(p);
  }
  return _impl_.status_;
}
inline ::kevin::SatNav_NavSatStatus* SatNav::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::SatNav_NavSatStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:kevin.SatNav.status)
  return _msg;
}
inline void SatNav::set_allocated_status(::kevin::SatNav_NavSatStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.status_ = reinterpret_cast<::kevin::SatNav_NavSatStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.SatNav.status)
}

// double latitude = 3;
inline void SatNav::clear_latitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = 0;
}
inline double SatNav::latitude() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.latitude)
  return _internal_latitude();
}
inline void SatNav::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.latitude)
}
inline double SatNav::_internal_latitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_;
}
inline void SatNav::_internal_set_latitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = value;
}

// double longitude = 4;
inline void SatNav::clear_longitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = 0;
}
inline double SatNav::longitude() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.longitude)
  return _internal_longitude();
}
inline void SatNav::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.longitude)
}
inline double SatNav::_internal_longitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_;
}
inline void SatNav::_internal_set_longitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = value;
}

// double altitude = 5;
inline void SatNav::clear_altitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ = 0;
}
inline double SatNav::altitude() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.altitude)
  return _internal_altitude();
}
inline void SatNav::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.altitude)
}
inline double SatNav::_internal_altitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.altitude_;
}
inline void SatNav::_internal_set_altitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ = value;
}

// .kevin.Covariance6 position_covariance = 6;
inline bool SatNav::has_position_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_covariance_ != nullptr);
  return value;
}
inline const ::kevin::Covariance6& SatNav::_internal_position_covariance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Covariance6* p = _impl_.position_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Covariance6&>(::kevin::_Covariance6_default_instance_);
}
inline const ::kevin::Covariance6& SatNav::position_covariance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.SatNav.position_covariance)
  return _internal_position_covariance();
}
inline void SatNav::unsafe_arena_set_allocated_position_covariance(::kevin::Covariance6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_covariance_);
  }
  _impl_.position_covariance_ = reinterpret_cast<::kevin::Covariance6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.SatNav.position_covariance)
}
inline ::kevin::Covariance6* SatNav::release_position_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* released = _impl_.position_covariance_;
  _impl_.position_covariance_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Covariance6* SatNav::unsafe_arena_release_position_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.SatNav.position_covariance)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::kevin::Covariance6* temp = _impl_.position_covariance_;
  _impl_.position_covariance_ = nullptr;
  return temp;
}
inline ::kevin::Covariance6* SatNav::_internal_mutable_position_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_covariance_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Covariance6>(GetArena());
    _impl_.position_covariance_ = reinterpret_cast<::kevin::Covariance6*>(p);
  }
  return _impl_.position_covariance_;
}
inline ::kevin::Covariance6* SatNav::mutable_position_covariance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::kevin::Covariance6* _msg = _internal_mutable_position_covariance();
  // @@protoc_insertion_point(field_mutable:kevin.SatNav.position_covariance)
  return _msg;
}
inline void SatNav::set_allocated_position_covariance(::kevin::Covariance6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_covariance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.position_covariance_ = reinterpret_cast<::kevin::Covariance6*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.SatNav.position_covariance)
}

// .kevin.PositionCovariance type = 7;
inline void SatNav::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::kevin::PositionCovariance SatNav::type() const {
  // @@protoc_insertion_point(field_get:kevin.SatNav.type)
  return _internal_type();
}
inline void SatNav::set_type(::kevin::PositionCovariance value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kevin.SatNav.type)
}
inline ::kevin::PositionCovariance SatNav::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kevin::PositionCovariance>(_impl_.type_);
}
inline void SatNav::_internal_set_type(::kevin::PositionCovariance value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// LaserScan

// .kevin.Header header = 1;
inline bool LaserScan::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::kevin::Header& LaserScan::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Header&>(::kevin::_Header_default_instance_);
}
inline const ::kevin::Header& LaserScan::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.LaserScan.header)
  return _internal_header();
}
inline void LaserScan::unsafe_arena_set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.LaserScan.header)
}
inline ::kevin::Header* LaserScan::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Header* LaserScan::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.LaserScan.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kevin::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::kevin::Header* LaserScan::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::kevin::Header*>(p);
  }
  return _impl_.header_;
}
inline ::kevin::Header* LaserScan::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kevin::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kevin.LaserScan.header)
  return _msg;
}
inline void LaserScan::set_allocated_header(::kevin::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::kevin::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.LaserScan.header)
}

// .kevin.Pose pose = 2;
inline bool LaserScan::has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline const ::kevin::Pose& LaserScan::_internal_pose() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kevin::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::kevin::Pose&>(::kevin::_Pose_default_instance_);
}
inline const ::kevin::Pose& LaserScan::pose() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kevin.LaserScan.pose)
  return _internal_pose();
}
inline void LaserScan::unsafe_arena_set_allocated_pose(::kevin::Pose* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = reinterpret_cast<::kevin::Pose*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kevin.LaserScan.pose)
}
inline ::kevin::Pose* LaserScan::release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Pose* released = _impl_.pose_;
  _impl_.pose_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kevin::Pose* LaserScan::unsafe_arena_release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kevin.LaserScan.pose)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kevin::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::kevin::Pose* LaserScan::_internal_mutable_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kevin::Pose>(GetArena());
    _impl_.pose_ = reinterpret_cast<::kevin::Pose*>(p);
  }
  return _impl_.pose_;
}
inline ::kevin::Pose* LaserScan::mutable_pose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kevin::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:kevin.LaserScan.pose)
  return _msg;
}
inline void LaserScan::set_allocated_pose(::kevin::Pose* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.pose_ = reinterpret_cast<::kevin::Pose*>(value);
  // @@protoc_insertion_point(field_set_allocated:kevin.LaserScan.pose)
}

// double start_angle = 3;
inline void LaserScan::clear_start_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_angle_ = 0;
}
inline double LaserScan::start_angle() const {
  // @@protoc_insertion_point(field_get:kevin.LaserScan.start_angle)
  return _internal_start_angle();
}
inline void LaserScan::set_start_angle(double value) {
  _internal_set_start_angle(value);
  // @@protoc_insertion_point(field_set:kevin.LaserScan.start_angle)
}
inline double LaserScan::_internal_start_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_angle_;
}
inline void LaserScan::_internal_set_start_angle(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_angle_ = value;
}

// double end_angle = 4;
inline void LaserScan::clear_end_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_angle_ = 0;
}
inline double LaserScan::end_angle() const {
  // @@protoc_insertion_point(field_get:kevin.LaserScan.end_angle)
  return _internal_end_angle();
}
inline void LaserScan::set_end_angle(double value) {
  _internal_set_end_angle(value);
  // @@protoc_insertion_point(field_set:kevin.LaserScan.end_angle)
}
inline double LaserScan::_internal_end_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_angle_;
}
inline void LaserScan::_internal_set_end_angle(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_angle_ = value;
}

// repeated double ranges = 5;
inline int LaserScan::_internal_ranges_size() const {
  return _internal_ranges().size();
}
inline int LaserScan::ranges_size() const {
  return _internal_ranges_size();
}
inline void LaserScan::clear_ranges() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ranges_.Clear();
}
inline double LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:kevin.LaserScan.ranges)
  return _internal_ranges().Get(index);
}
inline void LaserScan::set_ranges(int index, double value) {
  _internal_mutable_ranges()->Set(index, value);
  // @@protoc_insertion_point(field_set:kevin.LaserScan.ranges)
}
inline void LaserScan::add_ranges(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ranges()->Add(value);
  // @@protoc_insertion_point(field_add:kevin.LaserScan.ranges)
}
inline const ::google::protobuf::RepeatedField<double>& LaserScan::ranges() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kevin.LaserScan.ranges)
  return _internal_ranges();
}
inline ::google::protobuf::RepeatedField<double>* LaserScan::mutable_ranges()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kevin.LaserScan.ranges)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ranges();
}
inline const ::google::protobuf::RepeatedField<double>&
LaserScan::_internal_ranges() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ranges_;
}
inline ::google::protobuf::RepeatedField<double>* LaserScan::_internal_mutable_ranges() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ranges_;
}

// repeated double intensities = 6;
inline int LaserScan::_internal_intensities_size() const {
  return _internal_intensities().size();
}
inline int LaserScan::intensities_size() const {
  return _internal_intensities_size();
}
inline void LaserScan::clear_intensities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.intensities_.Clear();
}
inline double LaserScan::intensities(int index) const {
  // @@protoc_insertion_point(field_get:kevin.LaserScan.intensities)
  return _internal_intensities().Get(index);
}
inline void LaserScan::set_intensities(int index, double value) {
  _internal_mutable_intensities()->Set(index, value);
  // @@protoc_insertion_point(field_set:kevin.LaserScan.intensities)
}
inline void LaserScan::add_intensities(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_intensities()->Add(value);
  // @@protoc_insertion_point(field_add:kevin.LaserScan.intensities)
}
inline const ::google::protobuf::RepeatedField<double>& LaserScan::intensities() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kevin.LaserScan.intensities)
  return _internal_intensities();
}
inline ::google::protobuf::RepeatedField<double>* LaserScan::mutable_intensities()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kevin.LaserScan.intensities)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_intensities();
}
inline const ::google::protobuf::RepeatedField<double>&
LaserScan::_internal_intensities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.intensities_;
}
inline ::google::protobuf::RepeatedField<double>* LaserScan::_internal_mutable_intensities() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.intensities_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::kevin::Range_RangeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::Range_RangeType>() {
  return ::kevin::Range_RangeType_descriptor();
}
template <>
struct is_proto_enum<::kevin::SatNav_StatusFix> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::SatNav_StatusFix>() {
  return ::kevin::SatNav_StatusFix_descriptor();
}
template <>
struct is_proto_enum<::kevin::SatNav_ServiceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::SatNav_ServiceType>() {
  return ::kevin::SatNav_ServiceType_descriptor();
}
template <>
struct is_proto_enum<::kevin::PositionCovariance> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kevin::PositionCovariance>() {
  return ::kevin::PositionCovariance_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sensor_5fmsgs_2eproto_2epb_2eh
